{
  "version": 1,
  "width": 80,
  "height": 25,
  "duration": 94.154430,
  "command": "/bin/bash",
  "title": "",
  "env": {
    "TERM": "xterm",
    "SHELL": "/bin/bash"
  },
  "stdout": [
    [
      0.133075,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.921557,
      "\r\n"
    ],
    [
      0.008406,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.161979,
      "\r\n"
    ],
    [
      0.008158,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      2.837477,
      "e"
    ],
    [
      0.090821,
      "c"
    ],
    [
      0.113438,
      "h"
    ],
    [
      0.036603,
      "o"
    ],
    [
      0.133745,
      " "
    ],
    [
      0.137203,
      "$"
    ],
    [
      0.801904,
      "U"
    ],
    [
      0.080114,
      "S"
    ],
    [
      0.099649,
      "E"
    ],
    [
      0.070020,
      "R"
    ],
    [
      0.287954,
      "\u0007"
    ],
    [
      0.266102,
      "\r\n$USER      $USERNAME  \r\n"
    ],
    [
      0.000837,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  echo $USER"
    ],
    [
      1.190474,
      "N"
    ],
    [
      0.239387,
      "AME "
    ],
    [
      0.834011,
      "\r\noussama\r\n"
    ],
    [
      0.006512,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.644781,
      "\r\n"
    ],
    [
      0.008923,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.130410,
      "\r\n"
    ],
    [
      0.004715,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      2.371622,
      "M"
    ],
    [
      0.109799,
      "Y"
    ],
    [
      0.180655,
      "_"
    ],
    [
      0.320965,
      "N"
    ],
    [
      0.070153,
      "A"
    ],
    [
      0.079759,
      "M"
    ],
    [
      0.103778,
      "E"
    ],
    [
      0.267131,
      "="
    ],
    [
      0.280710,
      "\""
    ],
    [
      0.371477,
      "\u0008\u001b[K"
    ],
    [
      0.099960,
      "'"
    ],
    [
      0.892383,
      "u"
    ],
    [
      0.421075,
      "\u0008\u001b[K"
    ],
    [
      0.240574,
      "O"
    ],
    [
      0.229628,
      "u"
    ],
    [
      0.131404,
      "s"
    ],
    [
      0.221300,
      "s"
    ],
    [
      0.120315,
      "a"
    ],
    [
      0.150204,
      "m"
    ],
    [
      0.090393,
      "a"
    ],
    [
      0.209923,
      " "
    ],
    [
      0.371425,
      "E"
    ],
    [
      0.190358,
      "l"
    ],
    [
      0.160336,
      "g"
    ],
    [
      0.153733,
      "o"
    ],
    [
      0.087132,
      "u"
    ],
    [
      0.200537,
      "m"
    ],
    [
      0.120401,
      "r"
    ],
    [
      0.101052,
      "i"
    ],
    [
      0.240516,
      "'"
    ],
    [
      0.982698,
      "\r\n"
    ],
    [
      0.007270,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.644708,
      "\r\n"
    ],
    [
      0.008311,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.251190,
      "e"
    ],
    [
      0.090535,
      "c"
    ],
    [
      0.113483,
      "h"
    ],
    [
      0.056816,
      "o"
    ],
    [
      0.100426,
      " "
    ],
    [
      0.220581,
      "$"
    ],
    [
      1.122976,
      "M"
    ],
    [
      0.110246,
      "Y"
    ],
    [
      0.139580,
      "_"
    ],
    [
      0.331058,
      "N"
    ],
    [
      0.110888,
      "A"
    ],
    [
      0.299331,
      "ME "
    ],
    [
      0.702905,
      "\r\n"
    ],
    [
      0.000543,
      "Oussama Elgoumri\r\n"
    ],
    [
      0.005814,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.776282,
      "\r\n"
    ],
    [
      0.008375,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.161139,
      "\r\n"
    ],
    [
      0.004639,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      2.351547,
      "S"
    ],
    [
      0.100059,
      "E"
    ],
    [
      0.059890,
      "T"
    ],
    [
      0.301061,
      "\u0008\u001b[K"
    ],
    [
      0.180327,
      "\u0008\u001b[K"
    ],
    [
      0.170513,
      "\u0008\u001b[K"
    ],
    [
      0.831940,
      "t"
    ],
    [
      0.080007,
      "y"
    ],
    [
      0.059650,
      "p"
    ],
    [
      0.100450,
      "e"
    ],
    [
      0.160500,
      " "
    ],
    [
      0.291103,
      "s"
    ],
    [
      0.110189,
      "e"
    ],
    [
      0.070233,
      "t"
    ],
    [
      0.281573,
      "\r\nset is a shell builtin\r\n"
    ],
    [
      0.008742,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.682075,
      "\r\n"
    ],
    [
      0.007972,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.152440,
      "\r\n"
    ],
    [
      0.006146,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.374926,
      "s"
    ],
    [
      0.100260,
      "e"
    ],
    [
      0.069836,
      "t"
    ],
    [
      0.130261,
      " "
    ],
    [
      0.828207,
      "\r\nASCIINEMA_REC=1\r\nBASH=/bin/bash\r\nBASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:progcomp:promptvars:sourcepath\r\nBASH_ALIASES=()\r\nBASH_ARGC=()\r\nBASH_ARGV=()\r\nBASH_CMDS=()\r\nBASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d\r\nBASH_LINENO=()\r\nBASH_REMATCH=([0]=\"\\$MY_NA\" [1]=\"\\$\" [2]=\"MY_NA\")\r\nBASH_SOURCE=()\r\nBASH_VERSINFO=([0]=\"4\" [1]=\"2\" [2]=\"37\" [3]=\"1\" [4]=\"release\" [5]=\"i486-pc-linux-gnu\")\r\nBASH_VERSION='4.2.37(1)-release'\r\nCOLORTERM=gnome-terminal\r\nCOLUMNS=80\r\nCOMP_WORDBREAKS=$' \\t\\n\"\\'\u003e\u003c=;|\u0026(:'\r\nDBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-Bc4Ze0DJn1,guid=1f9d804aa51afffbc215e76055999b46\r\nDESKTOP_SESSION=default\r\nDIRSTACK=()\r\nDISPLAY=:0.0\r\nEUID=1000\r\nGDMSESSION=default\r\nGNOME_DESKTOP_SESSION_ID=this-is-deprecated\r\nGNOME_KEYRING_CONTROL=/home/oussama/.cache/keyring-A0We3R\r\nGNOME_KEYRING_PID=4134\r\nGPG_AGENT_INFO=/home/oussama/.cache/keyring-A0We3R/gpg:0:1\r\nGROUPS=()\r\nHISTCONTROL=ignoreboth\r\nHISTFILE=/home/oussama/.bash_history\r\nHISTFILESIZE=2000\r\nHISTSIZE=1000\r\nHOME=/home/oussama\r\nHOSTNAME=oussama-pc\r\nHOSTTYPE=i486\r\nIFS=$' \\t\\n'\r\nLANG=en_US.UTF-8\r\nLC_ALL=en_US.UTF-8\r\nLINES=25\r\nLOGNAME=oussama\r\nLS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'\r\nMACHTYPE=i486-pc-linux-gnu\r\nMAILCHECK=60\r\nMY_NAME='Oussama Elgoumri'\r\nOPTERR=1\r\nOPTIND=1\r\nORBIT_SOCKETDIR=/tmp/orbit-oussama\r\nOSTYPE=linux-gnu\r\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/home/oussama/.composer/vendor/bin\r\nPIPESTATUS=([0]=\"0\")\r\nPPID=9003\r\nPS1='\\[\\e]0;\\u@\\h: \\w\\a\\]\\[\\033[00;34m\\]\\w\\[\\033[00m\\]$(__git_ps1 \"\\[\\033[00;32m\\] [%s]\\[\\033[00m\\]\")  '\r\nPS2='\u003e '\r\nPS4='+ '\r\nPWD=/home/oussama\r\nSESSION_MANAGER=local/oussama-pc:@/tmp/.ICE-unix/4151,unix/oussama-pc:/tmp/.ICE-unix/4151\r\nSHELL=/bin/bash\r\nSHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\r\nSHLVL=2\r\nSSH_AGENT_PID=4211\r\nSSH_AUTH_SOCK=/home/oussama/.cache/keyring-A0We3R/ssh\r\nTERM=xterm\r\nUID=1000\r\nUSER=oussama\r\nUSERNAME=oussama\r\nWINDOWID=16777219\r\nWINDOWPATH=8\r\nXAUTHORITY=/var/run/gdm3/auth-for-oussama-t1v9Hn/database\r\nXDG_DATA_DIRS=/usr/share/gnome:/usr/local/share/:/usr/share/\r\nXDG_SESSION_COOKIE=4081a9a8eaee0d86246d2c4355688845-1436130118.729757-1511392206\r\n_=set\r\n__colormgr_commandlist=$'\\n    create-device\\n    create-profile\\n    delete-device\\n    delete-profile\\n    device-add-profile\\n    device-get-default-profile\\n    device-get-profile-for-qualifier\\n    device-inhibit\\n    device-make-profile-default\\n    device-set-kind\\n    device-set-model\\n    device-set-serial\\n    device-set-vendor\\n    find-device\\n    find-device-by-property\\n    find-profile\\n    find-profile-by-filename\\n    get-devices\\n    get-devices-by-kind\\n    get-profiles\\n    get-sensor-reading\\n    get-sensors\\n    get-standard-space\\n    profile-set-filename\\n    profile-set-qualif"
    ],
    [
      0.000062,
      "ier\\n    sensor-lock\\n    sensor-set-options\\n    '\r\n__git_all_commands=\r\n__git_diff_common_options=$'--stat --numstat --shortstat --summary\\n\\t\\t\\t--patch-with-stat --name-only --name-status --color\\n\\t\\t\\t--no-color --color-words --no-renames --check\\n\\t\\t\\t--full-index --binary --abbrev --diff-filter=\\n\\t\\t\\t--find-copies-harder\\n\\t\\t\\t--text --ignore-space-at-eol --ignore-space-change\\n\\t\\t\\t--ignore-all-space --exit-code --quiet --ext-diff\\n\\t\\t\\t--no-ext-diff\\n\\t\\t\\t--no-prefix --src-prefix= --dst-prefix=\\n\\t\\t\\t--inter-hunk-context=\\n\\t\\t\\t--patience\\n\\t\\t\\t--raw\\n\\t\\t\\t--dirstat --dirstat= --dirstat-by-file\\n\\t\\t\\t--dirstat-by-file= --cumulative\\n'\r\n__git_fetch_options=$'\\n\\t--quiet --verbose --append --upload-pack --force --keep --depth=\\n\\t--tags --no-tags --all --prune --dry-run\\n'\r\n__git_log_common_options=$'\\n\\t--not --all\\n\\t--branches --tags --remotes\\n\\t--first-parent --merges --no-merges\\n\\t--max-count=\\n\\t--max-age= --since= --after=\\n\\t--min-age= --until= --before=\\n\\t--min-parents= --max-parents=\\n\\t--no-min-parents --no-max-parents\\n'\r\n__git_log_date_formats='relative iso8601 rfc2822 short local default raw'\r\n__git_log_gitk_options=$'\\n\\t--dense --sparse --full-history\\n\\t--simplify-merges --simplify-by-decoration\\n\\t--left-right --notes --no-notes\\n'\r\n__git_log_pretty_formats='oneline short medium full fuller email raw format:'\r\n__git_log_shortlog_options=$'\\n\\t--author= --committer= --grep=\\n\\t--all-match\\n'\r\n__git_merge_options=$'\\n\\t--no-commit --no-stat --log --no-log --squash --strategy\\n\\t--commit --stat --no-squash --ff --no-ff --ff-only --edit --no-edit\\n'\r\n__git_merge_strategies=\r\n__git_mergetools_common=$'diffuse ecmerge emerge kdiff3 meld opendiff\\n\\t\\t\\ttkdiff vimdiff gvimdiff xxdiff araxis p4merge bc3\\n'\r\n__git_porcelain_commands=\r\n__git_send_email_confirm_options='always never auto cc compose'\r\n__git_send_email_suppresscc_options='author self cc bodycc sob cccmd body all'\r\n__git_whitespacelist='nowarn warn error error-all fix'\r\n__grub_script_check_program=grub-script-check\r\n_backup_glob='@(#*#|*@(~|.@(bak|orig|rej|swp|dpkg*|rpm@(orig|new|save))))'\r\n_xspecs=([freeamp]=\"!*.@(mp3|ogg|pls|m3u)\" [cdiff]=\"!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))\" [bibtex]=\"!*.aux\" [rgview]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [oowriter]=\"!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm)\" [chromium-browser]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [tex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [netscape]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [acroread]=\"!*.[pf]df\" [makeinfo]=\"!*.texi*\" [kwrite]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [gview]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [qiv]=\"!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|svg)\" [lrunzip]=\"!*.lrz\" [bzcat]=\"!*.?(t)bz?(2)\" [amaya]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [pdftex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [hbpp]=\"!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])\" [rpm2cpio]=\"!*.[rs]pm\" [view]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [unxz]=\"!*.@(?(t)xz|tlz|lzma)\" [ly2dvi]=\"!*.ly\" [mozilla]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [opera]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [modplugplay]=\"!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|okta|p[st]m|s[3t]m|ult|umx|wav|xm)\" [lzgrep]=\"!*.@(tlz|lzma)\" [dillo]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [aaxine]=\"!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)\" [dvipdfmx]=\"!*.dvi\" [advi]=\"!*.dvi\" [ggv]=\"!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))\" [lzmore]=\"!*.@(tlz|lzma)\" [lzless]=\"!*.@(tlz|lzma)\" [kdvi]=\"!*.@(dvi|DVI)?(.@(gz|Z|bz2))\" [poedit]=\"!*.po\" [firefox]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [gv]=\"!*.@(@(?(e)ps|?"
    ],
    [
      0.000022,
      "(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))\" [madplay]=\"!*.mp3\" [lbzcat]=\"!*.?(t)bz?(2)\" [lilypond]=\"!*.ly\" [gtranslator]=\"!*.po\" [jadetex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [sxemacs]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [epdfview]=\"!*.pdf\" [gpdf]=\"!*.[pf]df\" [kghostview]=\"!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))\" [pbzcat]=\"!*.?(t)bz?(2)\" [texi2dvi]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [ps2pdf12]=\"!*.@(?(e)ps|pdf)\" [ee]=\"!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)\" [lzcat]=\"!*.@(tlz|lzma)\" [lbunzip2]=\"!*.?(t)bz?(2)\" [ps2pdf13]=\"!*.@(?(e)ps|pdf)\" [vim]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [ps2pdf14]=\"!*.@(?(e)ps|pdf)\" [dvips]=\"!*.dvi\" [lzfgrep]=\"!*.@(tlz|lzma)\" [hbrun]=\"!*.[Hh][Rr][Bb]\" [kbabel]=\"!*.po\" [rview]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [kaffeine]=\"!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)\" [xv]=\"!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|?(e)ps)\" [rgvim]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [dvitype]=\"!*.dvi\" [oodraw]=\"!*.@(sxd|std|sda|sdd|?(f)odg|otg)\" [elinks]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [playmidi]=\"!*.@(mid?(i)|cmf)\" [realplay]=\"!*.@(rm?(j)|ra?(m)|smi?(l))\" [xine]=\"!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)\" [xpdf]=\"!*.[pf]df\" [gqmpeg]=\"!*.@(mp3|ogg|pls|m3u)\" [lzegrep]=\"!*.@(tlz|lzma)\" [aviplay]=\"!*.@(avi|asf|wmv)\" [latex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [rvim]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [bunzip2]=\"!*.?(t)bz?(2)\" [ogg123]=\"!*.@(ogg|m3u|flac|spx)\" [ps2pdfwr]=\"!*.@(?(e)ps|pdf)\" [znew]=\"*.Z\" [harbour]=\"!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])\" [lokalize]=\"!*.po\" [kate]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [xemacs]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [dragon]=\"!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)\" [unlzma]=\"!*.@(tlz|lzma)\" [pdflatex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [vi]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [mozilla-firefox]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [ooimpress]=\"!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)\" [gvim]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [uncompress]=\"!*.Z\" [kid3-qt]=\"!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)\" [xanim]=\"!*.@(mpg|mpeg|avi|mov|qt)\" [unpigz]=\"!*.@(Z|[gGd]z|t[ag]z)\" [portecle]=\"!@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)\" [oocalc]=\"!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)\" [emacs]=\"*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)\" [fbxine]=\"!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)\" [lynx]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [ps2pdf]=\"!*.@(?(e)ps|pdf)\" [kpdf]=\"!*.@(?(e)ps|pdf)\""
    ],
    [
      0.000026,
      " [oomath]=\"!*.@(sxm|smf|mml|odf)\" [compress]=\"*.Z\" [iceweasel]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [mpg321]=\"!*.mp3\" [mpg123]=\"!*.mp3\" [zcat]=\"!*.@(Z|[gGd]z|t[ag]z)\" [unzip]=\"!*.@(zip|[ejsw]ar|exe|pk3|wsz|zargo|xpi|sxw|o[tx]t|od[fgpst]|epub|apk)\" [pbunzip2]=\"!*.?(t)bz?(2)\" [kid3]=\"!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)\" [pdfjadetex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [dvipdf]=\"!*.dvi\" [gharbour]=\"!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])\" [modplug123]=\"!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|okta|p[st]m|s[3t]m|ult|umx|wav|xm)\" [dvipdfm]=\"!*.dvi\" [oobase]=\"!*.odb\" [texi2html]=\"!*.texi*\" [zipinfo]=\"!*.@(zip|[ejsw]ar|exe|pk3|wsz|zargo|xpi|sxw|o[tx]t|od[fgpst]|epub|apk)\" [epiphany]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [gunzip]=\"!*.@(Z|[gGd]z|t[ag]z)\" [google-chrome]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [okular]=\"!*.@(okular|@(?(e|x)ps|?(E|X)PS|[pf]df|[PF]DF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM)?(.?(gz|GZ|bz2|BZ2)))\" [slitex]=\"!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)\" [galeon]=\"!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))\" [bzme]=\"!*.@(zip|z|gz|tgz)\" [xfig]=\"!*.fig\" [xzcat]=\"!*.@(?(t)xz|tlz|lzma)\" [timidity]=\"!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)\" [dviselect]=\"!*.dvi\" [xdvi]=\"!*.@(dvi|DVI)?(.@(gz|Z|bz2))\" )\r\n__colormgrcomp () \r\n{ \r\n    local all c s='\r\n' IFS=' ''\t''\r\n';\r\n    local cur=\"${COMP_WORDS[COMP_CWORD]}\";\r\n    if [ $# -gt 2 ]; then\r\n        cur=\"$3\";\r\n    fi;\r\n    for c in $1;\r\n    do\r\n        case \"$c$4\" in \r\n            *.)\r\n                all=\"$all$c$4$s\"\r\n            ;;\r\n            *)\r\n                all=\"$all$c$4 $s\"\r\n            ;;\r\n        esac;\r\n    done;\r\n    IFS=$s;\r\n    COMPREPLY=($(compgen -P \"$2\" -W \"$all\" -- \"$cur\"));\r\n    return\r\n}\r\n__dconf () \r\n{ \r\n    local choices;\r\n    case \"${COMP_CWORD}\" in \r\n        1)\r\n            choices='help \r\nread \r\nlist \r\nwrite \r\nreset\r\n update \r\nlock \r\nunlock \r\nwatch \r\ndump \r\nload '\r\n        ;;\r\n        2)\r\n            case \"${COMP_WORDS[1]}\" in \r\n                help)\r\n                    choices='help \r\nread \r\nlist \r\nwrite \r\nreset\r\n update \r\nlock \r\nunlock \r\nwatch \r\ndump \r\nload '\r\n                ;;\r\n                list | dump | load)\r\n                    choices=\"$(dconf _complete / \"${COMP_WORDS[2]}\")\"\r\n                ;;\r\n                read | list | write | lock | unlock | watch | reset)\r\n                    choices=\"$(dconf _complete '' \"${COMP_WORDS[2]}\")\"\r\n                ;;\r\n            esac\r\n        ;;\r\n        3)\r\n            case \"${COMP_WORDS[1]} ${COMP_WORDS[2]}\" in \r\n                reset\\ -f)\r\n                    choices=\"$(dconf _complete '' \"${COMP_WORDS[3]}\")\"\r\n                ;;\r\n            esac\r\n        ;;\r\n    esac;\r\n    local IFS='\r\n';\r\n    COMPREPLY=($(compgen -W \"${choices}\" \"${COMP_WORDS[$COMP_CWORD]}\"))\r\n}\r\n__expand_tilde_by_ref () \r\n{ \r\n    if [[ ${!1} == \\~* ]]; then\r\n        if [[ ${!1} == */* ]]; then\r\n            eval $1=\"${!1/%\\/*}\"/'${!1#*/}';\r\n        else\r\n            eval $1=\"${!1}\";\r\n        fi;\r\n    fi\r\n}\r\n__get_cword_at_cursor_by_ref () \r\n{ \r\n    local cword words=();\r\n    __reassemble_comp_words_by_ref \"$1\" words cword;\r\n    local i cur index=$COMP_POINT lead=${COMP_LINE:0:$COMP_POINT};\r\n    if [[ $index -gt 0 \u0026\u0026 ( -n $lead \u0026\u0026 -n ${lead//[[:space:]]} ) ]]; then\r\n        cur=$COMP_LINE;\r\n        for ((i = 0; i \u003c= cword; ++i ))\r\n        do\r\n            while [[ ${#cur} -ge ${#words[i]} \u0026\u0026 \"${cur:0:${#words[i]}}\" != \"${words[i]}\" ]]; do\r\n                cur=\"${cur:1}\";\r\n                ((index--));\r\n            done;\r\n            if [[ $i -lt $cword ]]; then\r\n                local old_size=${#cur};\r\n                cur=\"${cur#\"${words[i]}\"}\";\r\n                local new_size=${#cur};\r\n                index=$(( index - old_size + new_size ));\r\n            fi;\r\n        done;\r\n        [[ -n $cur \u0026\u0026 ! -n ${cur//[[:space:]]} ]] \u0026\u0026 cur=;\r\n        [[ $index -lt 0 ]] \u0026\u0026 index=0;"
    ],
    [
      0.000038,
      "\r\n    fi;\r\n    local \"$2\" \"$3\" \"$4\" \u0026\u0026 _upvars -a${#words[@]} $2 \"${words[@]}\" -v $3 \"$cword\" -v $4 \"${cur:0:$index}\"\r\n}\r\n__git_aliased_command () \r\n{ \r\n    local word cmdline=$(git --git-dir=\"$(__gitdir)\" \t\tconfig --get \"alias.$1\");\r\n    for word in $cmdline;\r\n    do\r\n        case \"$word\" in \r\n            \\!gitk | gitk)\r\n                echo \"gitk\";\r\n                return\r\n            ;;\r\n            \\!*)\r\n                : shell command alias\r\n            ;;\r\n            -*)\r\n                : option\r\n            ;;\r\n            *=*)\r\n                : setting env\r\n            ;;\r\n            git)\r\n                : git itself\r\n            ;;\r\n            *)\r\n                echo \"$word\";\r\n                return\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_aliases () \r\n{ \r\n    local i IFS='\r\n';\r\n    for i in $(git --git-dir=\"$(__gitdir)\" config --get-regexp \"alias\\..*\" 2\u003e/dev/null);\r\n    do\r\n        case \"$i\" in \r\n            alias.*)\r\n                i=\"${i#alias.}\";\r\n                echo \"${i/ */}\"\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_complete_file () \r\n{ \r\n    __git_complete_revlist_file\r\n}\r\n__git_complete_remote_or_refspec () \r\n{ \r\n    local cur_=\"$cur\" cmd=\"${words[1]}\";\r\n    local i c=2 remote=\"\" pfx=\"\" lhs=1 no_complete_refspec=0;\r\n    if [ \"$cmd\" = \"remote\" ]; then\r\n        ((c++));\r\n    fi;\r\n    while [ $c -lt $cword ]; do\r\n        i=\"${words[c]}\";\r\n        case \"$i\" in \r\n            --mirror)\r\n                [ \"$cmd\" = \"push\" ] \u0026\u0026 no_complete_refspec=1\r\n            ;;\r\n            --all)\r\n                case \"$cmd\" in \r\n                    push)\r\n                        no_complete_refspec=1\r\n                    ;;\r\n                    fetch)\r\n                        COMPREPLY=();\r\n                        return\r\n                    ;;\r\n                    *)\r\n\r\n                    ;;\r\n                esac\r\n            ;;\r\n            -*)\r\n\r\n            ;;\r\n            *)\r\n                remote=\"$i\";\r\n                break\r\n            ;;\r\n        esac;\r\n        ((c++));\r\n    done;\r\n    if [ -z \"$remote\" ]; then\r\n        __gitcomp_nl \"$(__git_remotes)\";\r\n        return;\r\n    fi;\r\n    if [ $no_complete_refspec = 1 ]; then\r\n        COMPREPLY=();\r\n        return;\r\n    fi;\r\n    [ \"$remote\" = \".\" ] \u0026\u0026 remote=;\r\n    case \"$cur_\" in \r\n        *:*)\r\n            case \"$COMP_WORDBREAKS\" in \r\n                *:*)\r\n                    : great\r\n                ;;\r\n                *)\r\n                    pfx=\"${cur_%%:*}:\"\r\n                ;;\r\n            esac;\r\n            cur_=\"${cur_#*:}\";\r\n            lhs=0\r\n        ;;\r\n        +*)\r\n            pfx=\"+\";\r\n            cur_=\"${cur_#+}\"\r\n        ;;\r\n    esac;\r\n    case \"$cmd\" in \r\n        fetch)\r\n            if [ $lhs = 1 ]; then\r\n                __gitcomp_nl \"$(__git_refs2 \"$remote\")\" \"$pfx\" \"$cur_\";\r\n            else\r\n                __gitcomp_nl \"$(__git_refs)\" \"$pfx\" \"$cur_\";\r\n            fi\r\n        ;;\r\n        pull | remote)\r\n            if [ $lhs = 1 ]; then\r\n                __gitcomp_nl \"$(__git_refs \"$remote\")\" \"$pfx\" \"$cur_\";\r\n            else\r\n                __gitcomp_nl \"$(__git_refs)\" \"$pfx\" \"$cur_\";\r\n            fi\r\n        ;;\r\n        push)\r\n            if [ $lhs = 1 ]; then\r\n                __gitcomp_nl \"$(__git_refs)\" \"$pfx\" \"$cur_\";\r\n            else\r\n                __gitcomp_nl \"$(__git_refs \"$remote\")\" \"$pfx\" \"$cur_\";\r\n            fi\r\n        ;;\r\n    esac\r\n}\r\n__git_complete_revlist () \r\n{ \r\n    __git_complete_revlist_file\r\n}\r\n__git_complete_revlist_file () \r\n{ \r\n    local pfx ls ref cur_=\"$cur\";\r\n    case \"$cur_\" in \r\n        *..?*:*)\r\n            return\r\n        ;;\r\n        ?*:*)\r\n            ref=\"${cur_%%:*}\";\r\n            cur_=\"${cur_#*:}\";\r\n            case \"$cur_\" in \r\n                ?*/*)\r\n                    pfx=\"${cur_%/*}\";\r\n                    cur_=\"${cur_##*/}\";\r\n                    ls=\"$ref:$pfx\";\r\n                    pfx=\"$pfx/\"\r\n                ;;\r\n                *)\r\n                    ls=\"$ref\"\r\n                ;;\r\n            esac;\r\n            case \"$COMP_WORDBREAKS\" in \r\n                *:*)\r\n             "
    ],
    [
      0.000019,
      "       : great\r\n                ;;\r\n                *)\r\n                    pfx=\"$ref:$pfx\"\r\n                ;;\r\n            esac;\r\n            local IFS='\r\n';\r\n            COMPREPLY=($(compgen -P \"$pfx\" \t\t\t-W \"$(git --git-dir=\"$(__gitdir)\" ls-tree \"$ls\" \t\t\t\t| sed '/^100... blob /{\r\n\t\t\t\t           s,^.*\t,,\r\n\t\t\t\t           s,$, ,\r\n\t\t\t\t       }\r\n\t\t\t\t       /^120000 blob /{\r\n\t\t\t\t           s,^.*\t,,\r\n\t\t\t\t           s,$, ,\r\n\t\t\t\t       }\r\n\t\t\t\t       /^040000 tree /{\r\n\t\t\t\t           s,^.*\t,,\r\n\t\t\t\t           s,$,/,\r\n\t\t\t\t       }\r\n\t\t\t\t       s/^.*\t//')\" \t\t\t-- \"$cur_\"))\r\n        ;;\r\n        *...*)\r\n            pfx=\"${cur_%...*}...\";\r\n            cur_=\"${cur_#*...}\";\r\n            __gitcomp_nl \"$(__git_refs)\" \"$pfx\" \"$cur_\"\r\n        ;;\r\n        *..*)\r\n            pfx=\"${cur_%..*}..\";\r\n            cur_=\"${cur_#*..}\";\r\n            __gitcomp_nl \"$(__git_refs)\" \"$pfx\" \"$cur_\"\r\n        ;;\r\n        *)\r\n            __gitcomp_nl \"$(__git_refs)\"\r\n        ;;\r\n    esac\r\n}\r\n__git_complete_strategy () \r\n{ \r\n    __git_compute_merge_strategies;\r\n    case \"$prev\" in \r\n        -s | --strategy)\r\n            __gitcomp \"$__git_merge_strategies\";\r\n            return 0\r\n        ;;\r\n    esac;\r\n    case \"$cur\" in \r\n        --strategy=*)\r\n            __gitcomp \"$__git_merge_strategies\" \"\" \"${cur##--strategy=}\";\r\n            return 0\r\n        ;;\r\n    esac;\r\n    return 1\r\n}\r\n__git_compute_all_commands () \r\n{ \r\n    test -n \"$__git_all_commands\" || __git_all_commands=$(__git_list_all_commands)\r\n}\r\n__git_compute_merge_strategies () \r\n{ \r\n    test -n \"$__git_merge_strategies\" || __git_merge_strategies=$(__git_list_merge_strategies)\r\n}\r\n__git_compute_porcelain_commands () \r\n{ \r\n    __git_compute_all_commands;\r\n    test -n \"$__git_porcelain_commands\" || __git_porcelain_commands=$(__git_list_porcelain_commands)\r\n}\r\n__git_config_get_set_variables () \r\n{ \r\n    local prevword word config_file= c=$cword;\r\n    while [ $c -gt 1 ]; do\r\n        word=\"${words[c]}\";\r\n        case \"$word\" in \r\n            --global | --system | --file=*)\r\n                config_file=\"$word\";\r\n                break\r\n            ;;\r\n            -f | --file)\r\n                config_file=\"$word $prevword\";\r\n                break\r\n            ;;\r\n        esac;\r\n        prevword=$word;\r\n        c=$((--c));\r\n    done;\r\n    git --git-dir=\"$(__gitdir)\" config $config_file --list 2\u003e /dev/null | while read -r line; do\r\n        case \"$line\" in \r\n            *.*=*)\r\n                echo \"${line/=*/}\"\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_find_on_cmdline () \r\n{ \r\n    local word subcommand c=1;\r\n    while [ $c -lt $cword ]; do\r\n        word=\"${words[c]}\";\r\n        for subcommand in $1;\r\n        do\r\n            if [ \"$subcommand\" = \"$word\" ]; then\r\n                echo \"$subcommand\";\r\n                return;\r\n            fi;\r\n        done;\r\n        ((c++));\r\n    done\r\n}\r\n__git_has_doubledash () \r\n{ \r\n    local c=1;\r\n    while [ $c -lt $cword ]; do\r\n        if [ \"--\" = \"${words[c]}\" ]; then\r\n            return 0;\r\n        fi;\r\n        ((c++));\r\n    done;\r\n    return 1\r\n}\r\n__git_heads () \r\n{ \r\n    local dir=\"$(__gitdir)\";\r\n    if [ -d \"$dir\" ]; then\r\n        git --git-dir=\"$dir\" for-each-ref --format='%(refname:short)' refs/heads;\r\n        return;\r\n    fi\r\n}\r\n__git_list_all_commands () \r\n{ \r\n    local i IFS=\" \"'\r\n';\r\n    for i in $(git help -a|egrep '^  [a-zA-Z0-9]');\r\n    do\r\n        case $i in \r\n            *--*)\r\n                : helper pattern\r\n            ;;\r\n            *)\r\n                echo $i\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_list_merge_strategies () \r\n{ \r\n    git merge -s help 2\u003e\u00261 | sed -n -e '/[Aa]vailable strategies are: /,/^$/{\r\n\t\ts/\\.$//\r\n\t\ts/.*://\r\n\t\ts/^[ \t]*//\r\n\t\ts/[ \t]*$//\r\n\t\tp\r\n\t}'\r\n}\r\n__git_list_porcelain_commands () \r\n{ \r\n    local i IFS=\" \"'\r\n';\r\n    __git_compute_all_commands;\r\n    for i in \"help\" $__git_all_commands;\r\n    do\r\n        case $i in \r\n            *--*)\r\n                : helper pattern\r\n            ;;\r\n            applymbox)\r\n                : ask gittus\r\n            ;;\r\n            applypatch)\r\n                : ask gittus\r\n            ;;\r\n  "
    ],
    [
      0.000010,
      "          archimport)\r\n                : import\r\n            ;;\r\n            cat-file)\r\n                : plumbing\r\n            ;;\r\n            check-attr)\r\n                : plumbing\r\n            ;;\r\n            check-ref-format)\r\n                : plumbing\r\n            ;;\r\n            checkout-index)\r\n                : plumbing\r\n            ;;\r\n            commit-tree)\r\n                : plumbing\r\n            ;;\r\n            count-objects)\r\n                : infrequent\r\n            ;;\r\n            cvsexportcommit)\r\n                : export\r\n            ;;\r\n            cvsimport)\r\n                : import\r\n            ;;\r\n            cvsserver)\r\n                : daemon\r\n            ;;\r\n            daemon)\r\n                : daemon\r\n            ;;\r\n            diff-files)\r\n                : plumbing\r\n            ;;\r\n            diff-index)\r\n                : plumbing\r\n            ;;\r\n            diff-tree)\r\n                : plumbing\r\n            ;;\r\n            fast-import)\r\n                : import\r\n            ;;\r\n            fast-export)\r\n                : export\r\n            ;;\r\n            fsck-objects)\r\n                : plumbing\r\n            ;;\r\n            fetch-pack)\r\n                : plumbing\r\n            ;;\r\n            fmt-merge-msg)\r\n                : plumbing\r\n            ;;\r\n            for-each-ref)\r\n                : plumbing\r\n            ;;\r\n            hash-object)\r\n                : plumbing\r\n            ;;\r\n            http-*)\r\n                : transport\r\n            ;;\r\n            index-pack)\r\n                : plumbing\r\n            ;;\r\n            init-db)\r\n                : deprecated\r\n            ;;\r\n            local-fetch)\r\n                : plumbing\r\n            ;;\r\n            lost-found)\r\n                : infrequent\r\n            ;;\r\n            ls-files)\r\n                : plumbing\r\n            ;;\r\n            ls-remote)\r\n                : plumbing\r\n            ;;\r\n            ls-tree)\r\n                : plumbing\r\n            ;;\r\n            mailinfo)\r\n                : plumbing\r\n            ;;\r\n            mailsplit)\r\n                : plumbing\r\n            ;;\r\n            merge-*)\r\n                : plumbing\r\n            ;;\r\n            mktree)\r\n                : plumbing\r\n            ;;\r\n            mktag)\r\n                : plumbing\r\n            ;;\r\n            pack-objects)\r\n                : plumbing\r\n            ;;\r\n            pack-redundant)\r\n                : plumbing\r\n            ;;\r\n            pack-refs)\r\n                : plumbing\r\n            ;;\r\n            parse-remote)\r\n                : plumbing\r\n            ;;\r\n            patch-id)\r\n                : plumbing\r\n            ;;\r\n            peek-remote)\r\n                : plumbing\r\n            ;;\r\n            prune)\r\n                : plumbing\r\n            ;;\r\n            prune-packed)\r\n                : plumbing\r\n            ;;\r\n            quiltimport)\r\n                : import\r\n            ;;\r\n            read-tree)\r\n                : plumbing\r\n            ;;\r\n            receive-pack)\r\n                : plumbing\r\n            ;;\r\n            remote-*)\r\n                : transport\r\n            ;;\r\n            repo-config)\r\n                : deprecated\r\n            ;;\r\n            rerere)\r\n                : plumbing\r\n            ;;\r\n            rev-list)\r\n                : plumbing\r\n            ;;\r\n            rev-parse)\r\n                : plumbing\r\n            ;;\r\n            runstatus)\r\n                : plumbing\r\n            ;;\r\n            sh-setup)\r\n                : internal\r\n            ;;\r\n            shell)\r\n                : daemon\r\n            ;;\r\n            show-ref)\r\n                : plumbing\r\n            ;;\r\n            send-pack)\r\n                : plumbing\r\n            ;;\r\n            show-index)\r\n                : plumbing\r\n            ;;\r\n            ssh-*)\r\n                : transport\r\n            ;;\r\n            stripspace)\r\n                : plumbing\r\n            ;;\r\n            symbolic-ref)\r\n                : plumbing\r\n            ;;\r\n            tar-tree)\r\n                : deprecated\r\n    "
    ],
    [
      0.000017,
      "        ;;\r\n            unpack-file)\r\n                : plumbing\r\n            ;;\r\n            unpack-objects)\r\n                : plumbing\r\n            ;;\r\n            update-index)\r\n                : plumbing\r\n            ;;\r\n            update-ref)\r\n                : plumbing\r\n            ;;\r\n            update-server-info)\r\n                : daemon\r\n            ;;\r\n            upload-archive)\r\n                : plumbing\r\n            ;;\r\n            upload-pack)\r\n                : plumbing\r\n            ;;\r\n            write-tree)\r\n                : plumbing\r\n            ;;\r\n            var)\r\n                : infrequent\r\n            ;;\r\n            verify-pack)\r\n                : infrequent\r\n            ;;\r\n            verify-tag)\r\n                : plumbing\r\n            ;;\r\n            *)\r\n                echo $i\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_match_ctag () \r\n{ \r\n    awk \"/^${1////\\\\/}/ { print \\$1 }\" \"$2\"\r\n}\r\n__git_pretty_aliases () \r\n{ \r\n    local i IFS='\r\n';\r\n    for i in $(git --git-dir=\"$(__gitdir)\" config --get-regexp \"pretty\\..*\" 2\u003e/dev/null);\r\n    do\r\n        case \"$i\" in \r\n            pretty.*)\r\n                i=\"${i#pretty.}\";\r\n                echo \"${i/ */}\"\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__git_ps1 () \r\n{ \r\n    local g=\"$(__gitdir)\";\r\n    if [ -n \"$g\" ]; then\r\n        local r=\"\";\r\n        local b=\"\";\r\n        if [ -f \"$g/rebase-merge/interactive\" ]; then\r\n            r=\"|REBASE-i\";\r\n            b=\"$(cat \"$g/rebase-merge/head-name\")\";\r\n        else\r\n            if [ -d \"$g/rebase-merge\" ]; then\r\n                r=\"|REBASE-m\";\r\n                b=\"$(cat \"$g/rebase-merge/head-name\")\";\r\n            else\r\n                if [ -d \"$g/rebase-apply\" ]; then\r\n                    if [ -f \"$g/rebase-apply/rebasing\" ]; then\r\n                        r=\"|REBASE\";\r\n                    else\r\n                        if [ -f \"$g/rebase-apply/applying\" ]; then\r\n                            r=\"|AM\";\r\n                        else\r\n                            r=\"|AM/REBASE\";\r\n                        fi;\r\n                    fi;\r\n                else\r\n                    if [ -f \"$g/MERGE_HEAD\" ]; then\r\n                        r=\"|MERGING\";\r\n                    else\r\n                        if [ -f \"$g/CHERRY_PICK_HEAD\" ]; then\r\n                            r=\"|CHERRY-PICKING\";\r\n                        else\r\n                            if [ -f \"$g/BISECT_LOG\" ]; then\r\n                                r=\"|BISECTING\";\r\n                            fi;\r\n                        fi;\r\n                    fi;\r\n                fi;\r\n                b=\"$(git symbolic-ref HEAD 2\u003e/dev/null)\" || { \r\n                    b=\"$(\r\n\t\t\t\tcase \"${GIT_PS1_DESCRIBE_STYLE-}\" in\r\n\t\t\t\t(contains)\r\n\t\t\t\t\tgit describe --contains HEAD ;;\r\n\t\t\t\t(branch)\r\n\t\t\t\t\tgit describe --contains --all HEAD ;;\r\n\t\t\t\t(describe)\r\n\t\t\t\t\tgit describe HEAD ;;\r\n\t\t\t\t(* | default)\r\n\t\t\t\t\tgit describe --tags --exact-match HEAD ;;\r\n\t\t\t\tesac 2\u003e/dev/null)\" || b=\"$(cut -c1-7 \"$g/HEAD\" 2\u003e/dev/null)...\" || b=\"unknown\";\r\n                    b=\"($b)\"\r\n                };\r\n            fi;\r\n        fi;\r\n        local w=\"\";\r\n        local i=\"\";\r\n        local s=\"\";\r\n        local u=\"\";\r\n        local c=\"\";\r\n        local p=\"\";\r\n        if [ \"true\" = \"$(git rev-parse --is-inside-git-dir 2\u003e/dev/null)\" ]; then\r\n            if [ \"true\" = \"$(git rev-parse --is-bare-repository 2\u003e/dev/null)\" ]; then\r\n                c=\"BARE:\";\r\n            else\r\n                b=\"GIT_DIR!\";\r\n            fi;\r\n        else\r\n            if [ \"true\" = \"$(git rev-parse --is-inside-work-tree 2\u003e/dev/null)\" ]; then\r\n                if [ -n \"${GIT_PS1_SHOWDIRTYSTATE-}\" ]; then\r\n                    if [ \"$(git config --bool bash.showDirtyState)\" != \"false\" ]; then\r\n                        git diff --no-ext-diff --quiet --exit-code || w=\"*\";\r\n                        if git rev-parse --quiet --verify HEAD \u003e /dev/null; then\r\n                            git diff-index --cached --quiet HEAD -- || i=\"+\";\r\n                        else\r\n                            i=\"#\";\r\n                        fi;\r\n          "
    ],
    [
      0.000015,
      "          fi;\r\n                fi;\r\n                if [ -n \"${GIT_PS1_SHOWSTASHSTATE-}\" ]; then\r\n                    git rev-parse --verify refs/stash \u003e /dev/null 2\u003e\u00261 \u0026\u0026 s=\"$\";\r\n                fi;\r\n                if [ -n \"${GIT_PS1_SHOWUNTRACKEDFILES-}\" ]; then\r\n                    if [ -n \"$(git ls-files --others --exclude-standard)\" ]; then\r\n                        u=\"%\";\r\n                    fi;\r\n                fi;\r\n                if [ -n \"${GIT_PS1_SHOWUPSTREAM-}\" ]; then\r\n                    __git_ps1_show_upstream;\r\n                fi;\r\n            fi;\r\n        fi;\r\n        local f=\"$w$i$s$u\";\r\n        printf -- \"${1:- (%s)}\" \"$c${b##refs/heads/}${f:+ $f}$r$p\";\r\n    fi\r\n}\r\n__git_ps1_show_upstream () \r\n{ \r\n    local key value;\r\n    local svn_remote svn_url_pattern count n;\r\n    local upstream=git legacy=\"\" verbose=\"\";\r\n    svn_remote=();\r\n    local output=\"$(git config -z --get-regexp '^(svn-remote\\..*\\.url|bash\\.showupstream)$' 2\u003e/dev/null | tr '\\0\\n' '\\n ')\";\r\n    while read -r key value; do\r\n        case \"$key\" in \r\n            bash.showupstream)\r\n                GIT_PS1_SHOWUPSTREAM=\"$value\";\r\n                if [[ -z \"${GIT_PS1_SHOWUPSTREAM}\" ]]; then\r\n                    p=\"\";\r\n                    return;\r\n                fi\r\n            ;;\r\n            svn-remote.*.url)\r\n                svn_remote[ $((${#svn_remote[@]} + 1)) ]=\"$value\";\r\n                svn_url_pattern+=\"\\\\|$value\";\r\n                upstream=svn+git\r\n            ;;\r\n        esac;\r\n    done \u003c\u003c\u003c \"$output\";\r\n    for option in ${GIT_PS1_SHOWUPSTREAM};\r\n    do\r\n        case \"$option\" in \r\n            git | svn)\r\n                upstream=\"$option\"\r\n            ;;\r\n            verbose)\r\n                verbose=1\r\n            ;;\r\n            legacy)\r\n                legacy=1\r\n            ;;\r\n        esac;\r\n    done;\r\n    case \"$upstream\" in \r\n        git)\r\n            upstream=\"@{upstream}\"\r\n        ;;\r\n        svn*)\r\n            local svn_upstream=($(git log --first-parent -1 \t\t\t\t\t--grep=\"^git-svn-id: \\(${svn_url_pattern#??}\\)\" 2\u003e/dev/null));\r\n            if [[ 0 -ne ${#svn_upstream[@]} ]]; then\r\n                svn_upstream=${svn_upstream[ ${#svn_upstream[@]} - 2 ]};\r\n                svn_upstream=${svn_upstream%@*};\r\n                local n_stop=\"${#svn_remote[@]}\";\r\n                for ((n=1; n \u003c= n_stop; n++))\r\n                do\r\n                    svn_upstream=${svn_upstream#${svn_remote[$n]}};\r\n                done;\r\n                if [[ -z \"$svn_upstream\" ]]; then\r\n                    upstream=${GIT_SVN_ID:-git-svn};\r\n                else\r\n                    upstream=${svn_upstream#/};\r\n                fi;\r\n            else\r\n                if [[ \"svn+git\" = \"$upstream\" ]]; then\r\n                    upstream=\"@{upstream}\";\r\n                fi;\r\n            fi\r\n        ;;\r\n    esac;\r\n    if [[ -z \"$legacy\" ]]; then\r\n        count=\"$(git rev-list --count --left-right \t\t\t\t\"$upstream\"...HEAD 2\u003e/dev/null)\";\r\n    else\r\n        local commits;\r\n        if commits=\"$(git rev-list --left-right \"$upstream\"...HEAD 2\u003e/dev/null)\"; then\r\n            local commit behind=0 ahead=0;\r\n            for commit in $commits;\r\n            do\r\n                case \"$commit\" in \r\n                    \"\u003c\"*)\r\n                        ((behind++))\r\n                    ;;\r\n                    *)\r\n                        ((ahead++))\r\n                    ;;\r\n                esac;\r\n            done;\r\n            count=\"$behind\t$ahead\";\r\n        else\r\n            count=\"\";\r\n        fi;\r\n    fi;\r\n    if [[ -z \"$verbose\" ]]; then\r\n        case \"$count\" in \r\n            \"\")\r\n                p=\"\"\r\n            ;;\r\n            \"0\t0\")\r\n                p=\"=\"\r\n            ;;\r\n            \"0\t\"*)\r\n                p=\"\u003e\"\r\n            ;;\r\n            *\"\t0\")\r\n                p=\"\u003c\"\r\n            ;;\r\n            *)\r\n                p=\"\u003c\u003e\"\r\n            ;;\r\n        esac;\r\n    else\r\n        case \"$count\" in \r\n            \"\")\r\n                p=\"\"\r\n            ;;\r\n            \"0\t0\")\r\n                p=\" u=\"\r\n            ;;\r\n            \"0\t\"*)\r\n                p=\" u+${count#0\t}\"\r\n           "
    ],
    [
      0.000018,
      " ;;\r\n            *\"\t0\")\r\n                p=\" u-${count%\t0}\"\r\n            ;;\r\n            *)\r\n                p=\" u+${count#*\t}-${count%\t*}\"\r\n            ;;\r\n        esac;\r\n    fi\r\n}\r\n__git_reassemble_comp_words_by_ref () \r\n{ \r\n    local exclude i j first;\r\n    exclude=\"${1//[^$COMP_WORDBREAKS]}\";\r\n    cword_=$COMP_CWORD;\r\n    if [ -z \"$exclude\" ]; then\r\n        words_=(\"${COMP_WORDS[@]}\");\r\n        return;\r\n    fi;\r\n    for ((i=0, j=0; i \u003c ${#COMP_WORDS[@]}; i++, j++))\r\n    do\r\n        first=t;\r\n        while [ $i -gt 0 ] \u0026\u0026 [ -n \"${COMP_WORDS[$i]}\" ] \u0026\u0026 [ \"${COMP_WORDS[$i]//[^$exclude]}\" = \"${COMP_WORDS[$i]}\" ]; do\r\n            if [ $j -ge 2 ] \u0026\u0026 [ -n \"$first\" ]; then\r\n                ((j--));\r\n            fi;\r\n            first=;\r\n            words_[$j]=${words_[j]}${COMP_WORDS[i]};\r\n            if [ $i = $COMP_CWORD ]; then\r\n                cword_=$j;\r\n            fi;\r\n            if (($i \u003c ${#COMP_WORDS[@]} - 1)); then\r\n                ((i++));\r\n            else\r\n                return;\r\n            fi;\r\n        done;\r\n        words_[$j]=${words_[j]}${COMP_WORDS[i]};\r\n        if [ $i = $COMP_CWORD ]; then\r\n            cword_=$j;\r\n        fi;\r\n    done\r\n}\r\n__git_refs () \r\n{ \r\n    local i hash dir=\"$(__gitdir \"${1-}\")\" track=\"${2-}\";\r\n    local format refs;\r\n    if [ -d \"$dir\" ]; then\r\n        case \"$cur\" in \r\n            refs | refs/*)\r\n                format=\"refname\";\r\n                refs=\"${cur%/*}\";\r\n                track=\"\"\r\n            ;;\r\n            *)\r\n                for i in HEAD FETCH_HEAD ORIG_HEAD MERGE_HEAD;\r\n                do\r\n                    if [ -e \"$dir/$i\" ]; then\r\n                        echo $i;\r\n                    fi;\r\n                done;\r\n                format=\"refname:short\";\r\n                refs=\"refs/tags refs/heads refs/remotes\"\r\n            ;;\r\n        esac;\r\n        git --git-dir=\"$dir\" for-each-ref --format=\"%($format)\" $refs;\r\n        if [ -n \"$track\" ]; then\r\n            local ref entry;\r\n            git --git-dir=\"$dir\" for-each-ref --shell --format=\"ref=%(refname:short)\" \"refs/remotes/\" | while read -r entry; do\r\n                eval \"$entry\";\r\n                ref=\"${ref#*/}\";\r\n                if [[ \"$ref\" == \"$cur\"* ]]; then\r\n                    echo \"$ref\";\r\n                fi;\r\n            done | uniq -u;\r\n        fi;\r\n        return;\r\n    fi;\r\n    case \"$cur\" in \r\n        refs | refs/*)\r\n            git ls-remote \"$dir\" \"$cur*\" 2\u003e /dev/null | while read -r hash i; do\r\n                case \"$i\" in \r\n                    *^{})\r\n\r\n                    ;;\r\n                    *)\r\n                        echo \"$i\"\r\n                    ;;\r\n                esac;\r\n            done\r\n        ;;\r\n        *)\r\n            git ls-remote \"$dir\" HEAD ORIG_HEAD 'refs/tags/*' 'refs/heads/*' 'refs/remotes/*' 2\u003e /dev/null | while read -r hash i; do\r\n                case \"$i\" in \r\n                    *^{})\r\n\r\n                    ;;\r\n                    refs/*)\r\n                        echo \"${i#refs/*/}\"\r\n                    ;;\r\n                    *)\r\n                        echo \"$i\"\r\n                    ;;\r\n                esac;\r\n            done\r\n        ;;\r\n    esac\r\n}\r\n__git_refs2 () \r\n{ \r\n    local i;\r\n    for i in $(__git_refs \"$1\");\r\n    do\r\n        echo \"$i:$i\";\r\n    done\r\n}\r\n__git_refs_remotes () \r\n{ \r\n    local i hash;\r\n    git ls-remote \"$1\" 'refs/heads/*' 2\u003e /dev/null | while read -r hash i; do\r\n        echo \"$i:refs/remotes/$1/${i#refs/heads/}\";\r\n    done\r\n}\r\n__git_remotes () \r\n{ \r\n    local i IFS='\r\n' d=\"$(__gitdir)\";\r\n    test -d \"$d/remotes\" \u0026\u0026 ls --color=auto -1 \"$d/remotes\";\r\n    for i in $(git --git-dir=\"$d\" config --get-regexp 'remote\\..*\\.url' 2\u003e/dev/null);\r\n    do\r\n        i=\"${i#remote.}\";\r\n        echo \"${i/.url*/}\";\r\n    done\r\n}\r\n__git_tags () \r\n{ \r\n    local dir=\"$(__gitdir)\";\r\n    if [ -d \"$dir\" ]; then\r\n        git --git-dir=\"$dir\" for-each-ref --format='%(refname:short)' refs/tags;\r\n        return;\r\n    fi\r\n}\r\n__gitcomp () \r\n{ \r\n    local cur_=\"${3-$cur}\";\r\n    case \"$cur_\" in \r\n        --*=)\r\n            COMPREPLY=()\r\n        ;;\r\n        *)\r\n            local"
    ],
    [
      0.000011,
      " IFS='\r\n';\r\n            COMPREPLY=($(compgen -P \"${2-}\" \t\t\t-W \"$(__gitcomp_1 \"${1-}\" \"${4-}\")\" \t\t\t-- \"$cur_\"))\r\n        ;;\r\n    esac\r\n}\r\n__gitcomp_1 () \r\n{ \r\n    local c IFS=' ''\t''\r\n';\r\n    for c in $1;\r\n    do\r\n        case \"$c$2\" in \r\n            --*=*)\r\n                printf %s'\r\n' \"$c$2\"\r\n            ;;\r\n            *.)\r\n                printf %s'\r\n' \"$c$2\"\r\n            ;;\r\n            *)\r\n                printf %s'\r\n' \"$c$2 \"\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__gitcomp_nl () \r\n{ \r\n    local IFS='\r\n';\r\n    COMPREPLY=($(compgen -P \"${2-}\" -S \"${4- }\" -W \"$1\" -- \"${3-$cur}\"))\r\n}\r\n__gitdir () \r\n{ \r\n    if [ -z \"${1-}\" ]; then\r\n        if [ -n \"${__git_dir-}\" ]; then\r\n            echo \"$__git_dir\";\r\n        else\r\n            if [ -d .git ]; then\r\n                echo .git;\r\n            else\r\n                git rev-parse --git-dir 2\u003e /dev/null;\r\n            fi;\r\n        fi;\r\n    else\r\n        if [ -d \"$1/.git\" ]; then\r\n            echo \"$1/.git\";\r\n        else\r\n            echo \"$1\";\r\n        fi;\r\n    fi\r\n}\r\n__grub_dir () \r\n{ \r\n    local i c=1 boot_dir;\r\n    for ((c=1; c \u003c= ${#COMP_WORDS[@]}; c++ ))\r\n    do\r\n        i=\"${COMP_WORDS[c]}\";\r\n        case \"$i\" in \r\n            --boot-directory)\r\n                c=$((++c));\r\n                i=\"${COMP_WORDS[c]}\";\r\n                boot_dir=\"${i##*=}\";\r\n                break\r\n            ;;\r\n        esac;\r\n    done;\r\n    boot_dir=${boot_dir-/boot};\r\n    echo \"${boot_dir%/}/grub\"\r\n}\r\n__grub_get_last_option () \r\n{ \r\n    local i;\r\n    for ((i=$COMP_CWORD-1; i \u003e 0; i-- ))\r\n    do\r\n        if [[ \"${COMP_WORDS[i]}\" == -* ]]; then\r\n            echo \"${COMP_WORDS[i]}\";\r\n            break;\r\n        fi;\r\n    done\r\n}\r\n__grub_get_options_from_help () \r\n{ \r\n    local prog;\r\n    if [ $# -ge 1 ]; then\r\n        prog=\"$1\";\r\n    else\r\n        prog=\"${COMP_WORDS[0]}\";\r\n    fi;\r\n    local i IFS=\" \"'\t''\r\n';\r\n    for i in $(LC_ALL=C $prog --help);\r\n    do\r\n        case $i in \r\n            --*)\r\n                echo \"${i%=*}\"\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__grub_get_options_from_usage () \r\n{ \r\n    local prog;\r\n    if [ $# -ge 1 ]; then\r\n        prog=\"$1\";\r\n    else\r\n        prog=\"${COMP_WORDS[0]}\";\r\n    fi;\r\n    local i IFS=\" \"'\t''\r\n';\r\n    for i in $(LC_ALL=C $prog --usage);\r\n    do\r\n        case $i in \r\n            \\[--*\\])\r\n                i=${i#[};\r\n                echo ${i%%?(=*)]}\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n__grub_list_menuentries () \r\n{ \r\n    local cur=\"${COMP_WORDS[COMP_CWORD]}\";\r\n    local config_file=$(__grub_dir)/grub.cfg;\r\n    if [ -f \"$config_file\" ]; then\r\n        local IFS='\r\n';\r\n        COMPREPLY=($(compgen             -W \"$( awk -F \"[\\\"']\" '/menuentry/ { print $2 }' $config_file )\"             -- \"$cur\" ));\r\n    fi\r\n}\r\n__grub_list_modules () \r\n{ \r\n    local grub_dir=$(__grub_dir);\r\n    local IFS='\r\n';\r\n    COMPREPLY=($( compgen -f -X '!*/*.mod' -- \"${grub_dir}/$cur\" | {\r\n         while read -r tmp; do\r\n             [ -n $tmp ] \u0026\u0026 {\r\n                 tmp=${tmp##*/}\r\n                 printf '%s\\n' ${tmp%.mod}\r\n             }\r\n         done\r\n         }\r\n        ))\r\n}\r\n__grubcomp () \r\n{ \r\n    local cur=\"${COMP_WORDS[COMP_CWORD]}\";\r\n    if [ $# -gt 2 ]; then\r\n        cur=\"$3\";\r\n    fi;\r\n    case \"$cur\" in \r\n        --*=)\r\n            COMPREPLY=()\r\n        ;;\r\n        *)\r\n            local IFS=' ''\t''\r\n';\r\n            COMPREPLY=($(compgen -P \"${2-}\" -W \"${1-}\" -S \"${4-}\" -- \"$cur\"))\r\n        ;;\r\n    esac\r\n}\r\n__gvfs_multiple_uris () \r\n{ \r\n    local IFS='\r\n';\r\n    local cur=\"${COMP_WORDS[COMP_CWORD]}\";\r\n    COMPREPLY=($(compgen -W '$(gvfs-ls --show-completions \"$cur\")' -- \"\"));\r\n    case \"$cur\" in \r\n        *:*)\r\n            case \"$COMP_WORDBREAKS\" in \r\n                *:*)\r\n                    colon_prefix=$(echo $cur | sed 's/:[^:]*$/:/' );\r\n                    COMPREPLY=${COMPREPLY##${colon_prefix}}\r\n                ;;\r\n            esac\r\n        ;;\r\n    esac\r\n}\r\n__ltrim_colon_completions () \r\n{ \r\n    if [[ \"$1\" == *:* \u0026\u0026 \"$COMP_WORDBREAKS\" == *:* ]]; then\r\n        local colon_word=${1%${1##*:}};\r\n        local i=${#COMPREPLY[*]};\r\n        whil"
    ],
    [
      0.000018,
      "e [[ $((--i)) -ge 0 ]]; do\r\n            COMPREPLY[$i]=${COMPREPLY[$i]#\"$colon_word\"};\r\n        done;\r\n    fi\r\n}\r\n__parse_options () \r\n{ \r\n    local option option2 i IFS=' \t\r\n,/|';\r\n    option=;\r\n    for i in $1;\r\n    do\r\n        case $i in \r\n            ---*)\r\n                break\r\n            ;;\r\n            --?*)\r\n                option=$i;\r\n                break\r\n            ;;\r\n            -?*)\r\n                [[ -n $option ]] || option=$i\r\n            ;;\r\n            *)\r\n                break\r\n            ;;\r\n        esac;\r\n    done;\r\n    [[ -n $option ]] || return 0;\r\n    IFS=' \t\r\n';\r\n    if [[ $option =~ (\\[((no|dont)-?)\\]). ]]; then\r\n        option2=${option/\"${BASH_REMATCH[1]}\"/};\r\n        option2=${option2%%[\u003c{().[]*};\r\n        printf '%s\\n' \"${option2/=*/=}\";\r\n        option=${option/\"${BASH_REMATCH[1]}\"/\"${BASH_REMATCH[2]}\"};\r\n    fi;\r\n    option=${option%%[\u003c{().[]*};\r\n    printf '%s\\n' \"${option/=*/=}\"\r\n}\r\n__reassemble_comp_words_by_ref () \r\n{ \r\n    local exclude i j line ref;\r\n    if [[ -n $1 ]]; then\r\n        exclude=\"${1//[^$COMP_WORDBREAKS]}\";\r\n    fi;\r\n    eval $3=$COMP_CWORD;\r\n    if [[ -n $exclude ]]; then\r\n        line=$COMP_LINE;\r\n        for ((i=0, j=0; i \u003c ${#COMP_WORDS[@]}; i++, j++))\r\n        do\r\n            while [[ $i -gt 0 \u0026\u0026 ${COMP_WORDS[$i]} == +([$exclude]) ]]; do\r\n                [[ $line != [' \t']* ]] \u0026\u0026 (( j \u003e= 2 )) \u0026\u0026 ((j--));\r\n                ref=\"$2[$j]\";\r\n                eval $2[$j]=\\${!ref}\\${COMP_WORDS[i]};\r\n                [[ $i == $COMP_CWORD ]] \u0026\u0026 eval $3=$j;\r\n                line=${line#*\"${COMP_WORDS[$i]}\"};\r\n                [[ $line == [' \t']* ]] \u0026\u0026 ((j++));\r\n                (( $i \u003c ${#COMP_WORDS[@]} - 1)) \u0026\u0026 ((i++)) || break 2;\r\n            done;\r\n            ref=\"$2[$j]\";\r\n            eval $2[$j]=\\${!ref}\\${COMP_WORDS[i]};\r\n            line=${line#*\"${COMP_WORDS[i]}\"};\r\n            [[ $i == $COMP_CWORD ]] \u0026\u0026 eval $3=$j;\r\n        done;\r\n    else\r\n        eval $2=\\( \\\"\\${COMP_WORDS[@]}\\\" \\);\r\n    fi\r\n}\r\n_a2dismod () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    _apache2_modsites mods-enabled\r\n}\r\n_a2dissite () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    _apache2_modsites sites-enabled\r\n}\r\n_a2enmod () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    _apache2_modsites mods-available\r\n}\r\n_a2ensite () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    _apache2_modsites sites-available\r\n}\r\n_allowed_groups () \r\n{ \r\n    if _complete_as_root; then\r\n        local IFS='\r\n';\r\n        COMPREPLY=($( compgen -g -- \"$1\" ));\r\n    else\r\n        local IFS='\r\n ';\r\n        COMPREPLY=($( compgen -W             \"$( id -Gn 2\u003e/dev/null || groups 2\u003e/dev/null )\" -- \"$1\" ));\r\n    fi\r\n}\r\n_allowed_users () \r\n{ \r\n    if _complete_as_root; then\r\n        local IFS='\r\n';\r\n        COMPREPLY=($( compgen -u -- \"${1:-$cur}\" ));\r\n    else\r\n        local IFS='\r\n ';\r\n        COMPREPLY=($( compgen -W             \"$( id -un 2\u003e/dev/null || whoami 2\u003e/dev/null )\" -- \"${1:-$cur}\" ));\r\n    fi\r\n}\r\n_apache2_modsites () \r\n{ \r\n    COMPREPLY=($( compgen -W '$( command ls /etc/apache2/$1 2\u003e/dev/null \\\r\n               | sed -e 's/[.]load$//' -e 's/[.]conf$//' )' -- $cur  ))\r\n}\r\n_apt_file () \r\n{ \r\n    local cur prev;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    case \"$prev\" in \r\n        list | show)\r\n            COMPREPLY=($( apt-cache pkgnames $cur 2\u003e /dev/null ));\r\n            return 0\r\n        ;;\r\n        search | find)\r\n            _filedir;\r\n            return 0\r\n        ;;\r\n    esac;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        COMPREPLY=($( compgen -W '-c -v -V -a -s -l -F -y -H -N -d \\\r\n\t\t\t\t--cache --verbose --version --architecture \\\r\n\t\t\t\t--sources-list --package-only --fixed-string \\\r\n\t\t\t\t--architecture --cdrom-mount --non-interactive \\\r\n\t\t\t\t--dummy --help' -- $cur ));\r\n    else\r\n        COMPREPLY=($( compgen -W 'update search list find \\\r\n\t                        show purge' -- $cur ));\r\n    fi;\r\n    return 0\r\n}\r\n_available_interfaces"
    ],
    [
      0.000013,
      " () \r\n{ \r\n    local cmd;\r\n    if [[ ${1:-} == -w ]]; then\r\n        cmd=\"iwconfig\";\r\n    else\r\n        if [[ ${1:-} == -a ]]; then\r\n            cmd=\"ifconfig\";\r\n        else\r\n            cmd=\"ifconfig -a\";\r\n        fi;\r\n    fi;\r\n    COMPREPLY=($( eval PATH=\"$PATH:/sbin\" $cmd 2\u003e/dev/null |         awk '/^[^ \\t]/ { print $1 }' ));\r\n    COMPREPLY=($( compgen -W '${COMPREPLY[@]/%[[:punct:]]/}' -- \"$cur\" ))\r\n}\r\n_axi_cache () \r\n{ \r\n    local cur prev cmd;\r\n    COMPREPLY=();\r\n    COMP_WORDBREAKS=${COMP_WORDBREAKS//:};\r\n    type _get_comp_words_by_ref \u0026\u003e/dev/null \u0026\u0026 { \r\n        _get_comp_words_by_ref -n: cur prev\r\n    } || { \r\n        cur=$(_get_cword \":\");\r\n        prev=${COMP_WORDS[$COMP_CWORD-1]}\r\n    };\r\n    cmd=${COMP_WORDS[1]};\r\n    case \"$prev\" in \r\n        *axi-cache*)\r\n            COMPREPLY=($(compgen -W \"help more search show again showpkg showsrc depends rdepends policy madison\" -- \"$cur\"));\r\n            return 0\r\n        ;;\r\n        --sort)\r\n            COMPREPLY=($(compgen -W \"$(egrep ^[a-z] /var/lib/apt-xapian-index/values | awk -F\"\\t\" '{print $1}')\" -- \"$cur\"));\r\n            return 0\r\n        ;;\r\n    esac;\r\n    case \"$cmd\" in \r\n        search | again)\r\n            if [[ \"$cur\" == -* ]]; then\r\n                COMPREPLY=($(compgen -W \"--sort --tags\" -- \"$cur\"));\r\n                return 0;\r\n            fi\r\n        ;;\r\n        show | showpkg | showsrc | depends | rdepends | policy | madison)\r\n            if [[ \"$cur\" == -* ]]; then\r\n                COMPREPLY=($(compgen -W \"--last\" -- \"$cur\"));\r\n                return 0;\r\n            fi\r\n        ;;\r\n        *)\r\n            return 0\r\n        ;;\r\n    esac;\r\n    if [ -n \"$cur\" ]; then\r\n        COMPREPLY=($(compgen -W \"$(${COMP_WORDS[@]} --tabcomplete=partial)\" -- \"$cur\"));\r\n    else\r\n        COMPREPLY=($(compgen -W \"$(${COMP_WORDS[@]} --tabcomplete=plain)\" -- \"$cur\"));\r\n    fi;\r\n    return 0\r\n}\r\n_cd () \r\n{ \r\n    local cur prev words cword;\r\n    _init_completion || return;\r\n    local IFS='\r\n' i j k;\r\n    compopt -o filenames;\r\n    if [[ -z \"${CDPATH:-}\" || \"$cur\" == ?(.)?(.)/* ]]; then\r\n        _filedir -d;\r\n        return 0;\r\n    fi;\r\n    local -r mark_dirs=$(_rl_enabled mark-directories \u0026\u0026 echo y);\r\n    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories \u0026\u0026 echo y);\r\n    for i in ${CDPATH//:/'\r\n'};\r\n    do\r\n        k=\"${#COMPREPLY[@]}\";\r\n        for j in $( compgen -d $i/$cur );\r\n        do\r\n            if [[ ( -n $mark_symdirs \u0026\u0026 -h $j || -n $mark_dirs \u0026\u0026 ! -h $j ) \u0026\u0026 ! -d ${j#$i/} ]]; then\r\n                j+=\"/\";\r\n            fi;\r\n            COMPREPLY[k++]=${j#$i/};\r\n        done;\r\n    done;\r\n    _filedir -d;\r\n    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then\r\n        i=${COMPREPLY[0]};\r\n        if [[ \"$i\" == \"$cur\" \u0026\u0026 $i != \"*/\" ]]; then\r\n            COMPREPLY[0]=\"${i}/\";\r\n        fi;\r\n    fi;\r\n    return 0\r\n}\r\n_cd_devices () \r\n{ \r\n    COMPREPLY+=($( compgen -f -d -X \"!*/?([amrs])cd*\" -- \"${cur:-/dev/}\" ))\r\n}\r\n_colormgr () \r\n{ \r\n    local i c=1 command;\r\n    while [ $c -lt $COMP_CWORD ]; do\r\n        i=\"${COMP_WORDS[c]}\";\r\n        case \"$i\" in \r\n            --help | --verbose | -v | -h | -?)\r\n\r\n            ;;\r\n            *)\r\n                command=\"$i\";\r\n                break\r\n            ;;\r\n        esac;\r\n        c=$((++c));\r\n    done;\r\n    if [ $c -eq $COMP_CWORD -a -z \"$command\" ]; then\r\n        case \"${COMP_WORDS[COMP_CWORD]}\" in \r\n            --*=*)\r\n                COMPREPLY=()\r\n            ;;\r\n            --*)\r\n                __colormgrcomp \"\r\n\t\t\t--verbose\r\n\t\t\t--help\r\n\t\t\t\"\r\n            ;;\r\n            -*)\r\n                __colormgrcomp \"\r\n            -v\r\n            -h\r\n            -?\r\n            \"\r\n            ;;\r\n            *)\r\n                __colormgrcomp \"$__colormgr_commandlist\"\r\n            ;;\r\n        esac;\r\n        return;\r\n    fi;\r\n    case \"$command\" in \r\n        *)\r\n            COMPREPLY=()\r\n        ;;\r\n    esac\r\n}\r\n_command () \r\n{ \r\n    local offset i;\r\n    offset=1;\r\n    for ((i=1; i \u003c= COMP_CWORD; i++ ))\r\n    do\r\n        if [[ \"${COMP_WORDS[i]}\" != -* ]]; then\r\n            offset=$i;\r\n            break;\r\n        fi;\r\n    done;\r\n    _c"
    ],
    [
      0.000026,
      "ommand_offset $offset\r\n}\r\n_command_offset () \r\n{ \r\n    local word_offset=$1 i j;\r\n    for ((i=0; i \u003c $word_offset; i++ ))\r\n    do\r\n        for ((j=0; j \u003c= ${#COMP_LINE}; j++ ))\r\n        do\r\n            [[ \"$COMP_LINE\" == \"${COMP_WORDS[i]}\"* ]] \u0026\u0026 break;\r\n            COMP_LINE=${COMP_LINE:1};\r\n            ((COMP_POINT--));\r\n        done;\r\n        COMP_LINE=${COMP_LINE#\"${COMP_WORDS[i]}\"};\r\n        ((COMP_POINT-=${#COMP_WORDS[i]}));\r\n    done;\r\n    for ((i=0; i \u003c= COMP_CWORD - $word_offset; i++ ))\r\n    do\r\n        COMP_WORDS[i]=${COMP_WORDS[i+$word_offset]};\r\n    done;\r\n    for ((i; i \u003c= COMP_CWORD; i++ ))\r\n    do\r\n        unset COMP_WORDS[i];\r\n    done;\r\n    ((COMP_CWORD -= $word_offset));\r\n    COMPREPLY=();\r\n    local cur;\r\n    _get_comp_words_by_ref cur;\r\n    if [[ $COMP_CWORD -eq 0 ]]; then\r\n        local IFS='\r\n';\r\n        compopt -o filenames;\r\n        COMPREPLY=($( compgen -d -c -- \"$cur\" ));\r\n    else\r\n        local cmd=${COMP_WORDS[0]} compcmd=${COMP_WORDS[0]};\r\n        local cspec=$( complete -p $cmd 2\u003e/dev/null );\r\n        if [[ ! -n $cspec \u0026\u0026 $cmd == */* ]]; then\r\n            cspec=$( complete -p ${cmd##*/} 2\u003e/dev/null );\r\n            [[ -n $cspec ]] \u0026\u0026 compcmd=${cmd##*/};\r\n        fi;\r\n        if [[ ! -n $cspec ]]; then\r\n            compcmd=${cmd##*/};\r\n            _completion_loader $compcmd;\r\n            cspec=$( complete -p $compcmd 2\u003e/dev/null );\r\n        fi;\r\n        if [[ -n $cspec ]]; then\r\n            if [[ ${cspec#* -F } != $cspec ]]; then\r\n                local func=${cspec#*-F };\r\n                func=${func%% *};\r\n                if [[ ${#COMP_WORDS[@]} -ge 2 ]]; then\r\n                    $func $cmd \"${COMP_WORDS[${#COMP_WORDS[@]}-1]}\" \"${COMP_WORDS[${#COMP_WORDS[@]}-2]}\";\r\n                else\r\n                    $func $cmd \"${COMP_WORDS[${#COMP_WORDS[@]}-1]}\";\r\n                fi;\r\n                local opt t;\r\n                while true; do\r\n                    t=${cspec#*-o };\r\n                    if [[ $t == $cspec ]]; then\r\n                        break;\r\n                    fi;\r\n                    opt=${t%% *};\r\n                    compopt -o $opt;\r\n                    cspec=${t#$opt};\r\n                done;\r\n            else\r\n                cspec=${cspec#complete};\r\n                cspec=${cspec%%$compcmd};\r\n                COMPREPLY=($( eval compgen \"$cspec\" -- '$cur' ));\r\n            fi;\r\n        else\r\n            if [[ ${#COMPREPLY[@]} -eq 0 ]]; then\r\n                _minimal;\r\n            fi;\r\n        fi;\r\n    fi\r\n}\r\n_complete_as_root () \r\n{ \r\n    [[ $EUID -eq 0 || -n ${root_command:-} ]]\r\n}\r\n_completion_loader () \r\n{ \r\n    local compdir=./completions;\r\n    [[ $BASH_SOURCE == */* ]] \u0026\u0026 compdir=\"${BASH_SOURCE%/*}/completions\";\r\n    . \"$compdir/${1##*/}\" \u0026\u003e/dev/null \u0026\u0026 return 124;\r\n    complete -F _minimal \"$1\" \u0026\u0026 return 124\r\n}\r\n_configured_interfaces () \r\n{ \r\n    if [[ -f /etc/debian_version ]]; then\r\n        COMPREPLY=($( compgen -W \"$( sed -ne 's|^iface \\([^ ]\\{1,\\}\\).*$|\\1|p'            /etc/network/interfaces )\" -- \"$cur\" ));\r\n    else\r\n        if [[ -f /etc/SuSE-release ]]; then\r\n            COMPREPLY=($( compgen -W \"$( printf '%s\\n'             /etc/sysconfig/network/ifcfg-* |             sed -ne 's|.*ifcfg-\\(.*\\)|\\1|p' )\" -- \"$cur\" ));\r\n        else\r\n            if [[ -f /etc/pld-release ]]; then\r\n                COMPREPLY=($( compgen -W \"$( command ls -B             /etc/sysconfig/interfaces |             sed -ne 's|.*ifcfg-\\(.*\\)|\\1|p' )\" -- \"$cur\" ));\r\n            else\r\n                COMPREPLY=($( compgen -W \"$( printf '%s\\n'             /etc/sysconfig/network-scripts/ifcfg-* |             sed -ne 's|.*ifcfg-\\(.*\\)|\\1|p' )\" -- \"$cur\" ));\r\n            fi;\r\n        fi;\r\n    fi\r\n}\r\n_count_args () \r\n{ \r\n    local i cword words;\r\n    __reassemble_comp_words_by_ref \"$1\" words cword;\r\n    args=1;\r\n    for i in \"${words[@]:1:cword-1}\";\r\n    do\r\n        [[ \"$i\" != -* ]] \u0026\u0026 args=$(($args+1));\r\n    done\r\n}\r\n_cryptdisks () \r\n{ \r\n    local tf;\r\n    tf=${TABFILE-\"/etc/crypttab\"};\r\n    COMPREPLY=($(egrep -v \"^[[:space:]]*(#|$)\" \"${tf}\" | egrep -o \"^${COMP_WORDS[COMP_CWORD]}[^[:space:]]*"
    ],
    [
      0.000012,
      "\"));\r\n    return 0\r\n}\r\n_debconf_show () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    COMPREPLY=($( compgen -W '--listowners --listdbs --db=' -- $cur ) $( apt-cache pkgnames -- $cur ))\r\n}\r\n_debtags () \r\n{ \r\n    local cur prev options;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    options='cat check diff dumpavail grep help \\\r\n\t\tmkpatch search \\\r\n\t\tshow submit tag tagcat tagsearch \\\r\n\t\ttagshow update vocfilter';\r\n    for ((i=0; i \u003c ${#COMP_WORDS[@]}-1; i++ ))\r\n    do\r\n        case ${COMP_WORDS[i]} in \r\n            check | mkpatch | diff | submit)\r\n                _filedir;\r\n                return 0\r\n            ;;\r\n            tag)\r\n                case $prev in \r\n                    add | rm | ls)\r\n                        COMPREPLY=($( apt-cache pkgnames $cur 2\u003e /dev/null ));\r\n                        return 0\r\n                    ;;\r\n                    tag)\r\n                        tag_cmds='add rm ls';\r\n                        COMPREPLY=($( compgen -W \"$tag_cmds\" -- $cur ));\r\n                        return 0\r\n                    ;;\r\n                    *)\r\n                        if [[ -n \"${COMP_WORDS[COMP_CWORD-2]}\" ]]; then\r\n                            case ${COMP_WORDS[COMP_CWORD-2]} in \r\n                                add | rm)\r\n                                    COMPREPLY=($( grep \"^Tag: $cur\" /var/lib/debtags/vocabulary |cut -b 6- ));\r\n                                    return 0\r\n                                ;;\r\n                                *)\r\n                                    return 0\r\n                                ;;\r\n                            esac;\r\n                        fi;\r\n                        return 0\r\n                    ;;\r\n                esac\r\n            ;;\r\n            show)\r\n                COMPREPLY=($( apt-cache pkgnames $cur 2\u003e /dev/null ));\r\n                return 0\r\n            ;;\r\n            tagshow)\r\n                if [[ \"$prev\" == \"grep\" \u0026\u0026 \"$cur\" == -* ]]; then\r\n                    COMPREPLY=($( compgen -W '--invert-match --quiet' -- $cur ));\r\n                    return 0;\r\n                fi;\r\n                COMPREPLY=($( grep \"^Tag: $cur\" /var/lib/debtags/vocabulary |cut -b 6- ));\r\n                return 0\r\n            ;;\r\n            grep | search)\r\n                if [[ \"$prev\" == \"grep\" \u0026\u0026 \"$cur\" == -* ]]; then\r\n                    COMPREPLY=($( compgen -W '--invert-match --quiet' -- $cur ));\r\n                    return 0;\r\n                fi;\r\n                COMPREPLY=($( grep \"^Tag: $cur\" /var/lib/debtags/vocabulary |cut -b 6- ));\r\n                return 0\r\n            ;;\r\n            cat)\r\n                COMPREPLY=($( compgen -W \"--group-items\" -- $cur ));\r\n                return 0\r\n            ;;\r\n            *)\r\n\r\n            ;;\r\n        esac;\r\n    done;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        options='--verbose --debug -V --version -? --help';\r\n        COMPREPLY=($( compgen -W \"$options\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ \"$COMP_CWORD\" == 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"$options\" -- $cur ));\r\n        return 0;\r\n    fi\r\n}\r\n_desktop_file_validate () \r\n{ \r\n    COMPRELY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    _filedir '@(desktop)'\r\n}\r\n_dkms () \r\n{ \r\n    local cur prev command module i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    if [[ $COMP_CWORD -eq 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"add autoinstall remove build install uninstall \t\t\tmatch mkdriverdisk mktarball ldtarball mkrpm mkdeb mkdsc mkkmp \t\t\tstatus\" -- $cur ));\r\n    else\r\n        prev=${COMP_WORDS[COMP_CWORD-1]};\r\n        command=${COMP_WORDS[1]};\r\n        case $prev in \r\n            -m)\r\n                if [ \"$command\" = 'add' ]; then\r\n                    _filename_parts '.*-.*' 1;\r\n                else\r\n                    _subdirectories /var/lib/dkms;\r\n                fi;\r\n                return 0\r\n            ;;\r\n            -v)\r\n                for ((i=1; i \u003c COMP_CWORD; i++ ))\r\n                do\r\n                    if [[ \"${COMP_WORDS[i]}\" ="
    ],
    [
      0.000022,
      "= -m ]]; then\r\n                        module=${COMP_WORDS[i+1]};\r\n                        break;\r\n                    fi;\r\n                done;\r\n                if [ -n \"$module\" ]; then\r\n                    if [ \"$command\" = 'add' ]; then\r\n                        _filename_parts \"$module-.*\" 2;\r\n                    else\r\n                        _subdirectories /var/lib/dkms/$module;\r\n                    fi;\r\n                    return 0;\r\n                fi\r\n            ;;\r\n            -k)\r\n                _kernels;\r\n                return 0\r\n            ;;\r\n            -@\\(c | -spec | -archive | -config\\))\r\n                _filedir;\r\n                return 0\r\n            ;;\r\n            --kernelsourcedir)\r\n                _filedir -d;\r\n                return 0\r\n            ;;\r\n        esac;\r\n        if [[ \"$cur\" == -* ]]; then\r\n            case $command in \r\n                add)\r\n                    options='-c --rpm_safe_upgrade'\r\n                ;;\r\n                remove)\r\n                    options='--rpm_safe_upgrade'\r\n                ;;\r\n                build)\r\n                    options='--config'\r\n                ;;\r\n                mkdriverdisk)\r\n                    options='-d --distro -r --release --size'\r\n                ;;\r\n                ldtarball)\r\n                    options='--archive --force'\r\n                ;;\r\n                mktarball)\r\n                    options='--source-only --binaries-only'\r\n                ;;\r\n                mkrpm)\r\n                    options='--source-only'\r\n                ;;\r\n                mkkmp)\r\n                    options='--spec'\r\n                ;;\r\n                match)\r\n                    options='--templatekernel'\r\n                ;;\r\n            esac;\r\n            options=\"$options -m -v -k -a --arch -q --quiet -V \t\t\t\t--version --all --no-prepare-kernel \t\t\t\t--no-clean-kernel --kernelsourcedir \t\t\t\t--directive\";\r\n            COMPREPLY=($( compgen -W \"$options\" -- $cur ));\r\n        fi;\r\n    fi\r\n}\r\n_dvd_devices () \r\n{ \r\n    COMPREPLY+=($( compgen -f -d -X \"!*/?(r)dvd*\" -- \"${cur:-/dev/}\" ))\r\n}\r\n_expand () \r\n{ \r\n    if [[ \"$cur\" == \\~*/* ]]; then\r\n        eval cur=$cur 2\u003e /dev/null;\r\n    else\r\n        if [[ \"$cur\" == \\~* ]]; then\r\n            cur=${cur#\\~};\r\n            COMPREPLY=($( compgen -P '~' -u \"$cur\" ));\r\n            [[ ${#COMPREPLY[@]} -eq 1 ]] \u0026\u0026 eval COMPREPLY[0]=${COMPREPLY[0]};\r\n            return ${#COMPREPLY[@]};\r\n        fi;\r\n    fi\r\n}\r\n_filedir () \r\n{ \r\n    local i IFS='\r\n' xspec;\r\n    _tilde \"$cur\" || return 0;\r\n    local -a toks;\r\n    local quoted x tmp;\r\n    _quote_readline_by_ref \"$cur\" quoted;\r\n    x=$( compgen -d -- \"$quoted\" ) \u0026\u0026 while read -r tmp; do\r\n        toks+=(\"$tmp\");\r\n    done \u003c\u003c\u003c \"$x\";\r\n    if [[ \"$1\" != -d ]]; then\r\n        xspec=${1:+\"!*.@($1|${1^^})\"};\r\n        x=$( compgen -f -X \"$xspec\" -- $quoted ) \u0026\u0026 while read -r tmp; do\r\n            toks+=(\"$tmp\");\r\n        done \u003c\u003c\u003c \"$x\";\r\n    fi;\r\n    [[ -n ${COMP_FILEDIR_FALLBACK:-} \u0026\u0026 -n \"$1\" \u0026\u0026 \"$1\" != -d \u0026\u0026 ${#toks[@]} -lt 1 ]] \u0026\u0026 x=$( compgen -f -- $quoted ) \u0026\u0026 while read -r tmp; do\r\n        toks+=(\"$tmp\");\r\n    done \u003c\u003c\u003c \"$x\";\r\n    if [[ ${#toks[@]} -ne 0 ]]; then\r\n        compopt -o filenames 2\u003e /dev/null;\r\n        COMPREPLY+=(\"${toks[@]}\");\r\n    fi\r\n}\r\n_filedir_xspec () \r\n{ \r\n    local cur prev words cword;\r\n    _init_completion || return;\r\n    _expand || return 0;\r\n    local IFS='\r\n' xspec=${_xspecs[${1##*/}]} tmp;\r\n    local -a toks;\r\n    toks=($(\r\n        compgen -d -- \"$(quote_readline \"$cur\")\" | {\r\n        while read -r tmp; do\r\n            printf '%s\\n' $tmp\r\n        done\r\n        }\r\n        ));\r\n    eval xspec=\"${xspec}\";\r\n    local matchop=!;\r\n    if [[ $xspec == !* ]]; then\r\n        xspec=${xspec#!};\r\n        matchop=@;\r\n    fi;\r\n    xspec=\"$matchop($xspec|${xspec^^})\";\r\n    toks+=($(\r\n        eval compgen -f -X \"!$xspec\" -- \"\\$(quote_readline \"\\$cur\")\" | {\r\n        while read -r tmp; do\r\n            [[ -n $tmp ]] \u0026\u0026 printf '%s\\n' $tmp\r\n        done\r\n        }\r\n        ));\r\n    if [[ ${#toks[@]} -ne 0 ]]; then\r\n        compopt -o filenames;\r\n        COMPREPLY=(\"${"
    ],
    [
      0.000013,
      "toks[@]}\");\r\n    fi\r\n}\r\n_filename_parts () \r\n{ \r\n    COMPREPLY=($( command ls -F /usr/src/ 2\u003e/dev/null | grep -E '^'$1'/$' \t\t| sed -r -e 's/^([^-]+)-(.+)\\/$/\\'$2'/' | grep \"^$cur\" ))\r\n}\r\n_fstypes () \r\n{ \r\n    local fss;\r\n    if [[ -e /proc/filesystems ]]; then\r\n        fss=\"$( cut -d'\t' -f2 /proc/filesystems )\r\n             $( awk '! /\\*/ { print $NF }' /etc/filesystems 2\u003e/dev/null )\";\r\n    else\r\n        fss=\"$( awk '/^[ \\t]*[^#]/ { print $3 }' /etc/fstab 2\u003e/dev/null )\r\n             $( awk '/^[ \\t]*[^#]/ { print $3 }' /etc/mnttab 2\u003e/dev/null )\r\n             $( awk '/^[ \\t]*[^#]/ { print $4 }' /etc/vfstab 2\u003e/dev/null )\r\n             $( awk '{ print $1 }' /etc/dfs/fstypes 2\u003e/dev/null )\r\n             $( [[ -d /etc/fs ]] \u0026\u0026 command ls /etc/fs )\";\r\n    fi;\r\n    [[ -n $fss ]] \u0026\u0026 COMPREPLY+=($( compgen -W \"$fss\" -- \"$cur\" ))\r\n}\r\n_gem18 () \r\n{ \r\n    local cur prev completions;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    COMMANDS='build cert check cleanup contents dependency\\\r\n      environment fetch generate_index help install list\\\r\n      lock mirror outdated pristine query rdoc search server\\\r\n      sources specification uninstall unpack update which';\r\n    GEM_OPTIONS='\\\r\n      -h --help\\\r\n      -v --version';\r\n    COMMON_OPTIONS='\\\r\n      -h --help\\\r\n      -V --verbose --no-verbose\\\r\n      -q --quiet\\\r\n      --config-file\\\r\n      --backtrace\\\r\n      --debug';\r\n    CERT_OPTIONS='\\\r\n      -a -add\\\r\n      -l --list\\\r\n      -r --remove\\\r\n      -b --build\\\r\n      -C --certificate\\\r\n      -K --private-key\\\r\n      -s --sign';\r\n    CHECK_OPTIONS='\\\r\n      --verify\\\r\n      -a --alien\\\r\n      -t --test\\\r\n      -v --version';\r\n    CLEANUP_OPTIONS='\\\r\n      -d --dry-run';\r\n    CONTENTS_OPTIONS='\\\r\n      -v --version\\\r\n      -s --spec-dir\\\r\n      -l --lib-only --no-lib-only';\r\n    DEPENDENCY_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      -R --reverse-dependencies --no-reverse-dependencies\\\r\n      -p --pipe';\r\n    ENVIRONMENT_OPTIONS='';\r\n    FETCH_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      -B --bulk-threshold\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      --source';\r\n    GENERATE_INDEX_OPTIONS='\\\r\n      -d --directory';\r\n    HELP_OPTIONS=$COMMANDS;\r\n    INSTALL_OPTIONS='\\\r\n      --platform\\\r\n      -v --version\\\r\n      -i --install-dir\\\r\n      -d --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -E --env-shebang\\\r\n      -f --force --no-force\\\r\n      -t --test --no-test\\\r\n      -w --wrappers --no-wrappers\\\r\n      -P --trust-policy\\\r\n      --ignore-dependencies\\\r\n      -y --include-dependencies\\\r\n      --format-executable --no-format-executable\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    LIST_OPTIONS='\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    LOCK_OPTIONS='\\\r\n      -s --strict --no-strict';\r\n    MIRROR_OPTIONS='';\r\n    OUTDATED_OPTIONS='\\\r\n      --platform';\r\n    PRISTINE_OPTIONS='\\\r\n      --all\\\r\n      -v --version';\r\n    QUERY_OPTIONS='\\\r\n      -n --name-matches\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    RDOC_OPTIONS='\\\r\n      --all\\\r\n      --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -v --version';\r\n    SEARCH_OPTIONS='\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    SERVER_OPTIONS='\\\r\n      -p --port\\\r\n      -d --dir\\\r\n      --daemon --no-daemon';\r\n    SOURCES_"
    ],
    [
      0.000022,
      "OPTIONS='\\\r\n      -a --add\\\r\n      -l --list\\\r\n      -r --remove\\\r\n      -u --update\\\r\n      -c --clear-all';\r\n    SPECIFICATION_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      --all\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    UNINSTALL_OPTIONS='\\\r\n      -a --all --no-all\\\r\n      -i --ignore-dependencies --no-ignore-dependencies\\\r\n      -x --executables --no-executables\\\r\n      -v --version\\\r\n      --platform';\r\n    UNPACK_OPTIONS='\\\r\n      --target\\\r\n      -v --version';\r\n    UPDATE_OPTIONS='\\\r\n      --system\\\r\n      --platform\\\r\n      -i --install-dir\\\r\n      -d --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -E --env-shebang\\\r\n      -f --force --no-force\\\r\n      -t --test --no-test\\\r\n      -w --wrappers --no-wrappers\\\r\n      -P --trust-policy\\\r\n      --ignore-dependencies\\\r\n      -y --include-dependencies\\\r\n      --format-executable --no-format-executable\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    WHICH_OPTIONS='\\\r\n      -a --all --no-all\\\r\n      -g --gems-first --no-gems-first';\r\n    case \"${prev}\" in \r\n        build)\r\n            completions=\"$COMMON_OPTIONS $BUILD_OPTIONS\"\r\n        ;;\r\n        cert)\r\n            completions=\"$COMMON_OPTIONS $CERT_OPTIONS\"\r\n        ;;\r\n        check)\r\n            completions=\"$COMMON_OPTIONS $CHECK_OPTIONS\"\r\n        ;;\r\n        cleanup)\r\n            completions=\"$COMMON_OPTIONS $CLEANUP_OPTIONS\"\r\n        ;;\r\n        contents)\r\n            completions=\"$COMMON_OPTIONS $CONTENTS_OPTIONS\"\r\n        ;;\r\n        dependency)\r\n            completions=\"$COMMON_OPTIONS $DEPENDENCY_OPTIONS\"\r\n        ;;\r\n        environment)\r\n            completions=\"$COMMON_OPTIONS $ENVIRONMENT_OPTIONS\"\r\n        ;;\r\n        fetch)\r\n            completions=\"$COMMON_OPTIONS $FETCH_OPTIONS\"\r\n        ;;\r\n        generate_index)\r\n            completions=\"$COMMON_OPTIONS $GENERATE_INDEX_OPTIONS\"\r\n        ;;\r\n        help)\r\n            completions=\"$COMMON_OPTIONS $HELP_OPTIONS\"\r\n        ;;\r\n        install)\r\n            completions=\"$COMMON_OPTIONS $INSTALL_OPTIONS\"\r\n        ;;\r\n        list)\r\n            completions=\"$COMMON_OPTIONS $LIST_OPTIONS\"\r\n        ;;\r\n        lock)\r\n            completions=\"$COMMON_OPTIONS $LOCK_OPTIONS\"\r\n        ;;\r\n        mirror)\r\n            completions=\"$COMMON_OPTIONS $MIRROR_OPTIONS\"\r\n        ;;\r\n        outdated)\r\n            completions=\"$COMMON_OPTIONS $OUTDATED_OPTIONS\"\r\n        ;;\r\n        pristine)\r\n            completions=\"$COMMON_OPTIONS $PRISTINE_OPTIONS\"\r\n        ;;\r\n        query)\r\n            completions=\"$COMMON_OPTIONS $QUERY_OPTIONS\"\r\n        ;;\r\n        rdoc)\r\n            completions=\"$COMMON_OPTIONS $RDOC_OPTIONS\"\r\n        ;;\r\n        search)\r\n            completions=\"$COMMON_OPTIONS $SEARCH_OPTIONS\"\r\n        ;;\r\n        server)\r\n            completions=\"$COMMON_OPTIONS $SERVER_OPTIONS\"\r\n        ;;\r\n        sources)\r\n            completions=\"$COMMON_OPTIONS $SOURCES_OPTIONS\"\r\n        ;;\r\n        specification)\r\n            completions=\"$COMMON_OPTIONS $SPECIFICATION_OPTIONS\"\r\n        ;;\r\n        uninstall)\r\n            completions=\"$COMMON_OPTIONS $UNINSTALL_OPTIONS\"\r\n        ;;\r\n        unpack)\r\n            completions=\"$COMMON_OPTIONS $UNPACK_OPTIONS\"\r\n        ;;\r\n        update)\r\n            completions=\"$COMMON_OPTIONS $UPDATE_OPTIONS\"\r\n        ;;\r\n        which)\r\n            completions=\"$COMMON_OPTIONS $WHICH_OPTIONS\"\r\n        ;;\r\n        *)\r\n            completions=\"$COMMANDS $GEM_OPTIONS\"\r\n        ;;\r\n    esac;\r\n    COMPREPLY=($( compgen -W \"$completions\" -- $cur ));\r\n    return 0\r\n}\r\n_gem191 () \r\n{ \r\n    local cur prev completions;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    COMMANDS='build cert check cleanup contents dependency\\\r\n      environment fetch generate_index help install list\\\r\n    "
    ],
    [
      0.000010,
      "  lock mirror outdated pristine query rdoc search server\\\r\n      sources specification uninstall unpack update which';\r\n    GEM_OPTIONS='\\\r\n      -h --help\\\r\n      -v --version';\r\n    COMMON_OPTIONS='\\\r\n      -h --help\\\r\n      -V --verbose --no-verbose\\\r\n      -q --quiet\\\r\n      --config-file\\\r\n      --backtrace\\\r\n      --debug';\r\n    CERT_OPTIONS='\\\r\n      -a -add\\\r\n      -l --list\\\r\n      -r --remove\\\r\n      -b --build\\\r\n      -C --certificate\\\r\n      -K --private-key\\\r\n      -s --sign';\r\n    CHECK_OPTIONS='\\\r\n      --verify\\\r\n      -a --alien\\\r\n      -t --test\\\r\n      -v --version';\r\n    CLEANUP_OPTIONS='\\\r\n      -d --dry-run';\r\n    CONTENTS_OPTIONS='\\\r\n      -v --version\\\r\n      -s --spec-dir\\\r\n      -l --lib-only --no-lib-only';\r\n    DEPENDENCY_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      -R --reverse-dependencies --no-reverse-dependencies\\\r\n      -p --pipe';\r\n    ENVIRONMENT_OPTIONS='';\r\n    FETCH_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      -B --bulk-threshold\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      --source';\r\n    GENERATE_INDEX_OPTIONS='\\\r\n      -d --directory';\r\n    HELP_OPTIONS=$COMMANDS;\r\n    INSTALL_OPTIONS='\\\r\n      --platform\\\r\n      -v --version\\\r\n      -i --install-dir\\\r\n      -d --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -E --env-shebang\\\r\n      -f --force --no-force\\\r\n      -t --test --no-test\\\r\n      -w --wrappers --no-wrappers\\\r\n      -P --trust-policy\\\r\n      --ignore-dependencies\\\r\n      -y --include-dependencies\\\r\n      --format-executable --no-format-executable\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    LIST_OPTIONS='\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    LOCK_OPTIONS='\\\r\n      -s --strict --no-strict';\r\n    MIRROR_OPTIONS='';\r\n    OUTDATED_OPTIONS='\\\r\n      --platform';\r\n    PRISTINE_OPTIONS='\\\r\n      --all\\\r\n      -v --version';\r\n    QUERY_OPTIONS='\\\r\n      -n --name-matches\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    RDOC_OPTIONS='\\\r\n      --all\\\r\n      --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -v --version';\r\n    SEARCH_OPTIONS='\\\r\n      -d --details --no-details\\\r\n      --versions --no-versions\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    SERVER_OPTIONS='\\\r\n      -p --port\\\r\n      -d --dir\\\r\n      --daemon --no-daemon';\r\n    SOURCES_OPTIONS='\\\r\n      -a --add\\\r\n      -l --list\\\r\n      -r --remove\\\r\n      -u --update\\\r\n      -c --clear-all';\r\n    SPECIFICATION_OPTIONS='\\\r\n      -v --version\\\r\n      --platform\\\r\n      --all\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B --bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    UNINSTALL_OPTIONS='\\\r\n      -a --all --no-all\\\r\n      -i --ignore-dependencies --no-ignore-dependencies\\\r\n      -x --executables --no-executables\\\r\n      -v --version\\\r\n      --platform';\r\n    UNPACK_OPTIONS='\\\r\n      --target\\\r\n      -v --version';\r\n    UPDATE_OPTIONS='\\\r\n      --system\\\r\n      --platform\\\r\n      -i --install-dir\\\r\n      -d --rdoc --no-rdoc\\\r\n      --ri --no-ri\\\r\n      -E --env-shebang\\\r\n      -f --force --no-force\\\r\n      -t --test --no-test\\\r\n      -w --wrappers --no-wrappers\\\r\n      -P --trust-policy\\\r\n      --ignore-dependencies\\\r\n      -y --include-dependencies\\\r\n      --format-executable --no-format-executable\\\r\n      -l --local\\\r\n      -r --remote\\\r\n      -b --both\\\r\n      -B -"
    ],
    [
      0.000021,
      "-bulk-threshold\\\r\n      --source\\\r\n      -p --http-proxy --no-http-proxy\\\r\n      -u --update-sources --no-update-sources';\r\n    WHICH_OPTIONS='\\\r\n      -a --all --no-all\\\r\n      -g --gems-first --no-gems-first';\r\n    case \"${prev}\" in \r\n        build)\r\n            completions=\"$COMMON_OPTIONS $BUILD_OPTIONS\"\r\n        ;;\r\n        cert)\r\n            completions=\"$COMMON_OPTIONS $CERT_OPTIONS\"\r\n        ;;\r\n        check)\r\n            completions=\"$COMMON_OPTIONS $CHECK_OPTIONS\"\r\n        ;;\r\n        cleanup)\r\n            completions=\"$COMMON_OPTIONS $CLEANUP_OPTIONS\"\r\n        ;;\r\n        contents)\r\n            completions=\"$COMMON_OPTIONS $CONTENTS_OPTIONS\"\r\n        ;;\r\n        dependency)\r\n            completions=\"$COMMON_OPTIONS $DEPENDENCY_OPTIONS\"\r\n        ;;\r\n        environment)\r\n            completions=\"$COMMON_OPTIONS $ENVIRONMENT_OPTIONS\"\r\n        ;;\r\n        fetch)\r\n            completions=\"$COMMON_OPTIONS $FETCH_OPTIONS\"\r\n        ;;\r\n        generate_index)\r\n            completions=\"$COMMON_OPTIONS $GENERATE_INDEX_OPTIONS\"\r\n        ;;\r\n        help)\r\n            completions=\"$COMMON_OPTIONS $HELP_OPTIONS\"\r\n        ;;\r\n        install)\r\n            completions=\"$COMMON_OPTIONS $INSTALL_OPTIONS\"\r\n        ;;\r\n        list)\r\n            completions=\"$COMMON_OPTIONS $LIST_OPTIONS\"\r\n        ;;\r\n        lock)\r\n            completions=\"$COMMON_OPTIONS $LOCK_OPTIONS\"\r\n        ;;\r\n        mirror)\r\n            completions=\"$COMMON_OPTIONS $MIRROR_OPTIONS\"\r\n        ;;\r\n        outdated)\r\n            completions=\"$COMMON_OPTIONS $OUTDATED_OPTIONS\"\r\n        ;;\r\n        pristine)\r\n            completions=\"$COMMON_OPTIONS $PRISTINE_OPTIONS\"\r\n        ;;\r\n        query)\r\n            completions=\"$COMMON_OPTIONS $QUERY_OPTIONS\"\r\n        ;;\r\n        rdoc)\r\n            completions=\"$COMMON_OPTIONS $RDOC_OPTIONS\"\r\n        ;;\r\n        search)\r\n            completions=\"$COMMON_OPTIONS $SEARCH_OPTIONS\"\r\n        ;;\r\n        server)\r\n            completions=\"$COMMON_OPTIONS $SERVER_OPTIONS\"\r\n        ;;\r\n        sources)\r\n            completions=\"$COMMON_OPTIONS $SOURCES_OPTIONS\"\r\n        ;;\r\n        specification)\r\n            completions=\"$COMMON_OPTIONS $SPECIFICATION_OPTIONS\"\r\n        ;;\r\n        uninstall)\r\n            completions=\"$COMMON_OPTIONS $UNINSTALL_OPTIONS\"\r\n        ;;\r\n        unpack)\r\n            completions=\"$COMMON_OPTIONS $UNPACK_OPTIONS\"\r\n        ;;\r\n        update)\r\n            completions=\"$COMMON_OPTIONS $UPDATE_OPTIONS\"\r\n        ;;\r\n        which)\r\n            completions=\"$COMMON_OPTIONS $WHICH_OPTIONS\"\r\n        ;;\r\n        *)\r\n            completions=\"$COMMANDS $GEM_OPTIONS\"\r\n        ;;\r\n    esac;\r\n    COMPREPLY=($( compgen -W \"$completions\" -- $cur ));\r\n    return 0\r\n}\r\n_get_comp_words_by_ref () \r\n{ \r\n    local exclude flag i OPTIND=1;\r\n    local cur cword words=();\r\n    local upargs=() upvars=() vcur vcword vprev vwords;\r\n    while getopts \"c:i:n:p:w:\" flag \"$@\"; do\r\n        case $flag in \r\n            c)\r\n                vcur=$OPTARG\r\n            ;;\r\n            i)\r\n                vcword=$OPTARG\r\n            ;;\r\n            n)\r\n                exclude=$OPTARG\r\n            ;;\r\n            p)\r\n                vprev=$OPTARG\r\n            ;;\r\n            w)\r\n                vwords=$OPTARG\r\n            ;;\r\n        esac;\r\n    done;\r\n    while [[ $# -ge $OPTIND ]]; do\r\n        case ${!OPTIND} in \r\n            cur)\r\n                vcur=cur\r\n            ;;\r\n            prev)\r\n                vprev=prev\r\n            ;;\r\n            cword)\r\n                vcword=cword\r\n            ;;\r\n            words)\r\n                vwords=words\r\n            ;;\r\n            *)\r\n                echo \"bash: $FUNCNAME(): \\`${!OPTIND}': unknown argument\" 1\u003e\u00262;\r\n                return 1\r\n            ;;\r\n        esac;\r\n        let \"OPTIND += 1\";\r\n    done;\r\n    __get_cword_at_cursor_by_ref \"$exclude\" words cword cur;\r\n    [[ -n $vcur ]] \u0026\u0026 { \r\n        upvars+=(\"$vcur\");\r\n        upargs+=(-v $vcur \"$cur\")\r\n    };\r\n    [[ -n $vcword ]] \u0026\u0026 { \r\n        upvars+=(\"$vcword\");\r\n        upargs+=(-v $vcword \"$cword\")\r\n    };\r\n    [[ -n $vprev \u0026\u0026 $c"
    ],
    [
      0.000012,
      "word -ge 1 ]] \u0026\u0026 { \r\n        upvars+=(\"$vprev\");\r\n        upargs+=(-v $vprev \"${words[cword - 1]}\")\r\n    };\r\n    [[ -n $vwords ]] \u0026\u0026 { \r\n        upvars+=(\"$vwords\");\r\n        upargs+=(-a${#words[@]} $vwords \"${words[@]}\")\r\n    };\r\n    (( ${#upvars[@]} )) \u0026\u0026 local \"${upvars[@]}\" \u0026\u0026 _upvars \"${upargs[@]}\"\r\n}\r\n_get_cword () \r\n{ \r\n    local LC_CTYPE=C;\r\n    local cword words;\r\n    __reassemble_comp_words_by_ref \"$1\" words cword;\r\n    if [[ -n ${2//[^0-9]/} ]]; then\r\n        printf \"%s\" \"${words[cword-$2]}\";\r\n    else\r\n        if [[ \"${#words[cword]}\" -eq 0 || \"$COMP_POINT\" == \"${#COMP_LINE}\" ]]; then\r\n            printf \"%s\" \"${words[cword]}\";\r\n        else\r\n            local i;\r\n            local cur=\"$COMP_LINE\";\r\n            local index=\"$COMP_POINT\";\r\n            for ((i = 0; i \u003c= cword; ++i ))\r\n            do\r\n                while [[ \"${#cur}\" -ge ${#words[i]} \u0026\u0026 \"${cur:0:${#words[i]}}\" != \"${words[i]}\" ]]; do\r\n                    cur=\"${cur:1}\";\r\n                    ((index--));\r\n                done;\r\n                if [[ \"$i\" -lt \"$cword\" ]]; then\r\n                    local old_size=\"${#cur}\";\r\n                    cur=\"${cur#${words[i]}}\";\r\n                    local new_size=\"${#cur}\";\r\n                    index=$(( index - old_size + new_size ));\r\n                fi;\r\n            done;\r\n            if [[ \"${words[cword]:0:${#cur}}\" != \"$cur\" ]]; then\r\n                printf \"%s\" \"${words[cword]}\";\r\n            else\r\n                printf \"%s\" \"${cur:0:$index}\";\r\n            fi;\r\n        fi;\r\n    fi\r\n}\r\n_get_first_arg () \r\n{ \r\n    local i;\r\n    arg=;\r\n    for ((i=1; i \u003c COMP_CWORD; i++ ))\r\n    do\r\n        if [[ \"${COMP_WORDS[i]}\" != -* ]]; then\r\n            arg=${COMP_WORDS[i]};\r\n            break;\r\n        fi;\r\n    done\r\n}\r\n_get_pword () \r\n{ \r\n    if [[ $COMP_CWORD -ge 1 ]]; then\r\n        _get_cword \"${@:-}\" 1;\r\n    fi\r\n}\r\n_gids () \r\n{ \r\n    if type getent \u0026\u003e/dev/null; then\r\n        COMPREPLY=($( compgen -W '$( getent group | cut -d: -f3 )'             -- \"$cur\" ));\r\n    else\r\n        if type perl \u0026\u003e/dev/null; then\r\n            COMPREPLY=($( compgen -W '$( perl -e '\"'\"'while (($gid) = (getgrent)[2]) { print $gid . \"\\n\" }'\"'\"' )' -- \"$cur\" ));\r\n        else\r\n            COMPREPLY=($( compgen -W '$( cut -d: -f3 /etc/group )' -- \"$cur\" ));\r\n        fi;\r\n    fi\r\n}\r\n_git () \r\n{ \r\n    local i c=1 command __git_dir;\r\n    if [[ -n ${ZSH_VERSION-} ]]; then\r\n        emulate -L bash;\r\n        setopt KSH_TYPESET;\r\n        typeset -h words;\r\n        typeset -h IFS;\r\n    fi;\r\n    local cur words cword prev;\r\n    _get_comp_words_by_ref -n =: cur words cword prev;\r\n    while [ $c -lt $cword ]; do\r\n        i=\"${words[c]}\";\r\n        case \"$i\" in \r\n            --git-dir=*)\r\n                __git_dir=\"${i#--git-dir=}\"\r\n            ;;\r\n            --bare)\r\n                __git_dir=\".\"\r\n            ;;\r\n            --version | -p | --paginate)\r\n\r\n            ;;\r\n            --help)\r\n                command=\"help\";\r\n                break\r\n            ;;\r\n            *)\r\n                command=\"$i\";\r\n                break\r\n            ;;\r\n        esac;\r\n        ((c++));\r\n    done;\r\n    if [ -z \"$command\" ]; then\r\n        case \"$cur\" in \r\n            --*)\r\n                __gitcomp \"\r\n\t\t\t--paginate\r\n\t\t\t--no-pager\r\n\t\t\t--git-dir=\r\n\t\t\t--bare\r\n\t\t\t--version\r\n\t\t\t--exec-path\r\n\t\t\t--html-path\r\n\t\t\t--work-tree=\r\n\t\t\t--namespace=\r\n\t\t\t--help\r\n\t\t\t\"\r\n            ;;\r\n            *)\r\n                __git_compute_porcelain_commands;\r\n                __gitcomp \"$__git_porcelain_commands $(__git_aliases)\"\r\n            ;;\r\n        esac;\r\n        return;\r\n    fi;\r\n    local completion_func=\"_git_${command//-/_}\";\r\n    declare -f $completion_func \u003e /dev/null \u0026\u0026 $completion_func \u0026\u0026 return;\r\n    local expansion=$(__git_aliased_command \"$command\");\r\n    if [ -n \"$expansion\" ]; then\r\n        completion_func=\"_git_${expansion//-/_}\";\r\n        declare -f $completion_func \u003e /dev/null \u0026\u0026 $completion_func;\r\n    fi\r\n}\r\n_git_add () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--interactive --refresh --patch -"
    ],
    [
      0.014855,
      "-update --dry-run\r\n\t\t\t--ignore-errors --intent-to-add\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_am () \r\n{ \r\n    local dir=\"$(__gitdir)\";\r\n    if [ -d \"$dir\"/rebase-apply ]; then\r\n        __gitcomp \"--skip --continue --resolved --abort\";\r\n        return;\r\n    fi;\r\n    case \"$cur\" in \r\n        --whitespace=*)\r\n            __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--3way --committer-date-is-author-date --ignore-date\r\n\t\t\t--ignore-whitespace --ignore-space-change\r\n\t\t\t--interactive --keep --no-utf8 --signoff --utf8\r\n\t\t\t--whitespace= --scissors\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_apply () \r\n{ \r\n    case \"$cur\" in \r\n        --whitespace=*)\r\n            __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--stat --numstat --summary --check --index\r\n\t\t\t--cached --index-info --reverse --reject --unidiff-zero\r\n\t\t\t--apply --no-add --exclude=\r\n\t\t\t--ignore-whitespace --ignore-space-change\r\n\t\t\t--whitespace= --inaccurate-eof --verbose\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_archive () \r\n{ \r\n    case \"$cur\" in \r\n        --format=*)\r\n            __gitcomp \"$(git archive --list)\" \"\" \"${cur##--format=}\";\r\n            return\r\n        ;;\r\n        --remote=*)\r\n            __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--remote=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--format= --list --verbose\r\n\t\t\t--prefix= --remote= --exec=\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_file\r\n}\r\n_git_bisect () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    local subcommands=\"start bad good skip reset visualize replay log run\";\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    if [ -z \"$subcommand\" ]; then\r\n        if [ -f \"$(__gitdir)\"/BISECT_START ]; then\r\n            __gitcomp \"$subcommands\";\r\n        else\r\n            __gitcomp \"replay start\";\r\n        fi;\r\n        return;\r\n    fi;\r\n    case \"$subcommand\" in \r\n        bad | good | reset | skip | start)\r\n            __gitcomp_nl \"$(__git_refs)\"\r\n        ;;\r\n        *)\r\n            COMPREPLY=()\r\n        ;;\r\n    esac\r\n}\r\n_git_branch () \r\n{ \r\n    local i c=1 only_local_ref=\"n\" has_r=\"n\";\r\n    while [ $c -lt $cword ]; do\r\n        i=\"${words[c]}\";\r\n        case \"$i\" in \r\n            -d | -m)\r\n                only_local_ref=\"y\"\r\n            ;;\r\n            -r)\r\n                has_r=\"y\"\r\n            ;;\r\n        esac;\r\n        ((c++));\r\n    done;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--color --no-color --verbose --abbrev= --no-abbrev\r\n\t\t\t--track --no-track --contains --merged --no-merged\r\n\t\t\t--set-upstream --edit-description --list\r\n\t\t\t\"\r\n        ;;\r\n        *)\r\n            if [ $only_local_ref = \"y\" -a $has_r = \"n\" ]; then\r\n                __gitcomp_nl \"$(__git_heads)\";\r\n            else\r\n                __gitcomp_nl \"$(__git_refs)\";\r\n            fi\r\n        ;;\r\n    esac\r\n}\r\n_git_bundle () \r\n{ \r\n    local cmd=\"${words[2]}\";\r\n    case \"$cword\" in \r\n        2)\r\n            __gitcomp \"create list-heads verify unbundle\"\r\n        ;;\r\n        3)\r\n\r\n        ;;\r\n        *)\r\n            case \"$cmd\" in \r\n                create)\r\n                    __git_complete_revlist\r\n                ;;\r\n            esac\r\n        ;;\r\n    esac\r\n}\r\n_git_checkout () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --conflict=*)\r\n            __gitcomp \"diff3 merge\" \"\" \"${cur##--conflict=}\"\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--quiet --ours --theirs --track --no-track --merge\r\n\t\t\t--conflict= --orphan --patch\r\n\t\t\t\"\r\n        ;;\r\n        *)\r\n            local flags=\"--track --no-track --no-guess\" track=1;\r\n            if [ -n \"$(__git_find_on_cmdline \"$flags\")\" ]; then\r\n                track='';\r\n            fi;\r\n            __gitcomp_nl \"$(__git_refs '' $track)\"\r\n        ;;\r\n    esac\r\n}\r\n_git_cherry () \r\n{ \r\n    _"
    ],
    [
      0.000020,
      "_gitcomp \"$(__git_refs)\"\r\n}\r\n_git_cherry_pick () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--edit --no-commit\"\r\n        ;;\r\n        *)\r\n            __gitcomp_nl \"$(__git_refs)\"\r\n        ;;\r\n    esac\r\n}\r\n_git_clean () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--dry-run --quiet\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_clone () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--local\r\n\t\t\t--no-hardlinks\r\n\t\t\t--shared\r\n\t\t\t--reference\r\n\t\t\t--quiet\r\n\t\t\t--no-checkout\r\n\t\t\t--bare\r\n\t\t\t--mirror\r\n\t\t\t--origin\r\n\t\t\t--upload-pack\r\n\t\t\t--template=\r\n\t\t\t--depth\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_commit () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --cleanup=*)\r\n            __gitcomp \"default strip verbatim whitespace\r\n\t\t\t\" \"\" \"${cur##--cleanup=}\";\r\n            return\r\n        ;;\r\n        --reuse-message=* | --reedit-message=* | --fixup=* | --squash=*)\r\n            __gitcomp_nl \"$(__git_refs)\" \"\" \"${cur#*=}\";\r\n            return\r\n        ;;\r\n        --untracked-files=*)\r\n            __gitcomp \"all no normal\" \"\" \"${cur##--untracked-files=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--all --author= --signoff --verify --no-verify\r\n\t\t\t--edit --amend --include --only --interactive\r\n\t\t\t--dry-run --reuse-message= --reedit-message=\r\n\t\t\t--reset-author --file= --message= --template=\r\n\t\t\t--cleanup= --untracked-files --untracked-files=\r\n\t\t\t--verbose --quiet --fixup= --squash=\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_config () \r\n{ \r\n    case \"$prev\" in \r\n        branch.*.remote)\r\n            __gitcomp_nl \"$(__git_remotes)\";\r\n            return\r\n        ;;\r\n        branch.*.merge)\r\n            __gitcomp_nl \"$(__git_refs)\";\r\n            return\r\n        ;;\r\n        remote.*.fetch)\r\n            local remote=\"${prev#remote.}\";\r\n            remote=\"${remote%.fetch}\";\r\n            if [ -z \"$cur\" ]; then\r\n                COMPREPLY=(\"refs/heads/\");\r\n                return;\r\n            fi;\r\n            __gitcomp_nl \"$(__git_refs_remotes \"$remote\")\";\r\n            return\r\n        ;;\r\n        remote.*.push)\r\n            local remote=\"${prev#remote.}\";\r\n            remote=\"${remote%.push}\";\r\n            __gitcomp_nl \"$(git --git-dir=\"$(__gitdir)\" \t\t\tfor-each-ref --format='%(refname):%(refname)' \t\t\trefs/heads)\";\r\n            return\r\n        ;;\r\n        pull.twohead | pull.octopus)\r\n            __git_compute_merge_strategies;\r\n            __gitcomp \"$__git_merge_strategies\";\r\n            return\r\n        ;;\r\n        color.branch | color.diff | color.interactive | color.showbranch | color.status | color.ui)\r\n            __gitcomp \"always never auto\";\r\n            return\r\n        ;;\r\n        color.pager)\r\n            __gitcomp \"false true\";\r\n            return\r\n        ;;\r\n        color.*.*)\r\n            __gitcomp \"\r\n\t\t\tnormal black red green yellow blue magenta cyan white\r\n\t\t\tbold dim ul blink reverse\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n        help.format)\r\n            __gitcomp \"man info web html\";\r\n            return\r\n        ;;\r\n        log.date)\r\n            __gitcomp \"$__git_log_date_formats\";\r\n            return\r\n        ;;\r\n        sendemail.aliasesfiletype)\r\n            __gitcomp \"mutt mailrc pine elm gnus\";\r\n            return\r\n        ;;\r\n        sendemail.confirm)\r\n            __gitcomp \"$__git_send_email_confirm_options\";\r\n            return\r\n        ;;\r\n        sendemail.suppresscc)\r\n            __gitcomp \"$__git_send_email_suppresscc_options\";\r\n            return\r\n        ;;\r\n        --get | --get-all | --unset | --unset-all)\r\n            __gitcomp_nl \"$(__git_config_get_set_variables)\";\r\n            return\r\n        ;;\r\n        *.*)\r\n            COMPREPLY=();\r\n            return\r\n        ;;\r\n    esac;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--global --system --file=\r\n\t\t\t--list --replace-all\r\n\t\t\t--get --get-all --get-regexp\r\n\t\t\t--add --unset --unset-all\r\n\t\t\t--remo"
    ],
    [
      0.000047,
      "ve-section --rename-section\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n        branch.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"remote merge mergeoptions rebase\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        branch.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\";\r\n            __gitcomp_nl \"$(__git_heads)\" \"$pfx\" \"$cur_\" \".\";\r\n            return\r\n        ;;\r\n        guitool.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"\r\n\t\t\targprompt cmd confirm needsfile noconsole norescan\r\n\t\t\tprompt revprompt revunmerged title\r\n\t\t\t\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        difftool.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"cmd path\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        man.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"cmd path\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        mergetool.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"cmd path trustExitCode\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        pager.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\";\r\n            __git_compute_all_commands;\r\n            __gitcomp_nl \"$__git_all_commands\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        remote.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"\r\n\t\t\turl proxy fetch push mirror skipDefaultUpdate\r\n\t\t\treceivepack uploadpack tagopt pushurl\r\n\t\t\t\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n        remote.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\";\r\n            __gitcomp_nl \"$(__git_remotes)\" \"$pfx\" \"$cur_\" \".\";\r\n            return\r\n        ;;\r\n        url.*.*)\r\n            local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\";\r\n            __gitcomp \"insteadOf pushInsteadOf\" \"$pfx\" \"$cur_\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp \"\r\n\t\tadd.ignoreErrors\r\n\t\tadvice.commitBeforeMerge\r\n\t\tadvice.detachedHead\r\n\t\tadvice.implicitIdentity\r\n\t\tadvice.pushNonFastForward\r\n\t\tadvice.resolveConflict\r\n\t\tadvice.statusHints\r\n\t\talias.\r\n\t\tam.keepcr\r\n\t\tapply.ignorewhitespace\r\n\t\tapply.whitespace\r\n\t\tbranch.autosetupmerge\r\n\t\tbranch.autosetuprebase\r\n\t\tbrowser.\r\n\t\tclean.requireForce\r\n\t\tcolor.branch\r\n\t\tcolor.branch.current\r\n\t\tcolor.branch.local\r\n\t\tcolor.branch.plain\r\n\t\tcolor.branch.remote\r\n\t\tcolor.decorate.HEAD\r\n\t\tcolor.decorate.branch\r\n\t\tcolor.decorate.remoteBranch\r\n\t\tcolor.decorate.stash\r\n\t\tcolor.decorate.tag\r\n\t\tcolor.diff\r\n\t\tcolor.diff.commit\r\n\t\tcolor.diff.frag\r\n\t\tcolor.diff.func\r\n\t\tcolor.diff.meta\r\n\t\tcolor.diff.new\r\n\t\tcolor.diff.old\r\n\t\tcolor.diff.plain\r\n\t\tcolor.diff.whitespace\r\n\t\tcolor.grep\r\n\t\tcolor.grep.context\r\n\t\tcolor.grep.filename\r\n\t\tcolor.grep.function\r\n\t\tcolor.grep.linenumber\r\n\t\tcolor.grep.match\r\n\t\tcolor.grep.selected\r\n\t\tcolor.grep.separator\r\n\t\tcolor.interactive\r\n\t\tcolor.interactive.error\r\n\t\tcolor.interactive.header\r\n\t\tcolor.interactive.help\r\n\t\tcolor.interactive.prompt\r\n\t\tcolor.pager\r\n\t\tcolor.showbranch\r\n\t\tcolor.status\r\n\t\tcolor.status.added\r\n\t\tcolor.status.changed\r\n\t\tcolor.status.header\r\n\t\tcolor.status.nobranch\r\n\t\tcolor.status.untracked\r\n\t\tcolor.status.updated\r\n\t\tcolor.ui\r\n\t\tcommit.status\r\n\t\tcommit.template\r\n\t\tcore.abbrev\r\n\t\tcore.askpass\r\n\t\tcore.attributesfile\r\n\t\tcore.autocrlf\r\n\t\tcore.bare\r\n\t\tcore.bigFileThreshold\r\n\t\tcore.compression\r\n\t\tcore.createObject\r\n\t\tcore.deltaBaseCacheLimit\r\n\t\tcore.editor\r\n\t\tcore.eol\r\n\t\tcore.excludesfile\r\n\t\tcore.fileMode\r\n\t\tcore.fsyncobjectfiles\r\n\t\tcore.gitProxy\r\n\t\tcore.ignoreCygwinFSTricks\r\n\t\tcore.ignoreStat\r\n\t\tcore.ignorecase\r\n\t\tcore.logAllRefUpdates\r\n\t\tcore.loosecompression\r\n\t\tcore.notesRef\r\n\t\tcore.packedGitLimit\r\n\t\tcore.packedGitWindowSize\r\n\t\tcore.pager\r\n\t\tcore.preferSymlinkRefs\r\n\t\tcore.preloadindex\r\n\t\tcore.quotepath\r\n\t\tcore.repositoryFormatVersion\r\n\t\tcore.safecrlf\r\n\t\tcore.sharedRepository\r\n\t\tcore.sparseCheckout\r\n\t\tcore.symlinks\r\n\t\tcore.trustctime\r\n\t\tcore.warnAmbiguousRefs\r\n\t\tcore.whitespace\r\n\t\tcore.worktree\r\n\t\tdiff.autorefreshindex\r\n\t\tdiff.statGraphWidth\r\n\t\tdiff.external\r\n\t\tdiff.ignoreSubmodules"
    ],
    [
      0.011137,
      "\r\n\t\tdiff.mnemonicprefix\r\n\t\tdiff.noprefix\r\n\t\tdiff.renameLimit\r\n\t\tdiff.renames\r\n\t\tdiff.suppressBlankEmpty\r\n\t\tdiff.tool\r\n\t\tdiff.wordRegex\r\n\t\tdifftool.\r\n\t\tdifftool.prompt\r\n\t\tfetch.recurseSubmodules\r\n\t\tfetch.unpackLimit\r\n\t\tformat.attach\r\n\t\tformat.cc\r\n\t\tformat.headers\r\n\t\tformat.numbered\r\n\t\tformat.pretty\r\n\t\tformat.signature\r\n\t\tformat.signoff\r\n\t\tformat.subjectprefix\r\n\t\tformat.suffix\r\n\t\tformat.thread\r\n\t\tformat.to\r\n\t\tgc.\r\n\t\tgc.aggressiveWindow\r\n\t\tgc.auto\r\n\t\tgc.autopacklimit\r\n\t\tgc.packrefs\r\n\t\tgc.pruneexpire\r\n\t\tgc.reflogexpire\r\n\t\tgc.reflogexpireunreachable\r\n\t\tgc.rerereresolved\r\n\t\tgc.rerereunresolved\r\n\t\tgitcvs.allbinary\r\n\t\tgitcvs.commitmsgannotation\r\n\t\tgitcvs.dbTableNamePrefix\r\n\t\tgitcvs.dbdriver\r\n\t\tgitcvs.dbname\r\n\t\tgitcvs.dbpass\r\n\t\tgitcvs.dbuser\r\n\t\tgitcvs.enabled\r\n\t\tgitcvs.logfile\r\n\t\tgitcvs.usecrlfattr\r\n\t\tguitool.\r\n\t\tgui.blamehistoryctx\r\n\t\tgui.commitmsgwidth\r\n\t\tgui.copyblamethreshold\r\n\t\tgui.diffcontext\r\n\t\tgui.encoding\r\n\t\tgui.fastcopyblame\r\n\t\tgui.matchtrackingbranch\r\n\t\tgui.newbranchtemplate\r\n\t\tgui.pruneduringfetch\r\n\t\tgui.spellingdictionary\r\n\t\tgui.trustmtime\r\n\t\thelp.autocorrect\r\n\t\thelp.browser\r\n\t\thelp.format\r\n\t\thttp.lowSpeedLimit\r\n\t\thttp.lowSpeedTime\r\n\t\thttp.maxRequests\r\n\t\thttp.minSessions\r\n\t\thttp.noEPSV\r\n\t\thttp.postBuffer\r\n\t\thttp.proxy\r\n\t\thttp.sslCAInfo\r\n\t\thttp.sslCAPath\r\n\t\thttp.sslCert\r\n\t\thttp.sslCertPasswordProtected\r\n\t\thttp.sslKey\r\n\t\thttp.sslVerify\r\n\t\thttp.useragent\r\n\t\ti18n.commitEncoding\r\n\t\ti18n.logOutputEncoding\r\n\t\timap.authMethod\r\n\t\timap.folder\r\n\t\timap.host\r\n\t\timap.pass\r\n\t\timap.port\r\n\t\timap.preformattedHTML\r\n\t\timap.sslverify\r\n\t\timap.tunnel\r\n\t\timap.user\r\n\t\tinit.templatedir\r\n\t\tinstaweb.browser\r\n\t\tinstaweb.httpd\r\n\t\tinstaweb.local\r\n\t\tinstaweb.modulepath\r\n\t\tinstaweb.port\r\n\t\tinteractive.singlekey\r\n\t\tlog.date\r\n\t\tlog.decorate\r\n\t\tlog.showroot\r\n\t\tmailmap.file\r\n\t\tman.\r\n\t\tman.viewer\r\n\t\tmerge.\r\n\t\tmerge.conflictstyle\r\n\t\tmerge.log\r\n\t\tmerge.renameLimit\r\n\t\tmerge.renormalize\r\n\t\tmerge.stat\r\n\t\tmerge.tool\r\n\t\tmerge.verbosity\r\n\t\tmergetool.\r\n\t\tmergetool.keepBackup\r\n\t\tmergetool.keepTemporaries\r\n\t\tmergetool.prompt\r\n\t\tnotes.displayRef\r\n\t\tnotes.rewrite.\r\n\t\tnotes.rewrite.amend\r\n\t\tnotes.rewrite.rebase\r\n\t\tnotes.rewriteMode\r\n\t\tnotes.rewriteRef\r\n\t\tpack.compression\r\n\t\tpack.deltaCacheLimit\r\n\t\tpack.deltaCacheSize\r\n\t\tpack.depth\r\n\t\tpack.indexVersion\r\n\t\tpack.packSizeLimit\r\n\t\tpack.threads\r\n\t\tpack.window\r\n\t\tpack.windowMemory\r\n\t\tpager.\r\n\t\tpretty.\r\n\t\tpull.octopus\r\n\t\tpull.twohead\r\n\t\tpush.default\r\n\t\trebase.autosquash\r\n\t\trebase.stat\r\n\t\treceive.autogc\r\n\t\treceive.denyCurrentBranch\r\n\t\treceive.denyDeleteCurrent\r\n\t\treceive.denyDeletes\r\n\t\treceive.denyNonFastForwards\r\n\t\treceive.fsckObjects\r\n\t\treceive.unpackLimit\r\n\t\treceive.updateserverinfo\r\n\t\tremotes.\r\n\t\trepack.usedeltabaseoffset\r\n\t\trerere.autoupdate\r\n\t\trerere.enabled\r\n\t\tsendemail.\r\n\t\tsendemail.aliasesfile\r\n\t\tsendemail.aliasfiletype\r\n\t\tsendemail.bcc\r\n\t\tsendemail.cc\r\n\t\tsendemail.cccmd\r\n\t\tsendemail.chainreplyto\r\n\t\tsendemail.confirm\r\n\t\tsendemail.envelopesender\r\n\t\tsendemail.from\r\n\t\tsendemail.identity\r\n\t\tsendemail.multiedit\r\n\t\tsendemail.signedoffbycc\r\n\t\tsendemail.smtpdomain\r\n\t\tsendemail.smtpencryption\r\n\t\tsendemail.smtppass\r\n\t\tsendemail.smtpserver\r\n\t\tsendemail.smtpserveroption\r\n\t\tsendemail.smtpserverport\r\n\t\tsendemail.smtpuser\r\n\t\tsendemail.suppresscc\r\n\t\tsendemail.suppressfrom\r\n\t\tsendemail.thread\r\n\t\tsendemail.to\r\n\t\tsendemail.validate\r\n\t\tshowbranch.default\r\n\t\tstatus.relativePaths\r\n\t\tstatus.showUntrackedFiles\r\n\t\tstatus.submodulesummary\r\n\t\tsubmodule.\r\n\t\ttar.umask\r\n\t\ttransfer.unpackLimit\r\n\t\turl.\r\n\t\tuser.email\r\n\t\tuser.name\r\n\t\tuser.signingkey\r\n\t\tweb.browser\r\n\t\tbranch. remote.\r\n\t\"\r\n}\r\n_git_describe () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--all --tags --contains --abbrev= --candidates=\r\n\t\t\t--exact-match --debug --long --match --always\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_diff () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--cached --staged --pickaxe-all --pickaxe-regex\r\n\t\t\t--base --ours --theirs --no-index\r\n\t\t\t$__git_diff_common_options\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_comple"
    ],
    [
      0.000038,
      "te_revlist_file\r\n}\r\n_git_difftool () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --tool=*)\r\n            __gitcomp \"$__git_mergetools_common kompare\" \"\" \"${cur##--tool=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"--cached --staged --pickaxe-all --pickaxe-regex\r\n\t\t\t--base --ours --theirs\r\n\t\t\t--no-renames --diff-filter= --find-copies-harder\r\n\t\t\t--relative --ignore-submodules\r\n\t\t\t--tool=\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_file\r\n}\r\n_git_fetch () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"$__git_fetch_options\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_remote_or_refspec\r\n}\r\n_git_format_patch () \r\n{ \r\n    case \"$cur\" in \r\n        --thread=*)\r\n            __gitcomp \"\r\n\t\t\tdeep shallow\r\n\t\t\t\" \"\" \"${cur##--thread=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--stdout --attach --no-attach --thread --thread=\r\n\t\t\t--output-directory\r\n\t\t\t--numbered --start-number\r\n\t\t\t--numbered-files\r\n\t\t\t--keep-subject\r\n\t\t\t--signoff --signature --no-signature\r\n\t\t\t--in-reply-to= --cc=\r\n\t\t\t--full-index --binary\r\n\t\t\t--not --all\r\n\t\t\t--cover-letter\r\n\t\t\t--no-prefix --src-prefix= --dst-prefix=\r\n\t\t\t--inline --suffix= --ignore-if-in-upstream\r\n\t\t\t--subject-prefix=\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_revlist\r\n}\r\n_git_fsck () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--tags --root --unreachable --cache --no-reflogs --full\r\n\t\t\t--strict --verbose --lost-found\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_gc () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--prune --aggressive\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_gitk () \r\n{ \r\n    _gitk\r\n}\r\n_git_grep () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--cached\r\n\t\t\t--text --ignore-case --word-regexp --invert-match\r\n\t\t\t--full-name --line-number\r\n\t\t\t--extended-regexp --basic-regexp --fixed-strings\r\n\t\t\t--perl-regexp\r\n\t\t\t--files-with-matches --name-only\r\n\t\t\t--files-without-match\r\n\t\t\t--max-depth\r\n\t\t\t--count\r\n\t\t\t--and --or --not --all-match\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    case \"$cword,$prev\" in \r\n        2,* | *,-*)\r\n            if test -r tags; then\r\n                __gitcomp_nl \"$(__git_match_ctag \"$cur\" tags)\";\r\n                return;\r\n            fi\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_help () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--all --info --man --web\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_compute_all_commands;\r\n    __gitcomp \"$__git_all_commands $(__git_aliases)\r\n\t\tattributes cli core-tutorial cvs-migration\r\n\t\tdiffcore gitk glossary hooks ignore modules\r\n\t\tnamespaces repository-layout tutorial tutorial-2\r\n\t\tworkflows\r\n\t\t\"\r\n}\r\n_git_init () \r\n{ \r\n    case \"$cur\" in \r\n        --shared=*)\r\n            __gitcomp \"\r\n\t\t\tfalse true umask group all world everybody\r\n\t\t\t\" \"\" \"${cur##--shared=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"--quiet --bare --template= --shared --shared=\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_log () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    local g=\"$(git rev-parse --git-dir 2\u003e/dev/null)\";\r\n    local merge=\"\";\r\n    if [ -f \"$g/MERGE_HEAD\" ]; then\r\n        merge=\"--merge\";\r\n    fi;\r\n    case \"$cur\" in \r\n        --pretty=* | --format=*)\r\n            __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases)\r\n\t\t\t\" \"\" \"${cur#*=}\";\r\n            return\r\n        ;;\r\n        --date=*)\r\n            __gitcomp \"$__git_log_date_formats\" \"\" \"${cur##--date=}\";\r\n            return\r\n        ;;\r\n        --decorate=*)\r\n            __gitcomp \"long short\" \"\" \"${cur##--decorate=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t$__git_log_common_options\r\n\t\t\t$__git_log_shortlog_options\r\n\t\t\t$__git_log_gitk_options\r\n\t\t\t--root --topo-order --date-order --reverse\r\n\t\t\t--follow --f"
    ],
    [
      0.008619,
      "ull-diff\r\n\t\t\t--abbrev-commit --abbrev=\r\n\t\t\t--relative-date --date=\r\n\t\t\t--pretty= --format= --oneline\r\n\t\t\t--cherry-pick\r\n\t\t\t--graph\r\n\t\t\t--decorate --decorate=\r\n\t\t\t--walk-reflogs\r\n\t\t\t--parents --children\r\n\t\t\t$merge\r\n\t\t\t$__git_diff_common_options\r\n\t\t\t--pickaxe-all --pickaxe-regex\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_revlist\r\n}\r\n_git_ls_files () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--cached --deleted --modified --others --ignored\r\n\t\t\t--stage --directory --no-empty-directory --unmerged\r\n\t\t\t--killed --exclude= --exclude-from=\r\n\t\t\t--exclude-per-directory= --exclude-standard\r\n\t\t\t--error-unmatch --with-tree= --full-name\r\n\t\t\t--abbrev --ignored --exclude-per-directory\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_ls_remote () \r\n{ \r\n    __gitcomp_nl \"$(__git_remotes)\"\r\n}\r\n_git_ls_tree () \r\n{ \r\n    __git_complete_file\r\n}\r\n_git_merge () \r\n{ \r\n    __git_complete_strategy \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"$__git_merge_options\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_merge_base () \r\n{ \r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_mergetool () \r\n{ \r\n    case \"$cur\" in \r\n        --tool=*)\r\n            __gitcomp \"$__git_mergetools_common tortoisemerge\" \"\" \"${cur##--tool=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"--tool=\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_mv () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--dry-run\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_name_rev () \r\n{ \r\n    __gitcomp \"--tags --all --stdin\"\r\n}\r\n_git_notes () \r\n{ \r\n    local subcommands='add append copy edit list prune remove show';\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    case \"$subcommand,$cur\" in \r\n        ,--*)\r\n            __gitcomp '--ref'\r\n        ;;\r\n        ,*)\r\n            case \"${words[cword-1]}\" in \r\n                --ref)\r\n                    __gitcomp_nl \"$(__git_refs)\"\r\n                ;;\r\n                *)\r\n                    __gitcomp \"$subcommands --ref\"\r\n                ;;\r\n            esac\r\n        ;;\r\n        add,--reuse-message=* | append,--reuse-message=* | add,--reedit-message=* | append,--reedit-message=*)\r\n            __gitcomp_nl \"$(__git_refs)\" \"\" \"${cur#*=}\"\r\n        ;;\r\n        add,--* | append,--*)\r\n            __gitcomp '--file= --message= --reedit-message=\r\n\t\t\t\t--reuse-message='\r\n        ;;\r\n        copy,--*)\r\n            __gitcomp '--stdin'\r\n        ;;\r\n        prune,--*)\r\n            __gitcomp '--dry-run --verbose'\r\n        ;;\r\n        prune,*)\r\n\r\n        ;;\r\n        *)\r\n            case \"${words[cword-1]}\" in \r\n                -m | -F)\r\n\r\n                ;;\r\n                *)\r\n                    __gitcomp_nl \"$(__git_refs)\"\r\n                ;;\r\n            esac\r\n        ;;\r\n    esac\r\n}\r\n_git_pull () \r\n{ \r\n    __git_complete_strategy \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--rebase --no-rebase\r\n\t\t\t$__git_merge_options\r\n\t\t\t$__git_fetch_options\r\n\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_remote_or_refspec\r\n}\r\n_git_push () \r\n{ \r\n    case \"$prev\" in \r\n        --repo)\r\n            __gitcomp_nl \"$(__git_remotes)\";\r\n            return\r\n        ;;\r\n    esac;\r\n    case \"$cur\" in \r\n        --repo=*)\r\n            __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--repo=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--all --mirror --tags --dry-run --force --verbose\r\n\t\t\t--receive-pack= --repo= --set-upstream\r\n\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_remote_or_refspec\r\n}\r\n_git_rebase () \r\n{ \r\n    local dir=\"$(__gitdir)\";\r\n    if [ -d \"$dir\"/rebase-apply ] || [ -d \"$dir\"/rebase-merge ]; then\r\n        __gitcomp \"--continue --skip --abort\";\r\n        return;\r\n    fi;\r\n    __git_complete_strategy \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --whitespace=*)\r\n            __gitcomp \"$__git_whitespacel"
    ],
    [
      0.000450,
      "ist\" \"\" \"${cur##--whitespace=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--onto --merge --strategy --interactive\r\n\t\t\t--preserve-merges --stat --no-stat\r\n\t\t\t--committer-date-is-author-date --ignore-date\r\n\t\t\t--ignore-whitespace --whitespace=\r\n\t\t\t--autosquash\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_reflog () \r\n{ \r\n    local subcommands=\"show delete expire\";\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    if [ -z \"$subcommand\" ]; then\r\n        __gitcomp \"$subcommands\";\r\n    else\r\n        __gitcomp_nl \"$(__git_refs)\";\r\n    fi\r\n}\r\n_git_remote () \r\n{ \r\n    local subcommands=\"add rename rm set-head set-branches set-url show prune update\";\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    if [ -z \"$subcommand\" ]; then\r\n        __gitcomp \"$subcommands\";\r\n        return;\r\n    fi;\r\n    case \"$subcommand\" in \r\n        rename | rm | set-url | show | prune)\r\n            __gitcomp_nl \"$(__git_remotes)\"\r\n        ;;\r\n        set-head | set-branches)\r\n            __git_complete_remote_or_refspec\r\n        ;;\r\n        update)\r\n            local i c='' IFS='\r\n';\r\n            for i in $(git --git-dir=\"$(__gitdir)\" config --get-regexp \"remotes\\..*\" 2\u003e/dev/null);\r\n            do\r\n                i=\"${i#remotes.}\";\r\n                c=\"$c ${i/ */}\";\r\n            done;\r\n            __gitcomp \"$c\"\r\n        ;;\r\n        *)\r\n            COMPREPLY=()\r\n        ;;\r\n    esac\r\n}\r\n_git_replace () \r\n{ \r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_reset () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--merge --mixed --hard --soft --patch\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_revert () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--edit --mainline --no-edit --no-commit --signoff\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __gitcomp_nl \"$(__git_refs)\"\r\n}\r\n_git_rm () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"--cached --dry-run --ignore-unmatch --quiet\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_send_email () \r\n{ \r\n    case \"$cur\" in \r\n        --confirm=*)\r\n            __gitcomp \"\r\n\t\t\t$__git_send_email_confirm_options\r\n\t\t\t\" \"\" \"${cur##--confirm=}\";\r\n            return\r\n        ;;\r\n        --suppress-cc=*)\r\n            __gitcomp \"\r\n\t\t\t$__git_send_email_suppresscc_options\r\n\t\t\t\" \"\" \"${cur##--suppress-cc=}\";\r\n            return\r\n        ;;\r\n        --smtp-encryption=*)\r\n            __gitcomp \"ssl tls\" \"\" \"${cur##--smtp-encryption=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"--annotate --bcc --cc --cc-cmd --chain-reply-to\r\n\t\t\t--compose --confirm= --dry-run --envelope-sender\r\n\t\t\t--from --identity\r\n\t\t\t--in-reply-to --no-chain-reply-to --no-signed-off-by-cc\r\n\t\t\t--no-suppress-from --no-thread --quiet\r\n\t\t\t--signed-off-by-cc --smtp-pass --smtp-server\r\n\t\t\t--smtp-server-port --smtp-encryption= --smtp-user\r\n\t\t\t--subject --suppress-cc= --suppress-from --thread --to\r\n\t\t\t--validate --no-validate\";\r\n            return\r\n        ;;\r\n    esac;\r\n    COMPREPLY=()\r\n}\r\n_git_shortlog () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t$__git_log_common_options\r\n\t\t\t$__git_log_shortlog_options\r\n\t\t\t--numbered --summary\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_revlist\r\n}\r\n_git_show () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    case \"$cur\" in \r\n        --pretty=* | --format=*)\r\n            __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases)\r\n\t\t\t\" \"\" \"${cur#*=}\";\r\n            return\r\n        ;;\r\n        --*)\r\n            __gitcomp \"--pretty= --format= --abbrev-commit --oneline\r\n\t\t\t$__git_diff_common_options\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_file\r\n}\r\n_git_show_branch () \r\n{ \r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t--all --remotes --topo-order --current --more=\r\n\t\t\t--list "
    ],
    [
      0.040104,
      "--independent --merge-base --no-name\r\n\t\t\t--color --no-color\r\n\t\t\t--sha1-name --sparse --topics --reflog\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_revlist\r\n}\r\n_git_stage () \r\n{ \r\n    _git_add\r\n}\r\n_git_stash () \r\n{ \r\n    local save_opts='--keep-index --no-keep-index --quiet --patch';\r\n    local subcommands='save list show apply clear drop pop create branch';\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    if [ -z \"$subcommand\" ]; then\r\n        case \"$cur\" in \r\n            --*)\r\n                __gitcomp \"$save_opts\"\r\n            ;;\r\n            *)\r\n                if [ -z \"$(__git_find_on_cmdline \"$save_opts\")\" ]; then\r\n                    __gitcomp \"$subcommands\";\r\n                else\r\n                    COMPREPLY=();\r\n                fi\r\n            ;;\r\n        esac;\r\n    else\r\n        case \"$subcommand,$cur\" in \r\n            save,--*)\r\n                __gitcomp \"$save_opts\"\r\n            ;;\r\n            apply,--* | pop,--*)\r\n                __gitcomp \"--index --quiet\"\r\n            ;;\r\n            show,--* | drop,--* | branch,--*)\r\n                COMPREPLY=()\r\n            ;;\r\n            show,* | apply,* | drop,* | pop,* | branch,*)\r\n                __gitcomp_nl \"$(git --git-dir=\"$(__gitdir)\" stash list \t\t\t\t\t| sed -n -e 's/:.*//p')\"\r\n            ;;\r\n            *)\r\n                COMPREPLY=()\r\n            ;;\r\n        esac;\r\n    fi\r\n}\r\n_git_submodule () \r\n{ \r\n    __git_has_doubledash \u0026\u0026 return;\r\n    local subcommands=\"add status init update summary foreach sync\";\r\n    if [ -z \"$(__git_find_on_cmdline \"$subcommands\")\" ]; then\r\n        case \"$cur\" in \r\n            --*)\r\n                __gitcomp \"--quiet --cached\"\r\n            ;;\r\n            *)\r\n                __gitcomp \"$subcommands\"\r\n            ;;\r\n        esac;\r\n        return;\r\n    fi\r\n}\r\n_git_svn () \r\n{ \r\n    local subcommands=\"\r\n\t\tinit fetch clone rebase dcommit log find-rev\r\n\t\tset-tree commit-diff info create-ignore propget\r\n\t\tproplist show-ignore show-externals branch tag blame\r\n\t\tmigrate mkdirs reset gc\r\n\t\t\";\r\n    local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\";\r\n    if [ -z \"$subcommand\" ]; then\r\n        __gitcomp \"$subcommands\";\r\n    else\r\n        local remote_opts=\"--username= --config-dir= --no-auth-cache\";\r\n        local fc_opts=\"\r\n\t\t\t--follow-parent --authors-file= --repack=\r\n\t\t\t--no-metadata --use-svm-props --use-svnsync-props\r\n\t\t\t--log-window-size= --no-checkout --quiet\r\n\t\t\t--repack-flags --use-log-author --localtime\r\n\t\t\t--ignore-paths= $remote_opts\r\n\t\t\t\";\r\n        local init_opts=\"\r\n\t\t\t--template= --shared= --trunk= --tags=\r\n\t\t\t--branches= --stdlayout --minimize-url\r\n\t\t\t--no-metadata --use-svm-props --use-svnsync-props\r\n\t\t\t--rewrite-root= --prefix= --use-log-author\r\n\t\t\t--add-author-from $remote_opts\r\n\t\t\t\";\r\n        local cmt_opts=\"\r\n\t\t\t--edit --rmdir --find-copies-harder --copy-similarity=\r\n\t\t\t\";\r\n        case \"$subcommand,$cur\" in \r\n            fetch,--*)\r\n                __gitcomp \"--revision= --fetch-all $fc_opts\"\r\n            ;;\r\n            clone,--*)\r\n                __gitcomp \"--revision= $fc_opts $init_opts\"\r\n            ;;\r\n            init,--*)\r\n                __gitcomp \"$init_opts\"\r\n            ;;\r\n            dcommit,--*)\r\n                __gitcomp \"\r\n\t\t\t\t--merge --strategy= --verbose --dry-run\r\n\t\t\t\t--fetch-all --no-rebase --commit-url\r\n\t\t\t\t--revision --interactive $cmt_opts $fc_opts\r\n\t\t\t\t\"\r\n            ;;\r\n            set-tree,--*)\r\n                __gitcomp \"--stdin $cmt_opts $fc_opts\"\r\n            ;;\r\n            create-ignore,--* | propget,--* | proplist,--* | show-ignore,--* | show-externals,--* | mkdirs,--*)\r\n                __gitcomp \"--revision=\"\r\n            ;;\r\n            log,--*)\r\n                __gitcomp \"\r\n\t\t\t\t--limit= --revision= --verbose --incremental\r\n\t\t\t\t--oneline --show-commit --non-recursive\r\n\t\t\t\t--authors-file= --color\r\n\t\t\t\t\"\r\n            ;;\r\n            rebase,--*)\r\n                __gitcomp \"\r\n\t\t\t\t--merge --verbose --strategy= --local\r\n\t\t\t\t--fetch-all --dry-run $fc_opts\r\n\t\t\t\t\"\r\n            ;;\r\n            commit-diff,--*)\r\n                __gitcomp \"--m"
    ],
    [
      0.000037,
      "essage= --file= --revision= $cmt_opts\"\r\n            ;;\r\n            info,--*)\r\n                __gitcomp \"--url\"\r\n            ;;\r\n            branch,--*)\r\n                __gitcomp \"--dry-run --message --tag\"\r\n            ;;\r\n            tag,--*)\r\n                __gitcomp \"--dry-run --message\"\r\n            ;;\r\n            blame,--*)\r\n                __gitcomp \"--git-format\"\r\n            ;;\r\n            migrate,--*)\r\n                __gitcomp \"\r\n\t\t\t\t--config-dir= --ignore-paths= --minimize\r\n\t\t\t\t--no-auth-cache --username=\r\n\t\t\t\t\"\r\n            ;;\r\n            reset,--*)\r\n                __gitcomp \"--revision= --parent\"\r\n            ;;\r\n            *)\r\n                COMPREPLY=()\r\n            ;;\r\n        esac;\r\n    fi\r\n}\r\n_git_tag () \r\n{ \r\n    local i c=1 f=0;\r\n    while [ $c -lt $cword ]; do\r\n        i=\"${words[c]}\";\r\n        case \"$i\" in \r\n            -d | -v)\r\n                __gitcomp_nl \"$(__git_tags)\";\r\n                return\r\n            ;;\r\n            -f)\r\n                f=1\r\n            ;;\r\n        esac;\r\n        ((c++));\r\n    done;\r\n    case \"$prev\" in \r\n        -m | -F)\r\n            COMPREPLY=()\r\n        ;;\r\n        -* | tag)\r\n            if [ $f = 1 ]; then\r\n                __gitcomp_nl \"$(__git_tags)\";\r\n            else\r\n                COMPREPLY=();\r\n            fi\r\n        ;;\r\n        *)\r\n            __gitcomp_nl \"$(__git_refs)\"\r\n        ;;\r\n    esac\r\n}\r\n_git_whatchanged () \r\n{ \r\n    _git_log\r\n}\r\n_gitk () \r\n{ \r\n    if [[ -n ${ZSH_VERSION-} ]]; then\r\n        emulate -L bash;\r\n        setopt KSH_TYPESET;\r\n        typeset -h words;\r\n        typeset -h IFS;\r\n    fi;\r\n    local cur words cword prev;\r\n    _get_comp_words_by_ref -n =: cur words cword prev;\r\n    __git_has_doubledash \u0026\u0026 return;\r\n    local g=\"$(__gitdir)\";\r\n    local merge=\"\";\r\n    if [ -f \"$g/MERGE_HEAD\" ]; then\r\n        merge=\"--merge\";\r\n    fi;\r\n    case \"$cur\" in \r\n        --*)\r\n            __gitcomp \"\r\n\t\t\t$__git_log_common_options\r\n\t\t\t$__git_log_gitk_options\r\n\t\t\t$merge\r\n\t\t\t\";\r\n            return\r\n        ;;\r\n    esac;\r\n    __git_complete_revlist\r\n}\r\n_grub_editenv () \r\n{ \r\n    local cur prev;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    case \"$prev\" in \r\n        create | list | set | unset)\r\n            COMPREPLY=(\"\");\r\n            return\r\n        ;;\r\n    esac;\r\n    __grubcomp \"$(__grub_get_options_from_help)\r\n                create list set unset\"\r\n}\r\n_grub_install () \r\n{ \r\n    local cur prev last split=false;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    last=$(__grub_get_last_option);\r\n    _split_longopt \u0026\u0026 split=true;\r\n    case \"$prev\" in \r\n        --boot-directory)\r\n            _filedir -d;\r\n            return\r\n        ;;\r\n        --disk-module)\r\n            __grubcomp \"biosdisk ata\";\r\n            return\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        case \"$last\" in \r\n            --modules)\r\n                __grub_list_modules;\r\n                return\r\n            ;;\r\n        esac;\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_mkconfig () \r\n{ \r\n    local cur prev;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_mkfont () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_mkimage () \r\n{ \r\n    local cur prev split=false;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    _split_longopt \u0026\u0026 split=true;\r\n    case \"$prev\" in \r\n        -d | --directory | -p | --prefix)\r\n            _filedir -d;\r\n            return\r\n        ;;\r\n        -O | --format)\r\n            local prog=${COMP_WORDS[0]};\r\n            __grubcomp \"$(LC_ALL=C $prog --help |                         awk -F \":\" '/available formats/ { print $2 }' |                         sed 's/, / /g')\";\r\n           "
    ],
    [
      0.000046,
      " return\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_mkpasswd_pbkdf2 () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_mkrescue () \r\n{ \r\n    local cur prev last;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    last=$(__grub_get_last_option);\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        case \"$last\" in \r\n            --modules)\r\n                __grub_list_modules;\r\n                return\r\n            ;;\r\n        esac;\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_probe () \r\n{ \r\n    local cur prev split=false;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    _split_longopt \u0026\u0026 split=true;\r\n    case \"$prev\" in \r\n        -t | --target)\r\n            local prog=${COMP_WORDS[0]};\r\n            __grubcomp \"$(LC_ALL=C $prog --help |                         awk -F \"[()]\" '/--target=/ { print $2 }' |                         sed 's/|/ /g')\";\r\n            return\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_script_check () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_grub_set_entry () \r\n{ \r\n    local cur prev split=false;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    _split_longopt \u0026\u0026 split=true;\r\n    case \"$prev\" in \r\n        --boot-directory)\r\n            _filedir -d;\r\n            return\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        __grub_list_menuentries;\r\n    fi\r\n}\r\n_grub_setup () \r\n{ \r\n    local cur prev split=false;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    _split_longopt \u0026\u0026 split=true;\r\n    case \"$prev\" in \r\n        -d | --directory)\r\n            _filedir -d;\r\n            return\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        __grubcomp \"$(__grub_get_options_from_help)\";\r\n    else\r\n        _filedir;\r\n    fi\r\n}\r\n_have () \r\n{ \r\n    PATH=$PATH:/usr/sbin:/sbin:/usr/local/sbin type $1 \u0026\u003e/dev/null\r\n}\r\n_hg () \r\n{ \r\n    local cur prev cmd cmd_index opts i;\r\n    local global_args='--cwd|-R|--repository';\r\n    local hg=\"$1\";\r\n    local canonical=0;\r\n    COMPREPLY=();\r\n    cur=\"$2\";\r\n    prev=\"$3\";\r\n    for ((i=1; $i\u003c=$COMP_CWORD; i++))\r\n    do\r\n        if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n            if [[ ${COMP_WORDS[i-1]} != @($global_args) ]]; then\r\n                cmd=\"${COMP_WORDS[i]}\";\r\n                cmd_index=$i;\r\n                break;\r\n            fi;\r\n        fi;\r\n    done;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        if [ \"$(type -t \"_hg_opt_$cmd\")\" = function ] \u0026\u0026 \"_hg_opt_$cmd\"; then\r\n            return;\r\n        fi;\r\n        opts=$(_hg_cmd debugcomplete --options \"$cmd\");\r\n        COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$opts' -- \"$cur\"));\r\n        return;\r\n    fi;\r\n    case \"$prev\" in \r\n        -R | --repository)\r\n            _hg_paths;\r\n            _hg_repos;\r\n            return\r\n        ;;\r\n        --cwd)\r\n            return\r\n        ;;\r\n    esac;\r\n    if [ -z \"$cmd\" ] || [ $COMP_CWORD -eq $i ]; then\r\n        _hg_commands;\r\n        return;\r\n    fi;\r\n    local help;\r\n    if _hg_command_specific; then\r\n        return;\r\n    fi;\r\n    help=$(_hg_cmd help \"$cmd\");\r\n    if [ $? -ne 0 ]; then\r\n        return;\r\n    fi;\r\n    cmd=${help#hg };\r\n    cmd=${cmd%%[' \r\n']*};\r\n    canonical=1;\r\n    _hg_command_specific\r\n}\r\n_hg_bookmarks () \r\n{ \r\n    local bookmarks=\"$(_hg_cmd bookmarks --quiet )\";\r\n    local IFS='"
    ],
    [
      0.000020,
      "\r\n';\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$bookmarks' -- \"$cur\"))\r\n}\r\n_hg_branches () \r\n{ \r\n    local branches=\"$(_hg_cmd branches -q)\";\r\n    local IFS='\r\n';\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$branches' -- \"$cur\"))\r\n}\r\n_hg_cmd () \r\n{ \r\n    HGPLAIN=1 \"$hg\" \"$@\" 2\u003e /dev/null\r\n}\r\n_hg_cmd_bisect () \r\n{ \r\n    local i subcmd;\r\n    for ((i=cmd_index+1; i\u003c=COMP_CWORD; i++))\r\n    do\r\n        if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n            if [[ ${COMP_WORDS[i-1]} != @($global_args) ]]; then\r\n                subcmd=\"${COMP_WORDS[i]}\";\r\n                break;\r\n            fi;\r\n        fi;\r\n    done;\r\n    if [ -z \"$subcmd\" ] || [ $COMP_CWORD -eq $i ] || [ \"$subcmd\" = help ]; then\r\n        COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W 'bad good help init next reset' -- \"$cur\"));\r\n        return;\r\n    fi;\r\n    case \"$subcmd\" in \r\n        good | bad)\r\n            _hg_labels\r\n        ;;\r\n    esac;\r\n    return\r\n}\r\n_hg_cmd_bookmarks () \r\n{ \r\n    if [[ \"$prev\" = @(-d|--delete|-m|--rename) ]]; then\r\n        _hg_bookmarks;\r\n        return;\r\n    fi\r\n}\r\n_hg_cmd_email () \r\n{ \r\n    case \"$prev\" in \r\n        -c | --cc | -t | --to | -f | --from | --bcc)\r\n            if [ \"$(type -t _hg_emails)\" = function ]; then\r\n                local arg=to;\r\n                if [[ \"$prev\" == @(-f|--from) ]]; then\r\n                    arg=from;\r\n                fi;\r\n                local addresses=$(_hg_emails $arg);\r\n                COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$addresses' -- \"$cur\"));\r\n            fi;\r\n            return\r\n        ;;\r\n        -m | --mbox)\r\n            return\r\n        ;;\r\n        -s | --subject)\r\n            return\r\n        ;;\r\n    esac;\r\n    _hg_labels;\r\n    return\r\n}\r\n_hg_cmd_qclone () \r\n{ \r\n    local count=$(_hg_count_non_option);\r\n    if [ $count = 1 ]; then\r\n        _hg_paths;\r\n    fi;\r\n    _hg_repos\r\n}\r\n_hg_cmd_qcommit () \r\n{ \r\n    local root=$(_hg_cmd root);\r\n    local files=$(cd \"$root/.hg/patches\" \u0026\u0026 _hg_cmd status -nmar);\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$files' -- \"$cur\"))\r\n}\r\n_hg_cmd_qdelete () \r\n{ \r\n    local qcmd=qunapplied;\r\n    if [[ \"$prev\" = @(-r|--rev) ]]; then\r\n        qcmd=qapplied;\r\n    fi;\r\n    _hg_ext_mq_patchlist $qcmd\r\n}\r\n_hg_cmd_qfinish () \r\n{ \r\n    if [[ \"$prev\" = @(-a|--applied) ]]; then\r\n        return;\r\n    fi;\r\n    _hg_ext_mq_patchlist qapplied\r\n}\r\n_hg_cmd_qfold () \r\n{ \r\n    _hg_ext_mq_patchlist qunapplied\r\n}\r\n_hg_cmd_qgoto () \r\n{ \r\n    if [[ \"$prev\" = @(-n|--name) ]]; then\r\n        _hg_ext_mq_queues;\r\n        return;\r\n    fi;\r\n    _hg_ext_mq_patchlist qseries\r\n}\r\n_hg_cmd_qguard () \r\n{ \r\n    local prefix='';\r\n    if [[ \"$cur\" == +* ]]; then\r\n        prefix=+;\r\n    else\r\n        if [[ \"$cur\" == -* ]]; then\r\n            prefix=-;\r\n        fi;\r\n    fi;\r\n    local ncur=${cur#[-+]};\r\n    if ! [ \"$prefix\" ]; then\r\n        _hg_ext_mq_patchlist qseries;\r\n        return;\r\n    fi;\r\n    local guards=$(_hg_ext_mq_guards);\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -P $prefix -W '$guards' -- \"$ncur\"))\r\n}\r\n_hg_cmd_qheader () \r\n{ \r\n    _hg_ext_mq_patchlist qseries\r\n}\r\n_hg_cmd_qpop () \r\n{ \r\n    if [[ \"$prev\" = @(-n|--name) ]]; then\r\n        _hg_ext_mq_queues;\r\n        return;\r\n    fi;\r\n    _hg_ext_mq_patchlist qapplied\r\n}\r\n_hg_cmd_qpush () \r\n{ \r\n    if [[ \"$prev\" = @(-n|--name) ]]; then\r\n        _hg_ext_mq_queues;\r\n        return;\r\n    fi;\r\n    _hg_ext_mq_patchlist qunapplied\r\n}\r\n_hg_cmd_qqueue () \r\n{ \r\n    local q;\r\n    local queues;\r\n    local opts=\"--list --create --rename --delete --purge\";\r\n    queues=$( _hg_cmd qqueue --quiet );\r\n    COMPREPLY=($( compgen -W \"${opts} ${queues}\" \"${cur}\" ))\r\n}\r\n_hg_cmd_qrename () \r\n{ \r\n    _hg_ext_mq_patchlist qseries\r\n}\r\n_hg_cmd_qsave () \r\n{ \r\n    if [[ \"$prev\" = @(-n|--name) ]]; then\r\n        _hg_ext_mq_queues;\r\n        return;\r\n    fi\r\n}\r\n_hg_cmd_qselect () \r\n{ \r\n    local guards=$(_hg_ext_mq_guards);\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$guards' -- \"$cur\"))\r\n}\r\n_hg_cmd_shelve () \r\n{ \r\n    _hg_status \"mard\"\r\n}\r\n_hg_cmd_sign () \r\n{ \r\n    _hg_labels\r\n}\r\n_hg_cmd_strip () \r\n{ \r\n    _hg_labels\r\n}\r\n_hg_cmd_transplant () \r\n{ \r\n    "
    ],
    [
      0.027987,
      "case \"$prev\" in \r\n        -s | --source)\r\n            _hg_paths;\r\n            _hg_repos;\r\n            return\r\n        ;;\r\n        --filter)\r\n            return\r\n        ;;\r\n    esac;\r\n    _hg_labels;\r\n    return\r\n}\r\n_hg_cmd_unshelve () \r\n{ \r\n    _hg_shelves\r\n}\r\n_hg_command_specific () \r\n{ \r\n    if [ \"$(type -t \"_hg_cmd_$cmd\")\" = function ]; then\r\n        \"_hg_cmd_$cmd\";\r\n        return 0;\r\n    fi;\r\n    if [ \"$cmd\" != status ] \u0026\u0026 [ \"$prev\" = -r ] || [ \"$prev\" == --rev ]; then\r\n        if [ $canonical = 1 ]; then\r\n            _hg_labels;\r\n            return 0;\r\n        else\r\n            if [[ status != \"$cmd\"* ]]; then\r\n                _hg_labels;\r\n                return 0;\r\n            else\r\n                return 1;\r\n            fi;\r\n        fi;\r\n    fi;\r\n    case \"$cmd\" in \r\n        help)\r\n            _hg_commands\r\n        ;;\r\n        export)\r\n            if _hg_ext_mq_patchlist qapplied \u0026\u0026 [ \"${COMPREPLY[*]}\" ]; then\r\n                return 0;\r\n            fi;\r\n            _hg_labels\r\n        ;;\r\n        manifest | update)\r\n            _hg_labels\r\n        ;;\r\n        pull | push | outgoing | incoming)\r\n            _hg_paths;\r\n            _hg_repos\r\n        ;;\r\n        paths)\r\n            _hg_paths\r\n        ;;\r\n        add)\r\n            _hg_status \"u\"\r\n        ;;\r\n        merge)\r\n            _hg_labels\r\n        ;;\r\n        commit | record)\r\n            _hg_status \"mar\"\r\n        ;;\r\n        remove)\r\n            _hg_status \"d\"\r\n        ;;\r\n        forget)\r\n            _hg_status \"a\"\r\n        ;;\r\n        diff)\r\n            _hg_status \"mar\"\r\n        ;;\r\n        revert)\r\n            _hg_status \"mard\"\r\n        ;;\r\n        clone)\r\n            local count=$(_hg_count_non_option);\r\n            if [ $count = 1 ]; then\r\n                _hg_paths;\r\n            fi;\r\n            _hg_repos\r\n        ;;\r\n        debugindex | debugindexdot)\r\n            COMPREPLY=(${COMPREPLY[@]:-} $(compgen -f -X \"!*.i\" -- \"$cur\"))\r\n        ;;\r\n        debugdata)\r\n            COMPREPLY=(${COMPREPLY[@]:-} $(compgen -f -X \"!*.d\" -- \"$cur\"))\r\n        ;;\r\n        *)\r\n            return 1\r\n        ;;\r\n    esac;\r\n    return 0\r\n}\r\n_hg_commands () \r\n{ \r\n    local commands;\r\n    commands=\"$(HGPLAINEXCEPT=alias _hg_cmd debugcomplete \"$cur\")\" || commands=\"\";\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$commands' -- \"$cur\"))\r\n}\r\n_hg_count_non_option () \r\n{ \r\n    local i count=0;\r\n    local filters=\"$1\";\r\n    for ((i=1; $i\u003c=$COMP_CWORD; i++))\r\n    do\r\n        if [[ \"${COMP_WORDS[i]}\" != -* ]]; then\r\n            if [[ ${COMP_WORDS[i-1]} == @($filters|$global_args) ]]; then\r\n                continue;\r\n            fi;\r\n            count=$(($count + 1));\r\n        fi;\r\n    done;\r\n    echo $(($count - 1))\r\n}\r\n_hg_ext_mq_guards () \r\n{ \r\n    _hg_cmd qselect --series | sed -e 's/^.//'\r\n}\r\n_hg_ext_mq_patchlist () \r\n{ \r\n    local patches;\r\n    patches=$(_hg_cmd $1);\r\n    if [ $? -eq 0 ] \u0026\u0026 [ \"$patches\" ]; then\r\n        COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$patches' -- \"$cur\"));\r\n        return 0;\r\n    fi;\r\n    return 1\r\n}\r\n_hg_ext_mq_queues () \r\n{ \r\n    local root=$(_hg_cmd root);\r\n    local n;\r\n    for n in $(cd \"$root\"/.hg \u0026\u0026 compgen -d -- \"$cur\");\r\n    do\r\n        if [ \"$n\" != patches ] \u0026\u0026 [ -e \"$root/.hg/$n/series\" ]; then\r\n            COMPREPLY=(${COMPREPLY[@]:-} \"$n\");\r\n        fi;\r\n    done\r\n}\r\n_hg_labels () \r\n{ \r\n    _hg_tags;\r\n    _hg_branches;\r\n    _hg_bookmarks\r\n}\r\n_hg_opt_qguard () \r\n{ \r\n    local i;\r\n    for ((i=cmd_index+1; i\u003c=COMP_CWORD; i++))\r\n    do\r\n        if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n            if [[ ${COMP_WORDS[i-1]} != @($global_args) ]]; then\r\n                _hg_cmd_qguard;\r\n                return 0;\r\n            fi;\r\n        else\r\n            if [ \"${COMP_WORDS[i]}\" = -- ]; then\r\n                _hg_cmd_qguard;\r\n                return 0;\r\n            fi;\r\n        fi;\r\n    done;\r\n    return 1\r\n}\r\n_hg_paths () \r\n{ \r\n    local paths=\"$(_hg_cmd paths -q)\";\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$paths' -- \"$cur\"))\r\n}\r\n_hg_repos () \r\n{ \r\n    local i;\r\n    for i in $(compgen -d -- \"$cur\");\r\n    do\r\n        test ! -d \"$i\"/.hg |"
    ],
    [
      0.000052,
      "| COMPREPLY=(${COMPREPLY[@]:-} \"$i\");\r\n    done\r\n}\r\n_hg_shelves () \r\n{ \r\n    local shelves=\"$(_hg_cmd unshelve -l .)\";\r\n    local IFS='\r\n';\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$shelves' -- \"$cur\"))\r\n}\r\n_hg_status () \r\n{ \r\n    local files=\"$(_hg_cmd status -n$1 .)\";\r\n    local IFS='\r\n';\r\n    compopt -o filenames 2\u003e /dev/null;\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$files' -- \"$cur\"))\r\n}\r\n_hg_tags () \r\n{ \r\n    local tags=\"$(_hg_cmd tags -q)\";\r\n    local IFS='\r\n';\r\n    COMPREPLY=(${COMPREPLY[@]:-} $(compgen -W '$tags' -- \"$cur\"))\r\n}\r\n_init_completion () \r\n{ \r\n    local exclude= flag outx errx inx OPTIND=1;\r\n    while getopts \"n:e:o:i:s\" flag \"$@\"; do\r\n        case $flag in \r\n            n)\r\n                exclude+=$OPTARG\r\n            ;;\r\n            e)\r\n                errx=$OPTARG\r\n            ;;\r\n            o)\r\n                outx=$OPTARG\r\n            ;;\r\n            i)\r\n                inx=$OPTARG\r\n            ;;\r\n            s)\r\n                split=false;\r\n                exclude+==\r\n            ;;\r\n        esac;\r\n    done;\r\n    COMPREPLY=();\r\n    local redir=\"@(?([0-9])\u003c|?([0-9\u0026])\u003e?(\u003e)|\u003e\u0026)\";\r\n    _get_comp_words_by_ref -n \"$exclude\u003c\u003e\u0026\" cur prev words cword;\r\n    _variables \u0026\u0026 return 1;\r\n    if [[ $cur == $redir* || $prev == $redir ]]; then\r\n        local xspec;\r\n        case $cur in \r\n            2'\u003e'*)\r\n                xspec=$errx\r\n            ;;\r\n            *'\u003e'*)\r\n                xspec=$outx\r\n            ;;\r\n            *'\u003c'*)\r\n                xspec=$inx\r\n            ;;\r\n            *)\r\n                case $prev in \r\n                    2'\u003e'*)\r\n                        xspec=$errx\r\n                    ;;\r\n                    *'\u003e'*)\r\n                        xspec=$outx\r\n                    ;;\r\n                    *'\u003c'*)\r\n                        xspec=$inx\r\n                    ;;\r\n                esac\r\n            ;;\r\n        esac;\r\n        cur=\"${cur##$redir}\";\r\n        _filedir $xspec;\r\n        return 1;\r\n    fi;\r\n    local i skip;\r\n    for ((i=1; i \u003c ${#words[@]}; 1))\r\n    do\r\n        if [[ ${words[i]} == $redir* ]]; then\r\n            [[ ${words[i]} == $redir ]] \u0026\u0026 skip=2 || skip=1;\r\n            words=(\"${words[@]:0:i}\" \"${words[@]:i+skip}\");\r\n            [[ $i -le $cword ]] \u0026\u0026 cword=$(( cword - skip ));\r\n        else\r\n            i=$(( ++i ));\r\n        fi;\r\n    done;\r\n    [[ $cword -eq 0 ]] \u0026\u0026 return 1;\r\n    prev=${words[cword-1]};\r\n    [[ -n ${split-} ]] \u0026\u0026 _split_longopt \u0026\u0026 split=true;\r\n    return 0\r\n}\r\n_insserv () \r\n{ \r\n    local cur prev sysvdir services options;\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    [ -d /etc/rc.d/init.d ] \u0026\u0026 sysvdir=/etc/rc.d/init.d || sysvdir=/etc/init.d;\r\n    services=($(echo $sysvdir/!(README*|*.dpkg*|*.rpm@(orig|new|save))));\r\n    services=(${services[@]#$sysvdir/});\r\n    options=(-c --config -d -f -n -o --override -p --path -r -v);\r\n    case \"$prev\" in \r\n        -c | --config)\r\n            _filedir\r\n        ;;\r\n        -o | --override | -p | --path)\r\n            _filedir -d\r\n        ;;\r\n        *)\r\n            COMPREPLY=($( compgen -W '${options[@]} ${services[@]}' -- \t\t$cur ))\r\n        ;;\r\n    esac;\r\n    return 0\r\n}\r\n_installed_modules () \r\n{ \r\n    COMPREPLY=($( compgen -W \"$( PATH=\"$PATH:/sbin\" lsmod |         awk '{if (NR != 1) print $1}' )\" -- \"$1\" ))\r\n}\r\n_ip_addresses () \r\n{ \r\n    COMPREPLY+=($( compgen -W         \"$( PATH=\"$PATH:/sbin\" LC_ALL=C ifconfig -a |\r\n            sed -ne 's/.*addr:\\([^[:space:]]*\\).*/\\1/p'                 -ne 's/.*inet[[:space:]]\\{1,\\}\\([^[:space:]]*\\).*/\\1/p' )\"         -- \"$cur\" ))\r\n}\r\n_kernel_versions () \r\n{ \r\n    COMPREPLY=($( compgen -W '$( command ls /lib/modules )' -- \"$cur\" ))\r\n}\r\n_kernels () \r\n{ \r\n    COMPREPLY=($( cd /lib/modules \u0026\u0026 compgen -d -- \"$cur\" ))\r\n}\r\n_known_hosts () \r\n{ \r\n    local cur prev words cword;\r\n    _init_completion -n : || return;\r\n    local options;\r\n    [[ \"$1\" == -a || \"$2\" == -a ]] \u0026\u0026 options=-a;\r\n    [[ \"$1\" == -c || \"$2\" == -c ]] \u0026\u0026 options+=\" -c\";\r\n    _known_hosts_real $options -- \"$cur\"\r\n}\r\n_known_hosts_real () \r\n{ \r\n    local configfile flag prefix;\r\n    local"
    ],
    [
      0.022682,
      " cur curd awkcur user suffix aliases i host;\r\n    local -a kh khd config;\r\n    local OPTIND=1;\r\n    while getopts \"acF:p:\" flag \"$@\"; do\r\n        case $flag in \r\n            a)\r\n                aliases='yes'\r\n            ;;\r\n            c)\r\n                suffix=':'\r\n            ;;\r\n            F)\r\n                configfile=$OPTARG\r\n            ;;\r\n            p)\r\n                prefix=$OPTARG\r\n            ;;\r\n        esac;\r\n    done;\r\n    [[ $# -lt $OPTIND ]] \u0026\u0026 echo \"error: $FUNCNAME: missing mandatory argument CWORD\";\r\n    cur=${!OPTIND};\r\n    let \"OPTIND += 1\";\r\n    [[ $# -ge $OPTIND ]] \u0026\u0026 echo \"error: $FUNCNAME(\"$@\"): unprocessed arguments:\" $(while [[ $# -ge $OPTIND ]]; do printf '%s\\n' ${!OPTIND}; shift; done);\r\n    [[ $cur == *@* ]] \u0026\u0026 user=${cur%@*}@ \u0026\u0026 cur=${cur#*@};\r\n    kh=();\r\n    if [[ -n $configfile ]]; then\r\n        [[ -r $configfile ]] \u0026\u0026 config+=(\"$configfile\");\r\n    else\r\n        for i in /etc/ssh/ssh_config ~/.ssh/config ~/.ssh2/config;\r\n        do\r\n            [[ -r $i ]] \u0026\u0026 config+=(\"$i\");\r\n        done;\r\n    fi;\r\n    if [[ ${#config[@]} -gt 0 ]]; then\r\n        local OIFS=$IFS IFS='\r\n' j;\r\n        local -a tmpkh;\r\n        tmpkh=($( awk 'sub(\"^[ \\t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][ \\t]+\", \"\") { print $0 }' \"${config[@]}\" | sort -u ));\r\n        IFS=$OIFS;\r\n        for i in \"${tmpkh[@]}\";\r\n        do\r\n            while [[ $i =~ ^([^\\\"]*)\\\"([^\\\"]*)\\\"(.*)$ ]]; do\r\n                i=${BASH_REMATCH[1]}${BASH_REMATCH[3]};\r\n                j=${BASH_REMATCH[2]};\r\n                __expand_tilde_by_ref j;\r\n                [[ -r $j ]] \u0026\u0026 kh+=(\"$j\");\r\n            done;\r\n            for j in $i;\r\n            do\r\n                __expand_tilde_by_ref j;\r\n                [[ -r $j ]] \u0026\u0026 kh+=(\"$j\");\r\n            done;\r\n        done;\r\n    fi;\r\n    if [[ -z $configfile ]]; then\r\n        for i in /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 /etc/known_hosts /etc/known_hosts2 ~/.ssh/known_hosts ~/.ssh/known_hosts2;\r\n        do\r\n            [[ -r $i ]] \u0026\u0026 kh+=(\"$i\");\r\n        done;\r\n        for i in /etc/ssh2/knownhosts ~/.ssh2/hostkeys;\r\n        do\r\n            [[ -d $i ]] \u0026\u0026 khd+=(\"$i\"/*pub);\r\n        done;\r\n    fi;\r\n    if [[ ${#kh[@]} -gt 0 || ${#khd[@]} -gt 0 ]]; then\r\n        awkcur=${cur//\\//\\\\\\/};\r\n        awkcur=${awkcur//\\./\\\\\\.};\r\n        curd=$awkcur;\r\n        if [[ \"$awkcur\" == [0-9]*[.:]* ]]; then\r\n            awkcur=\"^$awkcur[.:]*\";\r\n        else\r\n            if [[ \"$awkcur\" == [0-9]* ]]; then\r\n                awkcur=\"^$awkcur.*[.:]\";\r\n            else\r\n                if [[ -z $awkcur ]]; then\r\n                    awkcur=\"[a-z.:]\";\r\n                else\r\n                    awkcur=\"^$awkcur\";\r\n                fi;\r\n            fi;\r\n        fi;\r\n        if [[ ${#kh[@]} -gt 0 ]]; then\r\n            COMPREPLY+=($( awk 'BEGIN {FS=\",\"}\r\n            /^\\s*[^|\\#]/ {\r\n            sub(\"^@[^ ]+ +\", \"\"); \\\r\n            sub(\" .*$\", \"\"); \\\r\n            for (i=1; i\u003c=NF; ++i) { \\\r\n            sub(\"^\\\\[\", \"\", $i); sub(\"\\\\](:[0-9]+)?$\", \"\", $i); \\\r\n            if ($i !~ /[*?]/ \u0026\u0026 $i ~ /'\"$awkcur\"'/) {print $i} \\\r\n            }}' \"${kh[@]}\" 2\u003e/dev/null ));\r\n        fi;\r\n        if [[ ${#khd[@]} -gt 0 ]]; then\r\n            for i in \"${khd[@]}\";\r\n            do\r\n                if [[ \"$i\" == *key_22_$curd*.pub \u0026\u0026 -r \"$i\" ]]; then\r\n                    host=${i/#*key_22_/};\r\n                    host=${host/%.pub/};\r\n                    COMPREPLY+=($host);\r\n                fi;\r\n            done;\r\n        fi;\r\n        for ((i=0; i \u003c ${#COMPREPLY[@]}; i++ ))\r\n        do\r\n            COMPREPLY[i]=$prefix$user${COMPREPLY[i]}$suffix;\r\n        done;\r\n    fi;\r\n    if [[ ${#config[@]} -gt 0 \u0026\u0026 -n \"$aliases\" ]]; then\r\n        local hosts=$( sed -ne 's/^[ \\t]*[Hh][Oo][Ss][Tt]\\([Nn][Aa][Mm][Ee]\\)\\{0,1\\}['\"$'\\t '\"']\\{1,\\}\\([^#*?]*\\)\\(#.*\\)\\{0,1\\}$/\\2/p' \"${config[@]}\" );\r\n        COMPREPLY+=($( compgen -P \"$prefix$user\"             -S \"$suffix\" -W \"$hosts\" -- \"$cur\" ));\r\n    fi;\r\n    if [[ -n ${COMP_KNOWN_HOSTS_WITH_AVAHI:-} ]] \u0026\u0026 type avahi-browse \u0026\u003e/dev/null; then\r\n"
    ],
    [
      0.000045,
      "        COMPREPLY+=($( compgen -P \"$prefix$user\" -S \"$suffix\" -W             \"$( avahi-browse -cpr _workstation._tcp 2\u003e/dev/null |                  awk -F';' '/^=/ { print $7 }' | sort -u )\" -- \"$cur\" ));\r\n    fi;\r\n    COMPREPLY+=($( compgen -W         \"$( ruptime 2\u003e/dev/null | awk '{ print $1 }' )\" -- \"$cur\" ));\r\n    if [[ -n ${COMP_KNOWN_HOSTS_WITH_HOSTFILE-1} ]]; then\r\n        COMPREPLY+=($( compgen -A hostname -P \"$prefix$user\" -S \"$suffix\" -- \"$cur\" ));\r\n    fi;\r\n    __ltrim_colon_completions \"$prefix$user$cur\";\r\n    return 0\r\n}\r\n_longopt () \r\n{ \r\n    local cur prev words cword split;\r\n    _init_completion -s || return;\r\n    case \"${prev,,}\" in \r\n        --help | --usage | --version)\r\n            return 0\r\n        ;;\r\n        --*dir*)\r\n            _filedir -d;\r\n            return 0\r\n        ;;\r\n        --*file* | --*path*)\r\n            _filedir;\r\n            return 0\r\n        ;;\r\n        --+([-a-z0-9_]))\r\n            local argtype=$( $1 --help 2\u003e\u00261 | sed -ne                 \"s|.*$prev\\[\\{0,1\\}=[\u003c[]\\{0,1\\}\\([-A-Za-z0-9_]\\{1,\\}\\).*|\\1|p\" );\r\n            case ${argtype,,} in \r\n                *dir*)\r\n                    _filedir -d;\r\n                    return 0\r\n                ;;\r\n                *file* | *path*)\r\n                    _filedir;\r\n                    return 0\r\n                ;;\r\n            esac\r\n        ;;\r\n    esac;\r\n    $split \u0026\u0026 return 0;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        COMPREPLY=($( compgen -W \"$( $1 --help 2\u003e\u00261 |             sed -ne 's/.*\\(--[-A-Za-z0-9]\\{1,\\}=\\{0,1\\}\\).*/\\1/p' | sort -u )\"             -- \"$cur\" ));\r\n        [[ $COMPREPLY == *= ]] \u0026\u0026 compopt -o nospace;\r\n    else\r\n        if [[ \"$1\" == @(mk|rm)dir ]]; then\r\n            _filedir -d;\r\n        else\r\n            _filedir;\r\n        fi;\r\n    fi\r\n}\r\n_mac_addresses () \r\n{ \r\n    local re='\\([A-Fa-f0-9]\\{2\\}:\\)\\{5\\}[A-Fa-f0-9]\\{2\\}';\r\n    local PATH=\"$PATH:/sbin:/usr/sbin\";\r\n    COMPREPLY+=($( ifconfig -a 2\u003e/dev/null | sed -ne         \"s/.*[[:space:]]HWaddr[[:space:]]\\{1,\\}\\($re\\)[[:space:]]*$/\\1/p\" -ne         \"s/^[[:space:]]\\{1,\\}ether[[:space:]]\\{1,\\}\\($re\\)[[:space:]]*$/\\1/p\"         ));\r\n    COMPREPLY+=($( arp -an 2\u003e/dev/null | sed -ne         \"s/.*[[:space:]]\\($re\\)[[:space:]].*/\\1/p\" -ne         \"s/.*[[:space:]]\\($re\\)[[:space:]]*$/\\1/p\" ));\r\n    COMPREPLY+=($( sed -ne         \"s/^[[:space:]]*\\($re\\)[[:space:]].*/\\1/p\" /etc/ethers 2\u003e/dev/null ));\r\n    COMPREPLY=($( compgen -W '${COMPREPLY[@]}' -- \"$cur\" ));\r\n    __ltrim_colon_completions \"$cur\"\r\n}\r\n_minimal () \r\n{ \r\n    local cur prev words cword split;\r\n    _init_completion -s || return;\r\n    $split \u0026\u0026 return;\r\n    _filedir\r\n}\r\n_modules () \r\n{ \r\n    local modpath;\r\n    modpath=/lib/modules/$1;\r\n    COMPREPLY=($( compgen -W \"$( command ls -RL $modpath 2\u003e/dev/null |         sed -ne 's/^\\(.*\\)\\.k\\{0,1\\}o\\(\\.[gx]z\\)\\{0,1\\}$/\\1/p' )\" -- \"$cur\" ))\r\n}\r\n_ncpus () \r\n{ \r\n    local var=NPROCESSORS_ONLN;\r\n    [[ $OSTYPE == *linux* ]] \u0026\u0026 var=_$var;\r\n    local n=$( getconf $var 2\u003e/dev/null );\r\n    printf %s ${n:-1}\r\n}\r\n_openvpn () \r\n{ \r\n    local cur;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    if [ $COMP_CWORD -eq 1 ]; then\r\n        COMPREPLY=($( compgen -W '$( /etc/init.d/openvpn 2\u003e\u00261 \\\r\n              | cut -d\"{\" -f2 | tr -d \"}\" | tr \"|\" \" \" )' -- $cur ));\r\n    else\r\n        COMPREPLY=($( compgen -W '$( command ls /etc/openvpn/*.conf 2\u003e/dev/null \\\r\n              | sed -e 's%/etc/openvpn/%%' -e 's/\\.conf//' )' -- $cur ));\r\n    fi\r\n}\r\n_parse_help () \r\n{ \r\n    eval local cmd=$( quote \"$1\" );\r\n    local line;\r\n    { \r\n        case $cmd in \r\n            -)\r\n                cat\r\n            ;;\r\n            *)\r\n                \"$( dequote \"$cmd\" )\" ${2:---help} 2\u003e\u00261\r\n            ;;\r\n        esac\r\n    } | while read -r line; do\r\n        [[ $line == *([ '\t'])-* ]] || continue;\r\n        while [[ $line =~ ((^|[^-])-[A-Za-z0-9?][[:space:]]+)\\[?[A-Z0-9]+\\]? ]]; do\r\n            line=${line/\"${BASH_REMATCH[0]}\"/\"${BASH_REMATCH[1]}\"};\r\n        done;\r\n        __parse_options \"${line// or /, }\";\r\n    done\r\n}\r\n_parse_usage () \r\n{ \r\n    eval local cmd=$( quote \"$1\" );\r\n    local line ma"
    ],
    [
      0.000006,
      "tch option i char;\r\n    { \r\n        case $cmd in \r\n            -)\r\n                cat\r\n            ;;\r\n            *)\r\n                \"$( dequote \"$cmd\" )\" ${2:---usage} 2\u003e\u00261\r\n            ;;\r\n        esac\r\n    } | while read -r line; do\r\n"
    ],
    [
      0.000038,
      "        while [[ $line =~ \\[[[:space:]]*(-[^]]+)[[:space:]]*\\] ]]; do\r\n            match=${BASH_REMATCH[0]};\r\n            option=${BASH_REMATCH[1]};\r\n            case $option in \r\n                -?(\\[)+([a-zA-Z0-9?]))\r\n                    for ((i=1; i \u003c ${#option}; i++ ))\r\n                    do\r\n                        char=${option:i:1};\r\n                        [[ $char != '[' ]] \u0026\u0026 printf '%s\\n' -$char;\r\n                    done\r\n                ;;\r\n                *)\r\n                    __parse_options \"$option\"\r\n                ;;\r\n            esac;\r\n            line=${line#*\"$match\"};\r\n        done;\r\n    done\r\n}\r\n_pci_ids () \r\n{ \r\n    COMPREPLY+=($( compgen -W         \"$( PATH=\"$PATH:/sbin\" lspci -n | awk '{print $3}')\" -- \"$cur\" ))\r\n}\r\n_pgids () \r\n{ \r\n    COMPREPLY=($( compgen -W '$( command ps axo pgid= )' -- \"$cur\" ))\r\n}\r\n_pids () \r\n{ \r\n    COMPREPLY=($( compgen -W '$( command ps axo pid= )' -- \"$cur\" ))\r\n}\r\n_pnames () \r\n{ \r\n    COMPREPLY=($( compgen -X '\u003cdefunct\u003e' -W '$( command ps axo command= | \\\r\n        sed -e \"s/ .*//\" -e \"s:.*/::\" -e \"s/:$//\" -e \"s/^[[(-]//\" \\\r\n            -e \"s/[])]$//\" | sort -u )' -- \"$cur\" ))\r\n}\r\n_poff () \r\n{ \r\n    local prev cur conns;\r\n    [ -r /etc/ppp/peers/ ] || return 0;\r\n    COMPREPLY=();\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    conns=$(\\ls --color=none /etc/ppp/peers | egrep -v '(\\.bak|~)$');\r\n    if [[ \"$cur\" == -* ]]; then\r\n        COMPREPLY=($(compgen -W '-r -d -c -a -h -v' -- $cur));\r\n        return 0;\r\n    fi;\r\n    if [ $COMP_CWORD -eq 1 ] \u0026\u0026 [[ \"$cur\" != -* ]] || [[ \"$prev\" == -* ]]; then\r\n        COMPREPLY=($(compgen -o filenames -W \"$conns\" $cur));\r\n    fi;\r\n    return 0\r\n}\r\n_pon () \r\n{ \r\n    local cur conns;\r\n    [ -r /etc/ppp/peers/ ] || return 0;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    conns=$(\\ls --color=none /etc/ppp/peers | egrep -v '(\\.bak|~)$');\r\n    if [ $COMP_CWORD -eq 1 ]; then\r\n        COMPREPLY=($(compgen -o filenames -W \"$conns\" $cur));\r\n    fi;\r\n    return 0\r\n}\r\n_pygmentize () \r\n{ \r\n    local cur prev;\r\n    COMPREPLY=();\r\n    cur=`_get_cword`;\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    case \"$prev\" in \r\n        -f)\r\n            FORMATTERS=`pygmentize -L formatters | grep '* ' | cut -c3- | sed -e 's/,//g' -e 's/:$//'`;\r\n            COMPREPLY=($( compgen -W '$FORMATTERS' -- \"$cur\" ));\r\n            return 0\r\n        ;;\r\n        -l)\r\n            LEXERS=`pygmentize -L lexers | grep '* ' | cut -c3- | sed -e 's/,//g' -e 's/:$//'`;\r\n            COMPREPLY=($( compgen -W '$LEXERS' -- \"$cur\" ));\r\n            return 0\r\n        ;;\r\n        -S)\r\n            STYLES=`pygmentize -L styles | grep '* ' | cut -c3- | sed s/:$//`;\r\n            COMPREPLY=($( compgen -W '$STYLES' -- \"$cur\" ));\r\n            return 0\r\n        ;;\r\n    esac;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        COMPREPLY=($( compgen -W '-f -l -S -L -g -O -P -F \\\r\n                                   -N -H -h -V -o' -- \"$cur\" ));\r\n        return 0;\r\n    fi\r\n}\r\n_quote_readline_by_ref () \r\n{ \r\n    if [[ $1 == \\'* ]]; then\r\n        printf -v $2 %s \"${1:1}\";\r\n    else\r\n        printf -v $2 %q \"$1\";\r\n    fi;\r\n    [[ ${!2} == \\$* ]] \u0026\u0026 eval $2=${!2}\r\n}\r\n_rake () \r\n{ \r\n    local cur prev rakef i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    rakef=\"Rakefile\";\r\n    if [[ \"$prev\" == \"-f\" ]]; then\r\n        _filedir;\r\n        return 0;\r\n    fi;\r\n    if [[ \"$cur\" == *=* ]]; then\r\n        prev=${cur/=*/};\r\n        cur=${cur/*=/};\r\n        if [[ \"$prev\" == \"--rakefile=\" ]]; then\r\n            _filedir -o nospace;\r\n            return 0;\r\n        fi;\r\n    fi;\r\n    if [[ \"$cur\" == -* ]]; then\r\n        COMPREPLY=($( compgen -W '-n -H -I -N -P -q -f\\\r\n            -r -s -T -t -h -v -V\\\r\n            --dry-run --help '--libdir=' --nosearch --prereqs --quiet\\\r\n            '--rakefile=' '--require=' --silent --tasks --trace --usage\\\r\n            --verbose --version'            -- $cur ));\r\n    else\r\n        for ((i=0; i \u003c ${#COMP_WORDS[@]}; i++))\r\n        do\r\n            case \"${COMP_WORDS[i]}\" in \r\n                -f)\r\n  "
    ],
    [
      0.000028,
      "                  eval rakef=${COMP_WORDS[i+1]};\r\n                    break\r\n                ;;\r\n                --rakefile=* | --rakefile\\=*)\r\n                    eval rakef=${COMP_WORDS[i]/*=/};\r\n                    break\r\n                ;;\r\n            esac;\r\n        done;\r\n        [ ! -f $rakef ] \u0026\u0026 return 0;\r\n        COMPREPLY=($( rake -s -f \"$rakef\" -T |             awk -F ' ' '/^rake / { print $2 }' |             command grep \"^$cur\" ));\r\n    fi\r\n}\r\n_realcommand () \r\n{ \r\n    type -P \"$1\" \u003e /dev/null \u0026\u0026 { \r\n        if type -p realpath \u003e /dev/null; then\r\n            realpath \"$(type -P \"$1\")\";\r\n        else\r\n            if type -p greadlink \u003e /dev/null; then\r\n                greadlink -f \"$(type -P \"$1\")\";\r\n            else\r\n                if type -p readlink \u003e /dev/null; then\r\n                    readlink -f \"$(type -P \"$1\")\";\r\n                else\r\n                    type -P \"$1\";\r\n                fi;\r\n            fi;\r\n        fi\r\n    }\r\n}\r\n_redis-cli () \r\n{ \r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    opts='bgrewriteaof bgsave dbsize debug decr decrby del echo exists expire expireat flushall flushdb get getset incr incrby info keys lastsave lindex llen lpop lpush lrange lrem lset ltrim mget move mset msetnx ping randomkey rename renamenx rewriteaof rpop rpoplpush rpush sadd save scard sdiff sdiffstore select set setnx shutdown sinter sinterstore sismember slaveof smembers smove sort spop srandmember srem sunion sunionstore ttl type zadd zcard zincrby zrange zrangebyscore zrem zremrangebyscore zrevrange zscore';\r\n    if [ $COMP_CWORD -eq 1 ]; then\r\n        COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}));\r\n        return 0;\r\n    fi\r\n}\r\n_rl_enabled () \r\n{ \r\n    [[ \"$( bind -v )\" = *$1+([[:space:]])on* ]]\r\n}\r\n_root_command () \r\n{ \r\n    local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin;\r\n    local root_command=$1;\r\n    _command\r\n}\r\n_service () \r\n{ \r\n    local cur prev words cword;\r\n    _init_completion || return;\r\n    [[ $cword -gt 2 ]] \u0026\u0026 return 0;\r\n    if [[ $cword -eq 1 \u0026\u0026 $prev == ?(*/)service ]]; then\r\n        _services;\r\n        [[ -e /etc/mandrake-release ]] \u0026\u0026 _xinetd_services;\r\n    else\r\n        local sysvdirs;\r\n        _sysvdirs;\r\n        COMPREPLY=($( compgen -W '`sed -e \"y/|/ /\" \\\r\n            -ne \"s/^.*\\(U\\|msg_u\\)sage.*{\\(.*\\)}.*$/\\2/p\" \\\r\n            ${sysvdirs[0]}/${prev##*/} 2\u003e/dev/null` start stop' -- \"$cur\" ));\r\n    fi\r\n}\r\n_services () \r\n{ \r\n    local sysvdirs;\r\n    _sysvdirs;\r\n    local restore_nullglob=$(shopt -p nullglob);\r\n    shopt -s nullglob;\r\n    COMPREPLY=($( printf '%s\\n' ${sysvdirs[0]}/!($_backup_glob|functions) ));\r\n    $restore_nullglob;\r\n    COMPREPLY+=($( systemctl list-units --full --all 2\u003e/dev/null |         awk '$1 ~ /\\.service$/ { sub(\"\\\\.service$\", \"\", $1); print $1 }' ));\r\n    COMPREPLY=($( compgen -W '${COMPREPLY[@]#${sysvdirs[0]}/}' -- \"$cur\" ))\r\n}\r\n_shells () \r\n{ \r\n    local shell rest;\r\n    while read -r shell rest; do\r\n        [[ $shell == /* \u0026\u0026 $shell == \"$cur\"* ]] \u0026\u0026 COMPREPLY+=($shell);\r\n    done 2\u003e /dev/null \u003c /etc/shells\r\n}\r\n_signals () \r\n{ \r\n    local -a sigs=($( compgen -P \"$1\" -A signal \"SIG${cur#$1}\" ));\r\n    COMPREPLY+=(\"${sigs[@]/#${1}SIG/${1}}\")\r\n}\r\n_split_longopt () \r\n{ \r\n    if [[ \"$cur\" == --?*=* ]]; then\r\n        prev=\"${cur%%?(\\\\)=*}\";\r\n        cur=\"${cur#*=}\";\r\n        return 0;\r\n    fi;\r\n    return 1\r\n}\r\n_subdirectories () \r\n{ \r\n    COMPREPLY=($( cd $1 \u0026\u0026 compgen -d -- \"$cur\" ))\r\n}\r\n_svn () \r\n{ \r\n    local cur cmds cmdOpts pOpts mOpts rOpts qOpts nOpts optsParam opt;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    cmds='add blame annotate praise cat changelist cl checkout co cleanup';\r\n    cmds=\"$cmds commit ci copy cp delete remove rm diff export help import\";\r\n    cmds=\"$cmds info list ls lock log merge mergeinfo mkdir move mv rename\";\r\n    cmds=\"$cmds propdel pdel propedit pedit propget pget proplist plist\";\r\n    cmds=\"$cmds propset pset resolve resolved revert status switch unlock\";\r\n    cmds=\"$cmds update\";\r\n    local helpOpts='--help -h';\r\n    local specOpts=\"--version $helpOpts\";\r\n"
    ],
    [
      0.009227,
      "    optsParam=\"-r|--revision|--username|--password|--targets\";\r\n    optsParam=\"$optsParam|-x|--extensions|-m|--message|-F|--file\";\r\n    optsParam=\"$optsParam|--encoding|--diff-cmd|--diff3-cmd|--editor-cmd\";\r\n    optsParam=\"$optsParam|--old|--new|--config-dir|--config-option\";\r\n    optsParam=\"$optsParam|--native-eol|-l|--limit|-c|--change\";\r\n    optsParam=\"$optsParam|--depth|--set-depth|--with-revprop\";\r\n    optsParam=\"$optsParam|--changelist|--accept|--show-revs\";\r\n    local svnProps revProps allProps psCmds propCmds;\r\n    svnProps=\"svn:keywords svn:executable svn:needs-lock svn:externals\r\n\t          svn:ignore svn:eol-style svn:mime-type $SVN_BASH_FILE_PROPS\";\r\n    revProps=\"svn:author svn:log svn:date $SVN_BASH_REV_PROPS\";\r\n    allProps=($svnProps $revProps);\r\n    psCmds='propset|pset|ps';\r\n    propCmds=\"$psCmds|propget|pget|pg|propedit|pedit|pe|propdel|pdel|pd\";\r\n    local cmd= isPropCmd= isPsCmd= isHelpCmd= nExpectArgs= isCur= i=0;\r\n    local prev= help= prop= val= isRevProp= last='none' nargs=0 stat=;\r\n    local options= hasRevPropOpt= hasRevisionOpt= hasRelocateOpt=;\r\n    local acceptOpt= URL= hasReintegrateOpt=;\r\n    for opt in \"${COMP_WORDS[@]}\";\r\n    do\r\n        [[ -n $isCur ]] \u0026\u0026 stat=$last;\r\n        isCur=;\r\n        [[ $i -eq $COMP_CWORD ]] \u0026\u0026 isCur=1;\r\n        let i++;\r\n        [ $last = 'none' ] \u0026\u0026 { \r\n            last='first';\r\n            continue\r\n        };\r\n        if [[ $prev == @($optsParam) ]]; then\r\n            [[ $prev = '--accept' ]] \u0026\u0026 acceptOpt=$opt;\r\n            prev='';\r\n            last='skip';\r\n            continue;\r\n        fi;\r\n        if [[ $prev == @(\u003c|\u003e|\u003e\u003e|[12]\u003e|[12]\u003e\u003e) ]]; then\r\n            prev='';\r\n            last='skip';\r\n            continue;\r\n        fi;\r\n        prev=$opt;\r\n        if [[ ! -n $cmd \u0026\u0026 -n $opt \u0026\u0026 ( $opt != -* || $opt == @(${specOpts// /|}) ) ]]; then\r\n            cmd=$opt;\r\n            [[ $cmd == @($propCmds) ]] \u0026\u0026 isPropCmd=1;\r\n            [[ $cmd == @($psCmds) ]] \u0026\u0026 isPsCmd=1;\r\n            [[ $cmd == @(${helpOpts// /|}) ]] \u0026\u0026 cmd='help';\r\n            [[ $cmd = 'help' ]] \u0026\u0026 isHelpCmd=1;\r\n            if [[ -n $isHelpCmd \u0026\u0026 -n $cmd \u0026\u0026 $cmd != 'help' \u0026\u0026 ! -n $help ]]; then\r\n                help=$cmd;\r\n                cmd='help';\r\n            fi;\r\n            last='cmd';\r\n            continue;\r\n        fi;\r\n        if [[ -n $isHelpCmd \u0026\u0026 ! -n $help \u0026\u0026 -n $opt \u0026\u0026 $opt != -* ]]; then\r\n            help=$opt;\r\n            last='help';\r\n            continue;\r\n        fi;\r\n        if [[ -n $isPropCmd \u0026\u0026 ! -n $prop \u0026\u0026 -n $opt \u0026\u0026 $opt != -* ]]; then\r\n            prop=$opt;\r\n            [[ $prop == @(${revProps// /|}) ]] \u0026\u0026 isRevProp=1;\r\n            last='prop';\r\n            continue;\r\n        fi;\r\n        if [[ -n $isPsCmd \u0026\u0026 -n $prop \u0026\u0026 ! -n $val \u0026\u0026 $opt != -* ]]; then\r\n            val=$opt;\r\n            last='val';\r\n            continue;\r\n        fi;\r\n        if [[ $last != 'onlyarg' ]]; then\r\n            case $opt in \r\n                -r | --revision | --revision=*)\r\n                    hasRevisionOpt=1\r\n                ;;\r\n                --revprop)\r\n                    hasRevPropOpt=1;\r\n                    allProps=($revProps);\r\n                    nExpectArgs=1\r\n                ;;\r\n                -h | --help)\r\n                    isHelpCmd=1\r\n                ;;\r\n                -F | --file)\r\n                    val='-F'\r\n                ;;\r\n                --relocate)\r\n                    hasRelocateOpt=1\r\n                ;;\r\n                --reintegrate)\r\n                    hasReintegrateOpt=1\r\n                ;;\r\n            esac;\r\n            if [[ $opt = '--' \u0026\u0026 ! -n $isCur ]]; then\r\n                last='onlyarg';\r\n                continue;\r\n            fi;\r\n            if [[ $opt == -* ]]; then\r\n                [[ ! -n $isCur ]] \u0026\u0026 options=\"$options $opt \";\r\n                last='opt';\r\n                continue;\r\n            fi;\r\n        else\r\n            let nargs++;\r\n            continue;\r\n        fi;\r\n        if [[ $cmd = 'merge' \u0026\u0026 ! -n $URL ]]; then\r\n            URL=$opt;\r\n        fi;\r\n        last='arg';\r\n        let nargs++;\r\n    done;\r\n    [[ -n $stat"
    ],
    [
      0.000035,
      " ]] || stat=$last;\r\n    if [[ ! -n $cmd || $stat = 'cmd' ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds $specOpts\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ $stat = 'help' || ( -n $isHelpCmd \u0026\u0026 ! -n $help ) ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ $cmd = 'merge' || $cmd = 'mergeinfo' ]]; then\r\n        local here=$(_svn_info URL);\r\n        if [[ ! -n $URL \u0026\u0026 $stat = 'arg' ]]; then\r\n            if [[ \"$here\" == */branches/* ]]; then\r\n                COMPREPLY=($(compgen -W ${here/\\/branches\\/*/\\/trunk} -- $cur ));\r\n                return 0;\r\n            else\r\n                if [[ \"$here\" == */trunk* ]]; then\r\n                    COMPREPLY=($(compgen -W ${here/\\/trunk*/\\/branches\\/} -- $cur ));\r\n                    return 0;\r\n                else\r\n                    COMPREPLY=($(compgen -W $(_svn_info Root) -- $cur ));\r\n                    return 0;\r\n                fi;\r\n            fi;\r\n        else\r\n            if [[ $URL == */branches/* \u0026\u0026 $here == */trunk* \u0026\u0026 ! -n $hasReintegrateOpt \u0026\u0026 $cur = '' \u0026\u0026 $stat = 'arg' ]]; then\r\n                COMPREPLY=($(compgen -W '--reintegrate' -- $cur ));\r\n                return 0;\r\n            fi;\r\n        fi;\r\n    fi;\r\n    if [[ $stat = 'skip' ]]; then\r\n        local previous=${COMP_WORDS[COMP_CWORD-1]};\r\n        local values= dirs= beep= exes=;\r\n        [[ $previous = '--config-dir' ]] \u0026\u0026 dirs=1;\r\n        [[ $previous = --*-cmd ]] \u0026\u0026 exes=1;\r\n        [[ $previous = '--native-eol' ]] \u0026\u0026 values='LF CR CRLF';\r\n        [[ $previous = '--limit' ]] \u0026\u0026 values='0 1 2 3 4 5 6 7 8 9';\r\n        [[ $previous = '--revision' || $previous = '-r' ]] \u0026\u0026 values='HEAD BASE PREV COMMITTED 0 {';\r\n        [[ $previous = '--encoding' ]] \u0026\u0026 values=\"latin1 utf8 $SVN_BASH_ENCODINGS\";\r\n        [[ $previous = '--extensions' || $previous = '-x' ]] \u0026\u0026 values=\"--unified --ignore-space-change    \t\t        --ignore-all-space --ignore-eol-style\";\r\n        [[ $previous = '--depth' ]] \u0026\u0026 values='empty files immediates infinity';\r\n        [[ $previous = '--set-depth' ]] \u0026\u0026 values='empty exclude files immediates infinity';\r\n        [[ $previous = '--accept' ]] \u0026\u0026 { \r\n            if [[ $cmd = 'resolve' ]]; then\r\n                values='base working mine-full theirs-full';\r\n            else\r\n                values='postpone base mine-full theirs-full edit launch';\r\n            fi\r\n        };\r\n        [[ $previous = '--show-revs' ]] \u0026\u0026 values='merged eligible';\r\n        if [[ $previous = '--username' ]]; then\r\n            values=\"$SVN_BASH_USERNAME\";\r\n            if [[ $SVN_BASH_COMPL_EXT == *username* ]]; then\r\n                local file=;\r\n                for file in ~/.subversion/auth/svn.simple/*;\r\n                do\r\n                    if [ -r $file ]; then\r\n                        values=\"$values $(_svn_read_hashfile username \u003c $file)\";\r\n                    fi;\r\n                done;\r\n            fi;\r\n            [[ ! -n \"$values\" ]] \u0026\u0026 beep=1;\r\n        fi;\r\n        [[ $previous = '--password' ]] \u0026\u0026 beep=1;\r\n        [[ -n $values ]] \u0026\u0026 COMPREPLY=($( compgen -W \"$values\" -- $cur ));\r\n        [[ -n $dirs ]] \u0026\u0026 COMPREPLY=($( compgen -o dirnames -- $cur ));\r\n        [[ -n $exes ]] \u0026\u0026 COMPREPLY=($( compgen -c -- $cur ));\r\n        [[ -n $beep ]] \u0026\u0026 { \r\n            echo -en \"\\a\";\r\n            COMPREPLY=('')\r\n        };\r\n        return 0;\r\n    fi;\r\n    if [[ -n $isPropCmd \u0026\u0026 ( ! -n $prop || $stat = 'prop' ) \u0026\u0026 $cur != -* ]]; then\r\n        local choices=;\r\n        if [[ $cur == *:* ]]; then\r\n            local prefix=${cur%:*} suffix=${cur#*:} c=;\r\n            for c in ${allProps[@]};\r\n            do\r\n                [[ $c == $prefix:* ]] \u0026\u0026 choices=\"$choices ${c#*:}\";\r\n            done;\r\n            cur=$suffix;\r\n        else\r\n            COMPREPLY=($( compgen -W \"${allProps[*]}\" -- $cur ));\r\n            [ ${#COMPREPLY[@]} -eq 1 ] \u0026\u0026 return 0;\r\n            local seen= n=0 last= c=;\r\n            for c in ${allProps[@]%:*};\r\n            do\r\n                if [[ $c == $cur* \u0026\u0026 ( ! -n $seen || $c != @($seen) ) ]]; then\r\n                    let n++;\r\n    "
    ],
    [
      0.026389,
      "                last=$c;\r\n                    choices=\"$choices $c:\";\r\n                    if [[ -n $seen ]]; then\r\n                        seen=\"$seen|$c*\";\r\n                    else\r\n                        seen=\"$c*\";\r\n                    fi;\r\n                fi;\r\n            done;\r\n            [[ $n -eq 1 ]] \u0026\u0026 choices=\"$last:1 $last:2\";\r\n        fi;\r\n        COMPREPLY=($( compgen -W \"$choices\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ -n $isRevProp \u0026\u0026 ! -n $hasRevPropOpt ]]; then\r\n        COMPREPLY=($( compgen -W '--revprop' -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ -n $isRevProp \u0026\u0026 -n $hasRevPropOpt \u0026\u0026 ! -n $hasRevisionOpt ]]; then\r\n        COMPREPLY=($( compgen -W '--revision' -- $cur ));\r\n        return 0;\r\n    fi;\r\n    if [[ -n $isPsCmd \u0026\u0026 -n $prop \u0026\u0026 ( ! -n $val || $stat = 'val' ) ]]; then\r\n        local values=\"\\' --file\";\r\n        case $prop in \r\n            svn:keywords)\r\n                values=\"Id Rev URL Date Author Header \\' $SVN_BASH_KEYWORDS\"\r\n            ;;\r\n            svn:executable | svn:needs-lock)\r\n                values='\\\\*'\r\n            ;;\r\n            svn:eol-style)\r\n                values='native LF CR CRLF'\r\n            ;;\r\n            svn:mime-type)\r\n                values=\"text/ text/plain text/html text/xml text/rtf\r\n                       image/ image/png image/gif image/jpeg image/tiff\r\n                       audio/ audio/midi audio/mpeg\r\n                       video/ video/mpeg video/mp4\r\n                       application/ application/octet-stream\r\n                       $SVN_BASH_MIME_TYPE\"\r\n            ;;\r\n        esac;\r\n        COMPREPLY=($( compgen -W \"$values\" -- $cur ));\r\n        [[ -n ${COMPREPLY} ]] \u0026\u0026 return 0;\r\n    fi;\r\n    if [[ $cmd = 'resolve' \u0026\u0026 ! -n $acceptOpt ]]; then\r\n        COMPREPLY=($( compgen -W '--accept' -- $cur ));\r\n        return 0;\r\n    fi;\r\n    case $cmd in \r\n        merge)\r\n            nExpectArgs=3\r\n        ;;\r\n        mergeinfo)\r\n            nExpectArgs=1\r\n        ;;\r\n        copy | cp | move | mv | rename | ren | export | import)\r\n            nExpectArgs=2\r\n        ;;\r\n        switch | sw)\r\n            [[ ! -n $hasRelocateOpt ]] \u0026\u0026 nExpectArgs=2\r\n        ;;\r\n        help | h)\r\n            nExpectArgs=0\r\n        ;;\r\n        --version)\r\n            nExpectArgs=0\r\n        ;;\r\n    esac;\r\n    if [[ -n $nExpectArgs \u0026\u0026 $nargs -gt $nExpectArgs ]]; then\r\n        echo -en \"\\a\";\r\n        COMPREPLY=('');\r\n        return 0;\r\n    fi;\r\n    if [[ $cur != -* || $stat = 'onlyarg' ]]; then\r\n        if [[ $SVN_BASH_COMPL_EXT == *svnstatus* ]]; then\r\n            local status='svn status --non-interactive';\r\n            [[ $SVN_BASH_COMPL_EXT == *recurse* ]] || status=\"$status --non-recursive\";\r\n            [[ $SVN_BASH_COMPL_EXT == *externals* ]] || status=\"$status --ignore-externals\";\r\n            local cs= files=;\r\n            [[ -n $cur ]] \u0026\u0026 cs=$cur*;\r\n            case $cmd in \r\n                st*)\r\n                    files=$cur*\r\n                ;;\r\n                ci | commit | revert | di*)\r\n                    files=$($status $cs| _svn_grcut '@([MADR!]*| M*|_M*)')\r\n                ;;\r\n                add)\r\n                    files=$($status $cs| _svn_grcut '\\?*')\r\n                ;;\r\n                unlock)\r\n                    files=$($status $cs| _svn_grcut '@(??L*|?????[KOTB]*)')\r\n                ;;\r\n                resolve*)\r\n                    files=$($status $cs| _svn_grcut '@(?C*|C*)')\r\n                ;;\r\n                praise | blame | ann*)\r\n                    files=$( _svn_lls all $cur* )\r\n                ;;\r\n                p*)\r\n                    if [[ $cmd == @($propCmds) \u0026\u0026 $prop == @(svn:ignore|svn:externals) ]]; then\r\n                        files=$( _svn_lls dir . $cur* );\r\n                    else\r\n                        files=\"$( _svn_lls all $cur* )\r\n                                   $($status $cs | _svn_grcut 'A*' )\";\r\n                    fi\r\n                ;;\r\n                info)\r\n                    files=\"$( _svn_lls all $cur* )\r\n                               $($status $cs | _svn_grcut 'A*' )\"\r\n               "
    ],
    [
      0.000043,
      " ;;\r\n                remove | rm | del* | move | mv | rename)\r\n                    files=$( _svn_lls all $cur* )\r\n                ;;\r\n                mkdir)\r\n                    files=$( _svn_lls dir $cur* )\r\n                ;;\r\n                log | lock | up* | cl* | switch)\r\n                    files=$( _svn_lls all $cur* )\r\n                ;;\r\n                merge)\r\n                    files=$( _svn_lls all $cur* )\r\n                ;;\r\n                ls | list)\r\n                    files=$( _svn_lls all $cur* )\r\n                ;;\r\n                *)\r\n                    local fallback=1\r\n                ;;\r\n            esac;\r\n            if [[ $SVN_BASH_COMPL_EXT != *recurse* ]]; then\r\n                files=\"$files $( _svn_lls dir $cur* )\";\r\n            fi;\r\n            if [[ -n $files ]]; then\r\n                COMPREPLY=($( compgen -W \"$files\" -- $cur ));\r\n                [[ -n \"${COMPREPLY[*]}\" ]] || COMPREPLY=('');\r\n            else\r\n                if [[ ! -n $fallback ]]; then\r\n                    echo -en \"\\a\";\r\n                    COMPREPLY=('');\r\n                fi;\r\n            fi;\r\n        fi;\r\n        return 0;\r\n    fi;\r\n    pOpts=\"--username --password --no-auth-cache --non-interactive\";\r\n    mOpts=\"-m --message -F --file --encoding --force-log --with-revprop\";\r\n    rOpts=\"-r --revision\";\r\n    qOpts=\"-q --quiet\";\r\n    nOpts=\"-N --non-recursive --depth\";\r\n    gOpts=\"-g --use-merge-history\";\r\n    cmdOpts=;\r\n    case $cmd in \r\n        --version)\r\n            cmdOpts=\"$qOpts\"\r\n        ;;\r\n        add)\r\n            cmdOpts=\"--auto-props --no-auto-props --force --targets \t\t         --no-ignore --parents $nOpts $qOpts $pOpts\"\r\n        ;;\r\n        blame | annotate | ann | praise)\r\n            cmdOpts=\"$rOpts $pOpts -v --verbose --incremental --xml \t\t         -x --extensions --force $gOpts\"\r\n        ;;\r\n        cat)\r\n            cmdOpts=\"$rOpts $pOpts\"\r\n        ;;\r\n        changelist | cl)\r\n            cmdOpts=\"--targets $pOpts $qOpts --changelist                          -R --recursive --depth --remove\"\r\n        ;;\r\n        checkout | co)\r\n            cmdOpts=\"$rOpts $qOpts $nOpts $pOpts --ignore-externals                          --force --accept\"\r\n        ;;\r\n        cleanup)\r\n            cmdOpts=\"--diff3-cmd $pOpts\"\r\n        ;;\r\n        commit | ci)\r\n            cmdOpts=\"$mOpts $qOpts $nOpts --targets --editor-cmd $pOpts \t\t         --no-unlock --changelist --keep-changelists\"\r\n        ;;\r\n        copy | cp)\r\n            cmdOpts=\"$mOpts $rOpts $qOpts --editor-cmd $pOpts --parents\"\r\n        ;;\r\n        delete | del | remove | rm)\r\n            cmdOpts=\"--force $mOpts $qOpts --targets --editor-cmd $pOpts                          --keep-local\"\r\n        ;;\r\n        diff | di)\r\n            cmdOpts=\"$rOpts -x --extensions --diff-cmd --no-diff-deleted \t\t         $nOpts $pOpts --force --old --new --notice-ancestry \t\t         -c --change --summarize --changelist --xml\"\r\n        ;;\r\n        export)\r\n            cmdOpts=\"$rOpts $qOpts $pOpts $nOpts --force --native-eol                          --ignore-externals\"\r\n        ;;\r\n        help | h | \\?)\r\n            cmdOpts=\r\n        ;;\r\n        import)\r\n            cmdOpts=\"--auto-props --no-auto-props $mOpts $qOpts $nOpts \t\t         --no-ignore --editor-cmd $pOpts --force\"\r\n        ;;\r\n        info)\r\n            cmdOpts=\"$pOpts $rOpts --targets -R --recursive --depth                          --incremental --xml --changelist\"\r\n        ;;\r\n        list | ls)\r\n            cmdOpts=\"$rOpts -v --verbose -R --recursive $pOpts                          --incremental --xml --depth\"\r\n        ;;\r\n        lock)\r\n            cmdOpts=\"-m --message -F --file --encoding --force-log                          --targets --force $pOpts\"\r\n        ;;\r\n        log)\r\n            cmdOpts=\"$rOpts -v --verbose --targets $pOpts --stop-on-copy \t\t         --incremental --xml $qOpts -l --limit -c --change                          $gOpts --with-all-revprops --with-revprop\"\r\n        ;;\r\n        merge)\r\n            cmdOpts=\"$rOpts $nOpts $qOpts --force --dry-run --diff3-cmd \t\t         $pOpts --ignore-ancest"
    ],
    [
      0.000024,
      "ry -c --change -x --extensions                          --record-only --accept --reintegrate\"\r\n        ;;\r\n        mergeinfo)\r\n            cmdOpts=\"$rOpts $pOpts --show-revs\"\r\n        ;;\r\n        mkdir)\r\n            cmdOpts=\"$mOpts $qOpts --editor-cmd $pOpts --parents\"\r\n        ;;\r\n        move | mv | rename | ren)\r\n            cmdOpts=\"$mOpts $rOpts $qOpts --force --editor-cmd $pOpts                          --parents\"\r\n        ;;\r\n        propdel | pdel | pd)\r\n            cmdOpts=\"$qOpts -R --recursive $rOpts $pOpts --changelist                          --depth\";\r\n            [[ -n $isRevProp || ! -n $prop ]] \u0026\u0026 cmdOpts=\"$cmdOpts --revprop\"\r\n        ;;\r\n        propedit | pedit | pe)\r\n            cmdOpts=\"--editor-cmd $pOpts $mOpts --force\";\r\n            [[ -n $isRevProp || ! -n $prop ]] \u0026\u0026 cmdOpts=\"$cmdOpts --revprop $rOpts\"\r\n        ;;\r\n        propget | pget | pg)\r\n            cmdOpts=\"-v --verbose -R --recursive $rOpts --strict $pOpts --changelist                          --depth --xml\";\r\n            [[ -n $isRevProp || ! -n $prop ]] \u0026\u0026 cmdOpts=\"$cmdOpts --revprop\"\r\n        ;;\r\n        proplist | plist | pl)\r\n            cmdOpts=\"-v --verbose -R --recursive $rOpts --revprop $qOpts \t\t         $pOpts --changelist --depth --xml\"\r\n        ;;\r\n        propset | pset | ps)\r\n            cmdOpts=\"$qOpts --targets -R --recursive \t\t         --encoding $pOpts --force --changelist --depth\";\r\n            [[ -n $isRevProp || ! -n $prop ]] \u0026\u0026 cmdOpts=\"$cmdOpts --revprop $rOpts\";\r\n            [[ -n $val ]] || cmdOpts=\"$cmdOpts -F --file\"\r\n        ;;\r\n        resolve)\r\n"
    ],
    [
      0.032228,
      "            cmdOpts=\"--targets -R --recursive $qOpts $pOpts --accept                          --depth\"\r\n        ;;\r\n        resolved)\r\n            cmdOpts=\"--targets -R --recursive $qOpts $pOpts --depth\"\r\n        ;;\r\n        revert)\r\n            cmdOpts=\"--targets -R --recursive $qOpts --changelist                          --depth $pOpts\"\r\n        ;;\r\n        status | stat | st)\r\n            cmdOpts=\"-u --show-updates -v --verbose $nOpts $qOpts $pOpts \t\t         --no-ignore --ignore-externals --incremental --xml                          --changelist\"\r\n        ;;\r\n        switch | sw)\r\n            cmdOpts=\"--relocate $rOpts $nOpts $qOpts $pOpts --diff3-cmd                          --force --accept --ignore-externals --set-depth\"\r\n        ;;\r\n        unlock)\r\n            cmdOpts=\"--targets --force $pOpts\"\r\n        ;;\r\n        update | up)\r\n            cmdOpts=\"$rOpts $nOpts $qOpts $pOpts --diff3-cmd                          --ignore-externals --force --accept --changelist                          --editor-cmd --set-depth\"\r\n        ;;\r\n        *)\r\n\r\n        ;;\r\n    esac;\r\n    [[ \"$cmd\" != \"--version\" ]] \u0026\u0026 cmdOpts=\"$cmdOpts $helpOpts\";\r\n    cmdOpts=\"$cmdOpts --config-dir --config-option\";\r\n    if [[ $acceptOpt == @(edit|launch) ]]; then\r\n        cmdOpts=${cmdOpts/ --non-interactive / };\r\n    fi;\r\n    for opt in $options;\r\n    do\r\n        local optBase;\r\n        case $opt in \r\n            --*)\r\n                optBase=${opt/=*/}\r\n            ;;\r\n            -*)\r\n                optBase=${opt:0:2}\r\n            ;;\r\n        esac;\r\n        cmdOpts=\" $cmdOpts \";\r\n        cmdOpts=${cmdOpts/ ${optBase} / };\r\n        case $optBase in \r\n            -v)\r\n                cmdOpts=${cmdOpts/ --verbose / }\r\n            ;;\r\n            --verbose)\r\n                cmdOpts=${cmdOpts/ -v / }\r\n            ;;\r\n            -N)\r\n                cmdOpts=${cmdOpts/ --non-recursive / }\r\n            ;;\r\n            --non-recursive)\r\n                cmdOpts=${cmdOpts/ -N / }\r\n            ;;\r\n            -R)\r\n                cmdOpts=${cmdOpts/ --recursive / }\r\n            ;;\r\n            --recursive)\r\n                cmdOpts=${cmdOpts/ -R / }\r\n            ;;\r\n            -x)\r\n                cmdOpts=${cmdOpts/ --extensions / }\r\n            ;;\r\n            --extensions)\r\n                cmdOpts=${cmdOpts/ -x / }\r\n            ;;\r\n            -q)\r\n                cmdOpts=${cmdOpts/ --quiet / }\r\n            ;;\r\n            --quiet)\r\n                cmdOpts=${cmdOpts/ -q / }\r\n            ;;\r\n            -h)\r\n                cmdOpts=${cmdOpts/ --help / }\r\n            ;;\r\n            --help)\r\n                cmdOpts=${cmdOpts/ -h / }\r\n            ;;\r\n            -l)\r\n                cmdOpts=${cmdOpts/ --limit / }\r\n            ;;\r\n            --limit)\r\n                cmdOpts=${cmdOpts/ -l / }\r\n            ;;\r\n            -r)\r\n                cmdOpts=${cmdOpts/ --revision / }\r\n            ;;\r\n            --revision)\r\n                cmdOpts=${cmdOpts/ -r / }\r\n            ;;\r\n            -c)\r\n                cmdOpts=${cmdOpts/ --change / }\r\n            ;;\r\n            --change)\r\n                cmdOpts=${cmdOpts/ -c / }\r\n            ;;\r\n            --auto-props)\r\n                cmdOpts=${cmdOpts/ --no-auto-props / }\r\n            ;;\r\n            --no-auto-props)\r\n                cmdOpts=${cmdOpts/ --auto-props / }\r\n            ;;\r\n            -g)\r\n                cmdOpts=${cmdOpts/ --use-merge-history / }\r\n            ;;\r\n            --use-merge-history)\r\n                cmdOpts=${cmdOpts/ -g / }\r\n            ;;\r\n            -m | --message | -F | --file)\r\n                cmdOpts=${cmdOpts/ --message / };\r\n                cmdOpts=${cmdOpts/ -m / };\r\n                cmdOpts=${cmdOpts/ --file / };\r\n                cmdOpts=${cmdOpts/ -F / }\r\n            ;;\r\n        esac;\r\n        if [ $isHelpCmd ]; then\r\n            cmdOpts=${cmdOpts/ -h / };\r\n            cmdOpts=${cmdOpts/ --help / };\r\n        fi;\r\n    done;\r\n    COMPREPLY=($( compgen -W \"$cmdOpts\" -- $cur ));\r\n    return 0\r\n}\r\n_svn_grcut () \r\n{ \r\n    local re=$1 line= old_IFS;\r\n    old_IFS=\"$IFS\";\r\n    IFS='\r\n';"
    ],
    [
      0.000038,
      "\r\n    while read -r line; do\r\n        [[ ! -n $re || $line == $re ]] \u0026\u0026 echo \"${line/????????/}\";\r\n    done;\r\n    IFS=\"$old_IFS\"\r\n}\r\n_svn_info () \r\n{ \r\n    local what=$1 line=;\r\n    LANG=C LC_MESSAGES=C svn info --non-interactive 2\u003e /dev/null | while read line; do\r\n        [[ $line == *\"$what: \"* ]] \u0026\u0026 echo ${line#*: };\r\n    done\r\n}\r\n_svn_lls () \r\n{ \r\n    local opt=$1 f=;\r\n    shift;\r\n    for f in \"$@\";\r\n    do\r\n        if [[ $opt == @(dir|all) \u0026\u0026 -d \"$f\" ]]; then\r\n            echo \"$f/\";\r\n        else\r\n            if [[ $opt == @(file|all) ]]; then\r\n                local dn= fn=\"$f\";\r\n                [[ \"$f\" == */* ]] \u0026\u0026 dn=${f%\\/*}/ fn=${f##*\\/};\r\n                [ -f \"${dn}.svn/text-base/${fn}.svn-base\" ] \u0026\u0026 echo \"$f\";\r\n            fi;\r\n        fi;\r\n    done\r\n}\r\n_svn_read_hashfile () \r\n{ \r\n    local tkey=$1 key= val=;\r\n    while true; do\r\n        read tag len;\r\n        [ $tag = 'END' ] \u0026\u0026 break;\r\n        [ $tag != 'K' ] \u0026\u0026 { \r\n            return\r\n        };\r\n        read -r -n $len key;\r\n        read;\r\n        read tag len;\r\n        [ $tag != 'V' ] \u0026\u0026 { \r\n            return\r\n        };\r\n        read -r -n $len val;\r\n        read;\r\n        if [[ $key = $tkey ]]; then\r\n            echo \"$val\";\r\n            return;\r\n        fi;\r\n    done\r\n}\r\n_svnadmin () \r\n{ \r\n    local cur cmds cmdOpts optsParam opt helpCmds optBase i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    cmds='crashtest create deltify dump help hotcopy list-dblogs \\\r\n\t      list-unused-dblogs load lslocks lstxns pack recover rmlocks \\\r\n\t      rmtxns setlog setrevprop setuuid upgrade verify --version';\r\n    if [[ $COMP_CWORD -eq 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    optsParam=\"-r|--revision|--parent-dir|--fs-type\";\r\n    helpCmds='help|--help|h|\\?';\r\n    if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] \u0026\u0026 [[ \"$cur\" != -* ]] || [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]]; then\r\n        return 0;\r\n    fi;\r\n    cmdOpts=;\r\n    case ${COMP_WORDS[1]} in \r\n        create)\r\n            cmdOpts=\"--bdb-txn-nosync --bdb-log-keep --config-dir \t\t         --fs-type --pre-1.4-compatible --pre-1.5-compatible\"\r\n        ;;\r\n        deltify)\r\n            cmdOpts=\"-r --revision -q --quiet\"\r\n        ;;\r\n        dump)\r\n            cmdOpts=\"-r --revision --incremental -q --quiet --deltas\"\r\n        ;;\r\n        help | h | \\?)\r\n            cmdOpts=\"$cmds\"\r\n        ;;\r\n        hotcopy)\r\n            cmdOpts=\"--clean-logs\"\r\n        ;;\r\n        load)\r\n            cmdOpts=\"--ignore-uuid --force-uuid --parent-dir -q --quiet \t\t         --use-pre-commit-hook --use-post-commit-hook\"\r\n        ;;\r\n        recover)\r\n            cmdOpts=\"--wait\"\r\n        ;;\r\n        rmtxns)\r\n            cmdOpts=\"-q --quiet\"\r\n        ;;\r\n        setlog)\r\n            cmdOpts=\"-r --revision --bypass-hooks\"\r\n        ;;\r\n        setrevprop)\r\n            cmdOpts=\"-r --revision --use-pre-revprop-change-hook \t\t         --use-post-revprop-change-hook\"\r\n        ;;\r\n        verify)\r\n            cmdOpts=\"-r --revision -q --quiet\"\r\n        ;;\r\n        *)\r\n\r\n        ;;\r\n    esac;\r\n    cmdOpts=\"$cmdOpts --help -h\";\r\n    for ((i=2; i\u003c=$COMP_CWORD-1; ++i ))\r\n    do\r\n        opt=${COMP_WORDS[$i]};\r\n        case $opt in \r\n            --*)\r\n                optBase=${opt/=*/}\r\n            ;;\r\n            -*)\r\n                optBase=${opt:0:2}\r\n            ;;\r\n        esac;\r\n        cmdOpts=\" $cmdOpts \";\r\n        cmdOpts=${cmdOpts/ ${optBase} / };\r\n        case $optBase in \r\n            -q)\r\n                cmdOpts=${cmdOpts/ --quiet / }\r\n            ;;\r\n            --quiet)\r\n                cmdOpts=${cmdOpts/ -q / }\r\n            ;;\r\n            -h)\r\n                cmdOpts=${cmdOpts/ --help / }\r\n            ;;\r\n            --help)\r\n                cmdOpts=${cmdOpts/ -h / }\r\n            ;;\r\n            -r)\r\n                cmdOpts=${cmdOpts/ --revision / }\r\n            ;;\r\n            --revision)\r\n                cmdOpts=${cmdOpts/ -r / }\r\n            ;;\r\n        esac;\r\n        if [[ $opt == @($optsParam) ]]; then\r\n            ((++i));\r\n        fi;\r\n    done;\r\n   "
    ],
    [
      0.000048,
      " COMPREPLY=($( compgen -W \"$cmdOpts\" -- $cur ));\r\n    return 0\r\n}\r\n_svndumpfilter () \r\n{ \r\n    local cur cmds cmdOpts optsParam opt helpCmds optBase i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    cmds='exclude help include --version';\r\n    if [[ $COMP_CWORD -eq 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    optsParam=\"--targets\";\r\n    helpCmds='help|--help|h|\\?';\r\n    if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] \u0026\u0026 [[ \"$cur\" != -* ]] || [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]]; then\r\n        return 0;\r\n    fi;\r\n    cmdOpts=;\r\n    case ${COMP_WORDS[1]} in \r\n        exclude | include)\r\n            cmdOpts=\"--drop-empty-revs --renumber-revs\r\n\t\t         --skip-missing-merge-sources --targets\r\n\t\t         --preserve-revprops --quiet\"\r\n        ;;\r\n        help | h | \\?)\r\n            cmdOpts=\"$cmds\"\r\n        ;;\r\n        *)\r\n\r\n        ;;\r\n    esac;\r\n    cmdOpts=\"$cmdOpts --help -h\";\r\n    for ((i=2; i\u003c=$COMP_CWORD-1; ++i ))\r\n    do\r\n        opt=${COMP_WORDS[$i]};\r\n        case $opt in \r\n            --*)\r\n                optBase=${opt/=*/}\r\n            ;;\r\n            -*)\r\n                optBase=${opt:0:2}\r\n            ;;\r\n        esac;\r\n        cmdOpts=\" $cmdOpts \";\r\n        cmdOpts=${cmdOpts/ ${optBase} / };\r\n        case $optBase in \r\n            -h)\r\n                cmdOpts=${cmdOpts/ --help / }\r\n            ;;\r\n            --help)\r\n                cmdOpts=${cmdOpts/ -h / }\r\n            ;;\r\n        esac;\r\n        if [[ $opt == @($optsParam) ]]; then\r\n            ((++i));\r\n        fi;\r\n    done;\r\n    COMPREPLY=($( compgen -W \"$cmdOpts\" -- $cur ));\r\n    return 0\r\n}\r\n_svnlook () \r\n{ \r\n    local cur cmds cmdOpts optsParam opt helpCmds optBase i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    cmds='author cat changed date diff dirs-changed help history info \\\r\n\t      lock log propget proplist tree uuid youngest --version';\r\n    if [[ $COMP_CWORD -eq 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    optsParam=\"-r|--revision|-t|--transaction|-l|--limit|-x|--extensions\";\r\n    helpCmds='help|--help|h|\\?';\r\n    if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] \u0026\u0026 [[ \"$cur\" != -* ]] || [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]]; then\r\n        return 0;\r\n    fi;\r\n    cmdOpts=;\r\n    case ${COMP_WORDS[1]} in \r\n        author)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        cat)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        changed)\r\n            cmdOpts=\"-r --revision -t --transaction --copy-info\"\r\n        ;;\r\n        date)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        diff)\r\n            cmdOpts=\"-r --revision -t --transaction --diff-copy-from \t\t         --no-diff-added --no-diff-deleted -x --extensions\"\r\n        ;;\r\n        dirs-changed)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        help | h | \\?)\r\n            cmdOpts=\"$cmds\"\r\n        ;;\r\n        history)\r\n            cmdOpts=\"-r --revision -l --limit --show-ids\"\r\n        ;;\r\n        info)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        lock)\r\n            cmdOpts=\r\n        ;;\r\n        log)\r\n            cmdOpts=\"-r --revision -t --transaction\"\r\n        ;;\r\n        propget | pget | pg)\r\n            cmdOpts=\"-r --revision -t --transaction --revprop\"\r\n        ;;\r\n        proplist | plist | pl)\r\n            cmdOpts=\"-r --revision -t --transaction --revprop -v --verbose --xml\"\r\n        ;;\r\n        tree)\r\n            cmdOpts=\"-r --revision -t --transaction --full-paths -N --non-recursive --show-ids\"\r\n        ;;\r\n        uuid)\r\n            cmdOpts=\r\n        ;;\r\n        youngest)\r\n            cmdOpts=\r\n        ;;\r\n        *)\r\n\r\n        ;;\r\n    esac;\r\n    cmdOpts=\"$cmdOpts --help -h\";\r\n    for ((i=2; i\u003c=$COMP_CWORD-1; ++i ))\r\n    do\r\n        opt=${COMP_WORDS[$i]};\r\n        case $opt in \r\n            --*)\r\n                optBase=${opt/=*/}\r\n            ;;\r\n            -*)\r\n                optBase=${opt:0:2}\r\n            ;;\r\n    "
    ],
    [
      0.034184,
      "    esac;\r\n        cmdOpts=\" $cmdOpts \";\r\n        cmdOpts=${cmdOpts/ ${optBase} / };\r\n        case $optBase in \r\n            -N)\r\n                cmdOpts=${cmdOpts/ --non-recursive / }\r\n            ;;\r\n            --non-recursive)\r\n                cmdOpts=${cmdOpts/ -N / }\r\n            ;;\r\n            -h)\r\n                cmdOpts=${cmdOpts/ --help / }\r\n            ;;\r\n            --help)\r\n                cmdOpts=${cmdOpts/ -h / }\r\n            ;;\r\n            -l)\r\n                cmdOpts=${cmdOpts/ --limit / }\r\n            ;;\r\n            --limit)\r\n                cmdOpts=${cmdOpts/ -l / }\r\n            ;;\r\n            -r)\r\n                cmdOpts=${cmdOpts/ --revision / }\r\n            ;;\r\n            --revision)\r\n                cmdOpts=${cmdOpts/ -r / }\r\n            ;;\r\n            -t)\r\n                cmdOpts=${cmdOpts/ --transaction / }\r\n            ;;\r\n            --transaction)\r\n                cmdOpts=${cmdOpts/ -t / }\r\n            ;;\r\n            -v)\r\n                cmdOpts=${cmdOpts/ --verbose / }\r\n            ;;\r\n            --verbose)\r\n                cmdOpts=${cmdOpts/ -v / }\r\n            ;;\r\n            -x)\r\n                cmdOpts=${cmdOpts/ --extensions / }\r\n            ;;\r\n            --extensions)\r\n                cmdOpts=${cmdOpts/ -x / }\r\n            ;;\r\n        esac;\r\n        if [[ $opt == @($optsParam) ]]; then\r\n            ((++i));\r\n        fi;\r\n    done;\r\n    COMPREPLY=($( compgen -W \"$cmdOpts\" -- $cur ));\r\n    return 0\r\n}\r\n_svnsync () \r\n{ \r\n    local cur cmds cmdOpts optsParam opt helpCmds optBase i;\r\n    COMPREPLY=();\r\n    cur=${COMP_WORDS[COMP_CWORD]};\r\n    cmds='copy-revprops help info initialize synchronize --version';\r\n    if [[ $COMP_CWORD -eq 1 ]]; then\r\n        COMPREPLY=($( compgen -W \"$cmds\" -- $cur ));\r\n        return 0;\r\n    fi;\r\n    optsParam=\"--config-dir|--config-option|--source-username|--source-password\";\r\n    optsParam=\"$optsParam|--sync-username|--sync-password\";\r\n    helpCmds='help|--help|h|\\?';\r\n    if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] \u0026\u0026 [[ \"$cur\" != -* ]] || [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]]; then\r\n        return 0;\r\n    fi;\r\n    cmdOpts=;\r\n    case ${COMP_WORDS[1]} in \r\n        copy-revprops | initialize | init | synchronize | sync)\r\n            cmdOpts=\"--non-interactive --no-auth-cache --trust-server-cert \t\t         --source-username --source-password --sync-username \t\t         --sync-password --config-dir --config-option -q --quiet\"\r\n        ;;\r\n        help | h | \\?)\r\n            cmdOpts=\"$cmds\"\r\n        ;;\r\n        info)\r\n            cmdOpts=\"--non-interactive --no-auth-cache --trust-server-cert \t\t         --source-username --source-password --sync-username \t\t         --sync-password --config-dir --config-option\"\r\n        ;;\r\n        *)\r\n\r\n        ;;\r\n    esac;\r\n    cmdOpts=\"$cmdOpts --help -h\";\r\n    for ((i=2; i\u003c=$COMP_CWORD-1; ++i ))\r\n    do\r\n        opt=${COMP_WORDS[$i]};\r\n        case $opt in \r\n            --*)\r\n                optBase=${opt/=*/}\r\n            ;;\r\n            -*)\r\n                optBase=${opt:0:2}\r\n            ;;\r\n        esac;\r\n        cmdOpts=\" $cmdOpts \";\r\n        cmdOpts=${cmdOpts/ ${optBase} / };\r\n        case $optBase in \r\n            -h)\r\n                cmdOpts=${cmdOpts/ --help / }\r\n            ;;\r\n            --help)\r\n                cmdOpts=${cmdOpts/ -h / }\r\n            ;;\r\n            -q)\r\n                cmdOpts=${cmdOpts/ --quiet / }\r\n            ;;\r\n            --quiet)\r\n                cmdOpts=${cmdOpts/ -q / }\r\n            ;;\r\n        esac;\r\n        if [[ $opt == @($optsParam) ]]; then\r\n            ((++i));\r\n        fi;\r\n    done;\r\n    COMPREPLY=($( compgen -W \"$cmdOpts\" -- $cur ));\r\n    return 0\r\n}\r\n_sysvdirs () \r\n{ \r\n    sysvdirs=();\r\n    [[ -d /etc/rc.d/init.d ]] \u0026\u0026 sysvdirs+=(/etc/rc.d/init.d);\r\n    [[ -d /etc/init.d ]] \u0026\u0026 sysvdirs+=(/etc/init.d);\r\n    [[ -f /etc/slackware-version ]] \u0026\u0026 sysvdirs=(/etc/rc.d)\r\n}\r\n_terms () \r\n{ \r\n    COMPREPLY+=($( compgen -W         \"$( sed -ne 's/^\\([^[:space:]#|]\\{2,\\}\\)|.*/\\1/p' /etc/termcap             2\u003e/dev/null )\" -- \"$cur\" ));\r\n    COMPREPLY+=($( compgen -W \"$( { to"
    ],
    [
      0.000027,
      "e -a 2\u003e/dev/null || toe 2\u003e/dev/null; }         | awk '{ print $1 }' | sort -u )\" -- \"$cur\" ))\r\n}\r\n_tilde () \r\n{ \r\n    local result=0;\r\n    if [[ $1 == \\~* \u0026\u0026 $1 != */* ]]; then\r\n        COMPREPLY=($( compgen -P '~' -u \"${1#\\~}\" ));\r\n        result=${#COMPREPLY[@]};\r\n        [[ $result -gt 0 ]] \u0026\u0026 compopt -o filenames 2\u003e /dev/null;\r\n    fi;\r\n    return $result\r\n}\r\n_uids () \r\n{ \r\n    if type getent \u0026\u003e/dev/null; then\r\n        COMPREPLY=($( compgen -W '$( getent passwd | cut -d: -f3 )' -- \"$cur\" ));\r\n    else\r\n        if type perl \u0026\u003e/dev/null; then\r\n            COMPREPLY=($( compgen -W '$( perl -e '\"'\"'while (($uid) = (getpwent)[2]) { print $uid . \"\\n\" }'\"'\"' )' -- \"$cur\" ));\r\n        else\r\n            COMPREPLY=($( compgen -W '$( cut -d: -f3 /etc/passwd )' -- \"$cur\" ));\r\n        fi;\r\n    fi\r\n}\r\n_update_initramfs () \r\n{ \r\n    local cur prev valid_options;\r\n    cur=$(_get_cword);\r\n    prev=${COMP_WORDS[COMP_CWORD-1]};\r\n    if [[ \"$prev\" == '-k' ]]; then\r\n        _kernel_versions;\r\n        COMPREPLY=($( compgen -W '${COMPREPLY[@]} all' -- \"$cur\" ));\r\n        return;\r\n    fi;\r\n    valid_options=$( update-initramfs -h 2\u003e\u00261 | \t\tsed -e '/^ -/!d;s/^ \\(-\\w\\+\\).*/\\1/' );\r\n    COMPREPLY=($( compgen -W \"$valid_options\" -- $cur ))\r\n}\r\n_upvar () \r\n{ \r\n    if unset -v \"$1\"; then\r\n        if (( $# == 2 )); then\r\n            eval $1=\\\"\\$2\\\";\r\n        else\r\n            eval $1=\\(\\\"\\${@:2}\\\"\\);\r\n        fi;\r\n    fi\r\n}\r\n_upvars () \r\n{ \r\n    if ! (( $# )); then\r\n        echo \"${FUNCNAME[0]}: usage: ${FUNCNAME[0]} [-v varname\" \"value] | [-aN varname [value ...]] ...\" 1\u003e\u00262;\r\n        return 2;\r\n    fi;\r\n    while (( $# )); do\r\n        case $1 in \r\n            -a*)\r\n                [[ -n ${1#-a} ]] || { \r\n                    echo \"bash: ${FUNCNAME[0]}: \\`$1': missing\" \"number specifier\" 1\u003e\u00262;\r\n                    return 1\r\n                };\r\n                printf %d \"${1#-a}\" \u0026\u003e/dev/null || { \r\n                    echo \"bash:\" \"${FUNCNAME[0]}: \\`$1': invalid number specifier\" 1\u003e\u00262;\r\n                    return 1\r\n                };\r\n                [[ -n \"$2\" ]] \u0026\u0026 unset -v \"$2\" \u0026\u0026 eval $2=\\(\\\"\\${@:3:${1#-a}}\\\"\\) \u0026\u0026 shift $((${1#-a} + 2)) || { \r\n                    echo \"bash: ${FUNCNAME[0]}:\" \"\\`$1${2+ }$2': missing argument(s)\" 1\u003e\u00262;\r\n                    return 1\r\n                }\r\n            ;;\r\n            -v)\r\n                [[ -n \"$2\" ]] \u0026\u0026 unset -v \"$2\" \u0026\u0026 eval $2=\\\"\\$3\\\" \u0026\u0026 shift 3 || { \r\n                    echo \"bash: ${FUNCNAME[0]}: $1: missing\" \"argument(s)\" 1\u003e\u00262;\r\n                    return 1\r\n                }\r\n            ;;\r\n            *)\r\n                echo \"bash: ${FUNCNAME[0]}: $1: invalid option\" 1\u003e\u00262;\r\n                return 1\r\n            ;;\r\n        esac;\r\n    done\r\n}\r\n_usb_ids () \r\n{ \r\n    COMPREPLY+=($( compgen -W         \"$( PATH=\"$PATH:/sbin\" lsusb | awk '{print $6}' )\" -- \"$cur\" ))\r\n}\r\n_user_at_host () \r\n{ \r\n    local cur prev words cword;\r\n    _init_completion -n : || return;\r\n    if [[ $cur == *@* ]]; then\r\n        _known_hosts_real \"$cur\";\r\n    else\r\n        COMPREPLY=($( compgen -u -- \"$cur\" ));\r\n    fi;\r\n    return 0\r\n}\r\n_usergroup () \r\n{ \r\n    if [[ $cur = *\\\\\\\\* || $cur = *:*:* ]]; then\r\n        return;\r\n    else\r\n        if [[ $cur = *\\\\:* ]]; then\r\n            local prefix;\r\n            prefix=${cur%%*([^:])};\r\n            prefix=${prefix//\\\\};\r\n            local mycur=\"${cur#*[:]}\";\r\n            if [[ $1 == -u ]]; then\r\n                _allowed_groups \"$mycur\";\r\n            else\r\n                local IFS='\r\n';\r\n                COMPREPLY=($( compgen -g -- \"$mycur\" ));\r\n            fi;\r\n            COMPREPLY=($( compgen -P \"$prefix\" -W \"${COMPREPLY[@]}\" ));\r\n        else\r\n            if [[ $cur = *:* ]]; then\r\n                local mycur=\"${cur#*:}\";\r\n                if [[ $1 == -u ]]; then\r\n                    _allowed_groups \"$mycur\";\r\n                else\r\n                    local IFS='\r\n';\r\n                    COMPREPLY=($( compgen -g -- \"$mycur\" ));\r\n                fi;\r\n            else\r\n                if [[ $1 == -u ]]; then\r\n                    _allowed_users \"$cur\";\r\n                else\r\n    "
    ],
    [
      0.000112,
      "                local IFS='\r\n';\r\n                    COMPREPLY=($( compgen -u -- \"$cur\" ));\r\n                fi;\r\n            fi;\r\n        fi;\r\n    fi\r\n}\r\n_userland () \r\n{ \r\n    local userland=$( uname -s );\r\n    [[ $userland == @(Linux|GNU/*) ]] \u0026\u0026 userland=GNU;\r\n    [[ $userland == $1 ]]\r\n}\r\n_variables () \r\n{ \r\n    if [[ $cur =~ ^(\\$\\{?)([A-Za-z0-9_]*)$ ]]; then\r\n        [[ $cur == *{* ]] \u0026\u0026 local suffix=} || local suffix=;\r\n        COMPREPLY+=($( compgen -P ${BASH_REMATCH[1]} -S \"$suffix\" -v --             \"${BASH_REMATCH[2]}\" ));\r\n        return 0;\r\n    fi;\r\n    return 1\r\n}\r\n_xfunc () \r\n{ \r\n    set -- \"$@\";\r\n    local srcfile=$1;\r\n    shift;\r\n    declare -F $1 \u0026\u003e/dev/null || { \r\n        local compdir=./completions;\r\n        [[ $BASH_SOURCE == */* ]] \u0026\u0026 compdir=\"${BASH_SOURCE%/*}/completions\";\r\n        . \"$compdir/$srcfile\"\r\n    };\r\n    \"$@\"\r\n}\r\n_xinetd_services () \r\n{ \r\n    local xinetddir=/etc/xinetd.d;\r\n    if [[ -d $xinetddir ]]; then\r\n        local restore_nullglob=$(shopt -p nullglob);\r\n        shopt -s nullglob;\r\n        local -a svcs=($( printf '%s\\n' $xinetddir/!($_backup_glob) ));\r\n        $restore_nullglob;\r\n        COMPREPLY+=($( compgen -W '${svcs[@]#$xinetddir/}' -- \"$cur\" ));\r\n    fi\r\n}\r\ndequote () \r\n{ \r\n    eval printf %s \"$1\" 2\u003e /dev/null\r\n}\r\nquote () \r\n{ \r\n    local quoted=${1//\\'/\\'\\\\\\'\\'};\r\n    printf \"'%s'\" \"$quoted\"\r\n}\r\nquote_readline () \r\n{ \r\n    local quoted;\r\n    _quote_readline_by_ref \"$1\" ret;\r\n    printf %s \"$ret\"\r\n}\r\n\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.666985,
      "\r\n"
    ],
    [
      0.004484,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.145822,
      "\r\n"
    ],
    [
      0.004430,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.145553,
      "s"
    ],
    [
      0.090295,
      "e"
    ],
    [
      0.059979,
      "t"
    ],
    [
      0.124211,
      " "
    ],
    [
      0.448111,
      "|"
    ],
    [
      0.340791,
      " "
    ],
    [
      0.371005,
      "g"
    ],
    [
      0.072991,
      "r"
    ],
    [
      0.046721,
      "e"
    ],
    [
      0.180357,
      "p"
    ],
    [
      0.174407,
      " "
    ],
    [
      1.801077,
      "M"
    ],
    [
      0.100251,
      "Y"
    ],
    [
      0.119374,
      "_"
    ],
    [
      0.270972,
      "N"
    ],
    [
      0.121052,
      "A"
    ],
    [
      0.059933,
      "M"
    ],
    [
      0.133297,
      "E"
    ],
    [
      0.428229,
      "\r\n"
    ],
    [
      0.002129,
      "MY_NAME='Oussama Elgoumri'"
    ],
    [
      0.000176,
      "\r\n"
    ],
    [
      0.014183,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.595450,
      "\r\n"
    ],
    [
      0.005847,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.153880,
      "\r\n"
    ],
    [
      0.005435,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.866756,
      "e"
    ],
    [
      0.080247,
      "n"
    ],
    [
      0.149599,
      "v"
    ],
    [
      0.154238,
      " "
    ],
    [
      0.648738,
      "M"
    ],
    [
      0.120287,
      "Y"
    ],
    [
      0.249969,
      "_"
    ],
    [
      0.331354,
      "N"
    ],
    [
      0.089766,
      "A"
    ],
    [
      0.090467,
      "M"
    ],
    [
      0.130456,
      "E"
    ],
    [
      0.573730,
      "\u0008"
    ],
    [
      0.500212,
      "\u0008"
    ],
    [
      0.030787,
      "\u0008"
    ],
    [
      0.030359,
      "\u0008"
    ],
    [
      0.030713,
      "\u0008"
    ],
    [
      0.030664,
      "\u0008"
    ],
    [
      0.030290,
      "\u0008"
    ],
    [
      0.029922,
      "\u0008"
    ],
    [
      0.618329,
      "\u001b[C MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      1.583955,
      "| MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.300785,
      "\u001b[C MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.240493,
      "H MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.120372,
      "R MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.059801,
      "E MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.331171,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.179412,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.171557,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.389827,
      "h MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.110533,
      "r MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.060089,
      "e MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.431869,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.180474,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.170456,
      "\u0008\u001b[1P MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.130259,
      "g MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.280883,
      "r MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.069655,
      "e MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.110572,
      "p MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.561995,
      "\r\n"
    ],
    [
      0.008810,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.682497,
      "\r\n"
    ],
    [
      0.008433,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.121249,
      "\r\n"
    ],
    [
      0.005720,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      1.538119,
      "b"
    ],
    [
      0.049660,
      "a"
    ],
    [
      0.080306,
      "s"
    ],
    [
      0.150292,
      "h"
    ],
    [
      0.371378,
      "\r\n"
    ],
    [
      0.136292,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.686239,
      "\r\n"
    ],
    [
      0.006932,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.142735,
      "\r\n"
    ],
    [
      0.005926,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.738329,
      "exit"
    ],
    [
      0.220248,
      "\u0008\u0008\u0008\u0008asciinema rec"
    ],
    [
      0.388950,
      "\u0008\u001b[K"
    ],
    [
      0.500084,
      "\u0008\u001b[K"
    ],
    [
      0.030719,
      "\u0008\u001b[K"
    ],
    [
      0.029504,
      "\u0008\u001b[K"
    ],
    [
      0.030401,
      "\u0008\u001b[K"
    ],
    [
      0.030254,
      "\u0008\u001b[K"
    ],
    [
      0.030039,
      "\u0008\u001b[K"
    ],
    [
      0.029847,
      "\u0008\u001b[K"
    ],
    [
      0.030818,
      "\u0008\u001b[K"
    ],
    [
      0.030588,
      "\u0008\u001b[K"
    ],
    [
      0.030778,
      "\u0008\u001b[K"
    ],
    [
      0.029724,
      "\u0008\u001b[K"
    ],
    [
      0.029691,
      "\u0008\u001b[K"
    ],
    [
      0.031391,
      "\u0007"
    ],
    [
      0.030697,
      "\u0007"
    ],
    [
      0.030498,
      "\u0007"
    ],
    [
      0.030741,
      "\u0007"
    ],
    [
      0.030023,
      "\u0007"
    ],
    [
      0.096555,
      "s"
    ],
    [
      0.100294,
      "e"
    ],
    [
      0.060088,
      "t"
    ],
    [
      0.162931,
      " "
    ],
    [
      1.902361,
      "|"
    ],
    [
      0.279982,
      " "
    ],
    [
      0.572124,
      "g"
    ],
    [
      0.069846,
      "r"
    ],
    [
      0.080429,
      "e"
    ],
    [
      0.169938,
      "p"
    ],
    [
      0.300834,
      " "
    ],
    [
      0.731540,
      "M"
    ],
    [
      0.090938,
      "Y"
    ],
    [
      0.220578,
      "_"
    ],
    [
      0.941381,
      "N"
    ],
    [
      0.080003,
      "A"
    ],
    [
      0.120367,
      "M"
    ],
    [
      0.110910,
      "E"
    ],
    [
      1.495513,
      "\r\n"
    ],
    [
      0.019562,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.711453,
      "\r\n"
    ],
    [
      0.008252,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.131428,
      "\r\n"
    ],
    [
      0.005002,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.274976,
      "e"
    ],
    [
      0.090697,
      "x"
    ],
    [
      0.113603,
      "i"
    ],
    [
      0.096839,
      "t"
    ],
    [
      0.223312,
      "\r\nexit\r\n"
    ],
    [
      0.007918,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.722282,
      "\r\n"
    ],
    [
      0.008426,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.151011,
      "\r\n"
    ],
    [
      0.005874,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.124498,
      "e"
    ],
    [
      0.069724,
      "x"
    ],
    [
      0.160145,
      "p"
    ],
    [
      0.090101,
      "o"
    ],
    [
      0.059958,
      "r"
    ],
    [
      0.130975,
      "t"
    ],
    [
      0.612759,
      " "
    ],
    [
      0.832107,
      "M"
    ],
    [
      0.110131,
      "Y"
    ],
    [
      0.350621,
      "_"
    ],
    [
      0.291190,
      "N"
    ],
    [
      0.130088,
      "A"
    ],
    [
      0.080035,
      "M"
    ],
    [
      0.170360,
      "E"
    ],
    [
      0.903065,
      "="
    ],
    [
      0.349966,
      "\""
    ],
    [
      0.511844,
      "\u0008\u001b[K"
    ],
    [
      0.110283,
      "'"
    ],
    [
      0.390634,
      "O"
    ],
    [
      0.190546,
      "u"
    ],
    [
      0.110046,
      "s"
    ],
    [
      0.170362,
      "s"
    ],
    [
      0.099915,
      "a"
    ],
    [
      0.103944,
      "m"
    ],
    [
      0.106976,
      "a"
    ],
    [
      0.160770,
      " "
    ],
    [
      0.290369,
      "E"
    ],
    [
      0.331046,
      "l"
    ],
    [
      0.150599,
      "g"
    ],
    [
      0.164224,
      "o"
    ],
    [
      0.097228,
      "u"
    ],
    [
      0.210528,
      "m"
    ],
    [
      0.059793,
      "r"
    ],
    [
      0.120437,
      "i"
    ],
    [
      0.270907,
      "'"
    ],
    [
      0.852928,
      "\r\n"
    ],
    [
      0.007846,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.703532,
      "\r\n"
    ],
    [
      0.008458,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.141176,
      "\r\n"
    ],
    [
      0.005824,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      1.136786,
      "b"
    ],
    [
      0.049860,
      "a"
    ],
    [
      0.093608,
      "s"
    ],
    [
      0.137666,
      "h"
    ],
    [
      0.341730,
      "\r\n"
    ],
    [
      0.134239,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.587344,
      "\r\n"
    ],
    [
      0.007699,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.131936,
      "\r\n"
    ],
    [
      0.005786,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.204589,
      "e"
    ],
    [
      0.120241,
      "c"
    ],
    [
      0.049803,
      "h"
    ],
    [
      0.080518,
      "o"
    ],
    [
      0.110038,
      " "
    ],
    [
      0.942634,
      "M"
    ],
    [
      0.110052,
      "Y"
    ],
    [
      0.251002,
      "_"
    ],
    [
      0.309996,
      "N"
    ],
    [
      0.211305,
      "A"
    ],
    [
      0.002783,
      "M"
    ],
    [
      0.088004,
      "E"
    ],
    [
      0.524100,
      "\u0008"
    ],
    [
      0.500184,
      "\u0008"
    ],
    [
      0.030607,
      "\u0008"
    ],
    [
      0.031169,
      "\u0008"
    ],
    [
      0.030385,
      "\u0008"
    ],
    [
      0.030536,
      "\u0008"
    ],
    [
      0.458927,
      "\u0008"
    ],
    [
      0.550192,
      "$MY_NAME\u0008\u0008\u0008\u0008\u0008\u0008\u0008"
    ],
    [
      0.381330,
      "\r\nOussama Elgoumri\r\n"
    ],
    [
      0.007937,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.693540,
      "\r\n"
    ],
    [
      0.005773,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.163734,
      "\r\n"
    ],
    [
      0.004321,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.677480,
      "e"
    ],
    [
      0.110488,
      "x"
    ],
    [
      0.029822,
      "i"
    ],
    [
      0.100361,
      "t"
    ],
    [
      0.131975,
      "\r\nexit\r\n"
    ],
    [
      0.007576,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.502023,
      "n"
    ],
    [
      0.079799,
      "v"
    ],
    [
      0.410804,
      "\u0008\u001b[K"
    ],
    [
      0.130336,
      "\u0008\u001b[K"
    ],
    [
      0.130683,
      "e"
    ],
    [
      0.110441,
      "n"
    ],
    [
      0.069905,
      "v"
    ],
    [
      0.153844,
      " "
    ],
    [
      0.758762,
      "|"
    ],
    [
      0.320787,
      " "
    ],
    [
      0.330210,
      "h"
    ],
    [
      0.070590,
      "r"
    ],
    [
      0.110308,
      "e"
    ],
    [
      0.240568,
      "\u0008\u001b[K"
    ],
    [
      0.170696,
      "\u0008\u001b[K"
    ],
    [
      0.230290,
      "g"
    ],
    [
      0.090157,
      "\u0008\u001b[K"
    ],
    [
      0.210024,
      "\u0008\u001b[K"
    ],
    [
      0.140856,
      "g"
    ],
    [
      0.301013,
      "r"
    ],
    [
      0.070320,
      "e"
    ],
    [
      0.110126,
      "p"
    ],
    [
      0.270734,
      " "
    ],
    [
      0.972004,
      "M"
    ],
    [
      0.109858,
      "Y"
    ],
    [
      0.260667,
      "_"
    ],
    [
      0.340688,
      "N"
    ],
    [
      0.170943,
      "A"
    ],
    [
      0.080322,
      "M"
    ],
    [
      0.149944,
      "E"
    ],
    [
      0.624205,
      "\r\n"
    ],
    [
      0.003149,
      "MY_NAME=Oussama Elgoumri\r\n"
    ],
    [
      0.007046,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.630193,
      "\r\n"
    ],
    [
      0.005743,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.154609,
      "\r\n"
    ],
    [
      0.005771,
      "\u001b]0;oussama@oussama-pc: ~\u0007\u001b[00;34m~\u001b[00m  "
    ],
    [
      0.474826,
      "e"
    ],
    [
      0.150397,
      "x"
    ],
    [
      0.019842,
      "i"
    ],
    [
      0.100992,
      "t"
    ],
    [
      0.195620,
      "\r\nexit\r\n"
    ]
  ]
}